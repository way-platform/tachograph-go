edition = "2023";

package wayplatform.connect.tachograph.card.v1;

import "google/protobuf/timestamp.proto";
import "wayplatform/connect/tachograph/card/v1/card_type.proto";

// Represents the content of the EF_Identification file, which contains identification
// data for the card and its holder.
//
// The file structure is specified in Appendix 2, Sections 4.2.1, 4.3.1, 4.4.1, and 4.5.1.
//
//     EF Identification
//     ├─CardIdentification
//     └─[Driver|Workshop|Control|Company]CardHolderIdentification
//
// The top-level structure varies by card type, but is a sequence of the two main data types.
message Identification {
  // Represents card identification data, common to all card types.
  //
  // The data type `CardIdentification` is specified in the Data Dictionary, Section 2.24.
  //
  // ASN.1 Specification:
  //
  //     CardIdentification ::= SEQUENCE {
  //         cardIssuingMemberState NationNumeric,
  //         cardNumber CardNumber,
  //         cardIssuingAuthorityName Name,
  //         cardIssueDate TimeReal,
  //         cardValidityBegin TimeReal,
  //         cardExpiryDate TimeReal
  //     }
  message Card {
    // See Data Dictionary, Section 2.24, `cardIssuingMemberState`.
    string card_issuing_member_state = 1;
    // See Data Dictionary, Section 2.24, `cardNumber`.
    string card_number = 2;
    // See Data Dictionary, Section 2.24, `cardIssuingAuthorityName`.
    string card_issuing_authority_name = 3;
    // See Data Dictionary, Section 2.24, `cardIssueDate`.
    google.protobuf.Timestamp card_issue_date = 4;
    // See Data Dictionary, Section 2.24, `cardValidityBegin`.
    google.protobuf.Timestamp card_validity_begin = 5;
    // See Data Dictionary, Section 2.24, `cardExpiryDate`.
    google.protobuf.Timestamp card_expiry_date = 6;
  }

  // Represents the identification of the driver card holder.
  //
  // The data type `DriverCardHolderIdentification` is specified in the Data Dictionary, Section 2.62.
  //
  // ASN.1 Specification:
  //
  //     DriverCardHolderIdentification ::= SEQUENCE {
  //         cardHolderName HolderName,
  //         cardHolderBirthDate Datef,
  //         cardHolderPreferredLanguage Language
  //     }
  message DriverCardHolder {
    // Corresponds to `holderSurname`.
    string card_holder_surname = 1;
    // Corresponds to `holderFirstNames`.
    string card_holder_first_names = 2;
    // See Data Dictionary, Section 2.62, `cardHolderBirthDate`.
    google.protobuf.Timestamp card_holder_birth_date = 3;
    // See Data Dictionary, Section 2.62, `cardHolderPreferredLanguage`.
    string card_holder_preferred_language = 4;
  }

  // Represents the identification of the workshop card holder.
  //
  // The data type `WorkshopCardHolderIdentification` is specified in the Data Dictionary, Section 2.237.
  //
  // ASN.1 Specification:
  //
  //     WorkshopCardHolderIdentification ::= SEQUENCE {
  //         workshopName Name,
  //         workshopAddress Address,
  //         cardHolderName HolderName,
  //         cardHolderPreferredLanguage Language
  //     }
  message WorkshopCardHolder {
    // See Data Dictionary, Section 2.237, `workshopName`.
    string workshop_name = 1;
    // See Data Dictionary, Section 2.237, `workshopAddress`.
    string workshop_address = 2;
    // Corresponds to `holderSurname`.
    string card_holder_surname = 3;
    // Corresponds to `holderFirstNames`.
    string card_holder_first_names = 4;
    // See Data Dictionary, Section 2.237, `cardHolderPreferredLanguage`.
    string card_holder_preferred_language = 5;
  }

  // Represents the identification of the control card holder.
  //
  // The data type `ControlCardHolderIdentification` is specified in the Data Dictionary, Section 2.52.
  //
  // ASN.1 Specification:
  //
  //     ControlCardHolderIdentification ::= SEQUENCE {
  //         controlBodyName Name,
  //         controlBodyAddress Address,
  //         cardHolderName HolderName,
  //         cardHolderPreferredLanguage Language
  //     }
  message ControlCardHolder {
    // See Data Dictionary, Section 2.52, `controlBodyName`.
    string control_body_name = 1;
    // See Data Dictionary, Section 2.52, `controlBodyAddress`.
    string control_body_address = 2;
    // Corresponds to `holderSurname`.
    string card_holder_surname = 3;
    // Corresponds to `holderFirstNames`.
    string card_holder_first_names = 4;
    // See Data Dictionary, Section 2.52, `cardHolderPreferredLanguage`.
    string card_holder_preferred_language = 5;
  }

  // Represents the identification of the company card holder.
  //
  // The data type `CompanyCardHolderIdentification` is specified in the Data Dictionary, Section 2.49.
  //
  // ASN.1 Specification:
  //
  //     CompanyCardHolderIdentification ::= SEQUENCE {
  //         companyName Name,
  //         companyAddress Address,
  //         cardHolderPreferredLanguage Language
  //     }
  message CompanyCardHolder {
    // See Data Dictionary, Section 2.49, `companyName`.
    string company_name = 1;
    // See Data Dictionary, Section 2.49, `companyAddress`.
    string company_address = 2;
    // See Data Dictionary, Section 2.49, `cardHolderPreferredLanguage`.
    string card_holder_preferred_language = 3;
  }

  // The common card identification part.
  Card card = 1;

  // The type of card this identification belongs to. This determines which
  // of the following holder identification fields is populated.
  CardType card_type = 2;

  // Holder identification for a driver card.
  // Populated only if card_type is DRIVER_CARD.
  DriverCardHolder driver_card_holder = 3;

  // Holder identification for a workshop card.
  // Populated only if card_type is WORKSHOP_CARD.
  WorkshopCardHolder workshop_card_holder = 4;

  // Holder identification for a control card.
  // Populated only if card_type is CONTROL_CARD.
  ControlCardHolder control_card_holder = 5;

  // Holder identification for a company card.
  // Populated only if card_type is COMPANY_CARD.
  CompanyCardHolder company_card_holder = 6;

  // Digital signature for the EF_Identification file content.
  bytes signature = 7;
}
