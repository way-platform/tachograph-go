edition = "2023";

package wayplatform.connect.tachograph.card.v1;

import "wayplatform/connect/tachograph/dd/v1/place_record.proto";
import "wayplatform/connect/tachograph/dd/v1/place_record_g2.proto";

// Represents the content of the EF_Places file, where daily work periods begin and/or end.
//
// This is a circular buffer that may contain corrupted records due to overwrites.
// Records store information about when and where daily work periods started or ended.
//
// The format differs between generations:
// - Gen1: 10-byte records (no GNSS data) - stored in `records`
// - Gen2: 21-byte records (includes GNSS data) - stored in `records_g2`
//
// The file structure is specified in Appendix 2, Section 4.2.1:
//
//     EF Places
//     └─CardPlaceDailyWorkPeriod
//
// The data type `CardPlaceDailyWorkPeriod` is specified in the Data Dictionary, Section 2.27.
//
// ASN.1 Definition:
//
//     CardPlaceDailyWorkPeriod ::= SEQUENCE {
//         placePointerNewestRecord INTEGER(0..NoOfCardPlaceRecords-1),
//         placeRecords SET SIZE(NoOfCardPlaceRecords) OF PlaceRecord
//     }
message Places {

  // Index of the newest record in the circular buffer.
  //
  // Corresponds to `placePointerNewestRecord` in DD Section 2.27.
  // Valid range: 0 to (number of records - 1).
  int32 newest_record_index = 1;

  // Place records from the circular buffer (Generation 1 format).
  //
  // Each record is 10 bytes and may be valid (successfully parsed) or corrupted
  // (from buffer overwrites). Check the `valid` field on each record to determine
  // which fields are reliable.
  //
  // Only one of `records` or `records_g2` will be populated, based on the DF context.
  //
  // Corresponds to `placeRecords` in DD Section 2.27.
  repeated dd.v1.PlaceRecord records = 2;

  // Place records from the circular buffer (Generation 2 format).
  //
  // Each record is 21 bytes and includes GNSS location data. Records may be valid
  // (successfully parsed) or corrupted (from buffer overwrites). Check the `valid`
  // field on each record to determine which fields are reliable.
  //
  // Only one of `records` or `records_g2` will be populated, based on the DF context.
  //
  // Corresponds to `placeRecords` in DD Section 2.27.
  repeated dd.v1.PlaceRecordG2 records_g2 = 6;

  // Trailing bytes that don't form complete records (for roundtrip fidelity).
  bytes trailing_bytes = 3;

  // Signature from the following file block, if present.
  //
  // Gen1: RSA signature, 128 bytes (OCTET STRING SIZE(128))
  // Gen2: ECDSA signature, variable size based on elliptic curve
  //
  // See Data Dictionary, Section 2.149, `Signature`.
  bytes signature = 5;
}
