edition = "2023";

package wayplatform.connect.tachograph.vu.v1;

import "google/protobuf/timestamp.proto";
import "wayplatform/connect/tachograph/dd/v1/calibration_purpose.proto";
import "wayplatform/connect/tachograph/dd/v1/card_slot_number.proto";
import "wayplatform/connect/tachograph/dd/v1/card_structure_version.proto";
import "wayplatform/connect/tachograph/dd/v1/date.proto";
import "wayplatform/connect/tachograph/dd/v1/driver_identification.proto";
import "wayplatform/connect/tachograph/dd/v1/equipment_type.proto";
import "wayplatform/connect/tachograph/dd/v1/extended_serial_number.proto";
import "wayplatform/connect/tachograph/dd/v1/full_card_number.proto";
import "wayplatform/connect/tachograph/dd/v1/full_card_number_and_generation.proto";
import "wayplatform/connect/tachograph/dd/v1/generation.proto";
import "wayplatform/connect/tachograph/dd/v1/nation_numeric.proto";
import "wayplatform/connect/tachograph/dd/v1/owner_identification.proto";
import "wayplatform/connect/tachograph/dd/v1/software_identification.proto";
import "wayplatform/connect/tachograph/dd/v1/string_value.proto";
import "wayplatform/connect/tachograph/dd/v1/vehicle_registration_identification.proto";
import "wayplatform/connect/tachograph/dd/v1/version.proto";

// Represents the consolidated data structure for a Technical Data transfer.
//
// This message corresponds to the data defined in the regulation document:
// Appendix 7, Section 2.2.6.6: "Positive Response Transfer Data Technical Data".
message TechnicalData {
  // The generation of the vehicle unit, parsed from the raw transfer data.
  // This is a discriminator field used for parsing.
  dd.v1.Generation generation = 1;

  // Represents the identification data of the vehicle unit.
  //
  // See Data Dictionary, Section 2.205, `VuIdentification`.
  //
  // ASN.1 Definition:
  //
  //     VuIdentification ::= SEQUENCE {
  //         vuManufacturerName VuManufacturerName,
  //         vuManufacturerAddress VuManufacturerAddress,
  //         vuPartNumber VuPartNumber,
  //         vuSerialNumber VuSerialNumber,
  //         vuSoftwareIdentification VuSoftwareIdentification,
  //         vuManufacturingDate VuManufacturingDate,
  //         vuApprovalNumber VuApprovalNumber
  //     }
  message VuIdentification {
    // The name of the VU manufacturer.
    //
    // See Data Dictionary, Section 2.210, `VuManufacturerName`.
    // ASN.1 Definition:
    //
    //     VuManufacturerName ::= Name
    wayplatform.connect.tachograph.dd.v1.StringValue manufacturer_name = 1;

    // The address of the VU manufacturer.
    //
    // See Data Dictionary, Section 2.209, `VuManufacturerAddress`.
    // ASN.1 Definition:
    //
    //     VuManufacturerAddress ::= Address
    wayplatform.connect.tachograph.dd.v1.StringValue manufacturer_address = 2;

    // The part number of the VU.
    //
    // See Data Dictionary, Section 2.217, `VuPartNumber`.
    //
    // ASN.1 Definition:
    //
    //     VuPartNumber ::= IA5String(SIZE(16))
    wayplatform.connect.tachograph.dd.v1.StringValue part_number = 3;

    // The serial number of the VU.
    //
    // See Data Dictionary, Section 2.223, `VuSerialNumber`.
    dd.v1.ExtendedSerialNumber serial_number = 4;

    // The software identification of the VU.
    dd.v1.SoftwareIdentification software_identification = 5;

    // The manufacturing date of the VU.
    //
    // See Data Dictionary, Section 2.211, `VuManufacturingDate`.
    // ASN.1 Definition:
    //
    //     VuManufacturingDate ::= TimeReal ::= INTEGER (0..2^32-1)
    google.protobuf.Timestamp manufacturing_date = 6;

    // The approval number of the VU.
    //
    // See Data Dictionary, Section 2.172, `VuApprovalNumber`.
    //
    // ASN.1 Definition:
    //
    //     VuApprovalNumber ::= IA5String(SIZE(8)) or IA5String(SIZE(16))
    wayplatform.connect.tachograph.dd.v1.StringValue approval_number = 7;
  }

  // Represents a paired motion sensor record.
  //
  // See Data Dictionary, Section 2.145, `SensorPairedRecord`.
  //
  // ASN.1 Definition:
  //
  //     SensorPairedRecord ::= SEQUENCE {
  //         sensorSerialNumber SensorSerialNumber,
  //         sensorApprovalNumber SensorApprovalNumber,
  //         sensorPairingDate SensorPairingDate
  //     }
  message PairedSensor {
    // The serial number of the motion sensor.
    //
    // See Data Dictionary, Section 2.148, `SensorSerialNumber`.
    dd.v1.ExtendedSerialNumber serial_number = 1;

    // The approval number of the motion sensor.
    //
    // See Data Dictionary, Section 2.131, `SensorApprovalNumber`.
    //
    // ASN.1 Definition (Gen1):
    //
    //     SensorApprovalNumber ::= IA5String(SIZE(8))
    //
    // ASN.1 Definition (Gen2):
    //
    //     SensorApprovalNumber ::= IA5String(SIZE(16))
    wayplatform.connect.tachograph.dd.v1.StringValue approval_number = 2;

    // The date the sensor was paired.
    //
    // See Data Dictionary, Section 2.146, `SensorPairingDate`.
    // ASN.1 Definition:
    //
    //     SensorPairingDate ::= TimeReal ::= INTEGER (0..2^32-1)
    google.protobuf.Timestamp pairing_date = 3;
  }

  // Represents a coupled external GNSS facility record.
  //
  // See Data Dictionary, Section 2.133, `SensorExternalGNSSCoupledRecord`.
  //
  // ASN.1 Definition:
  //
  //     SensorExternalGNSSCoupledRecord ::= SEQUENCE {
  //         sensorSerialNumber SensorGNSSSerialNumber,
  //         sensorApprovalNumber SensorExternalGNSSApprovalNumber,
  //         sensorCouplingDate SensorGNSSCouplingDate
  //     }
  message CoupledGnss {
    // The serial number of the external GNSS.
    //
    // See Data Dictionary, Section 2.139, `SensorGNSSSerialNumber`.
    dd.v1.ExtendedSerialNumber serial_number = 1;

    // The approval number of the external GNSS.
    //
    // See Data Dictionary, Section 2.132, `SensorExternalGNSSApprovalNumber`.
    //
    // ASN.1 Definition:
    //
    //     SensorExternalGNSSApprovalNumber ::= IA5String(SIZE(16))
    wayplatform.connect.tachograph.dd.v1.StringValue approval_number = 2;

    // The date the GNSS was coupled.
    //
    // See Data Dictionary, Section 2.138, `SensorGNSSCouplingDate`.
    // ASN.1 Definition:
    //
    //     SensorGNSSCouplingDate ::= TimeReal ::= INTEGER (0..2^32-1)
    google.protobuf.Timestamp coupling_date = 3;
  }

  // Represents a calibration record.
  //
  // See Data Dictionary, Section 2.174, `VuCalibrationRecord`.
  message CalibrationRecord {
    // The purpose of the calibration.
    //
    // See Data Dictionary, Section 2.8, `CalibrationPurpose`.
    dd.v1.CalibrationPurpose purpose = 1;
    int32 unrecognized_purpose = 2;

    // The name of the workshop.
    //
    // See Data Dictionary, Section 2.99, `Name`.
    // ASN.1 Definition:
    //
    //     Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
    wayplatform.connect.tachograph.dd.v1.StringValue workshop_name = 3;

    // The address of the workshop.
    //
    // See Data Dictionary, Section 2.2, `Address`.
    // ASN.1 Definition:
    //
    //     Address ::= SEQUENCE { codePage INTEGER(0..255), address OCTET STRING (SIZE(36)) }
    wayplatform.connect.tachograph.dd.v1.StringValue workshop_address = 4;

    // The card number of the workshop.
    //
    // The underlying `VuCalibrationRecord` exists for both Gen1 and Gen2.
    // To support both versions in a single field and ensure unique card
    // identification for Gen2, this uses the `FullCardNumberAndGeneration` superset.
    // For Gen1 records, the `generation` field will be unset.
    //
    // See Data Dictionary, Sections 2.73 (`FullCardNumber`) and 2.74 (`FullCardNumberAndGeneration`).
    dd.v1.FullCardNumberAndGeneration workshop_card_number = 5;

    // The expiry date of the workshop card.
    //
    // See Data Dictionary, Section 2.57, `Datef`.
    // ASN.1 Definition:
    //
    //     Datef ::= OCTET STRING (SIZE(4))
    wayplatform.connect.tachograph.dd.v1.Date workshop_card_expiry_date = 6;

    // The Vehicle Identification Number.
    //
    // See Data Dictionary, Section 2.164, `VehicleIdentificationNumber`.
    //
    // ASN.1 Definition:
    //
    //     VehicleIdentificationNumber ::= IA5String(SIZE(17))
    wayplatform.connect.tachograph.dd.v1.StringValue vin = 7;

    // The vehicle registration identifier.
    //
    // See Data Dictionary, Section 2.166, `VehicleRegistrationIdentification`.
    dd.v1.VehicleRegistrationIdentification vehicle_registration = 8;

    // The vehicle characteristic constant.
    //
    // See Data Dictionary, Section 2.239, `W-VehicleCharacteristicConstant`.
    // ASN.1 Definition:
    //
    //     W-VehicleCharacteristicConstant ::= INTEGER(0..65535)
    int32 w_vehicle_characteristic_constant = 9;

    // The constant of the recording equipment.
    //
    // See Data Dictionary, Section 2.85, `K-ConstantOfRecordingEquipment`.
    // ASN.1 Definition:
    //
    //     K-ConstantOfRecordingEquipment ::= INTEGER(0..65535)
    int32 k_constant_of_recording_equipment = 10;

    // The tyre circumference in 1/8ths of a mm.
    //
    // See Data Dictionary, Section 2.91, `L-TyreCircumference`.
    // ASN.1 Definition:
    //
    //     L-TyreCircumference ::= INTEGER(0..65535)
    int32 l_tyre_circumference_eighths_mm = 11;

    // The tyre size designation.
    //
    // See Data Dictionary, Section 2.163, `TyreSize`.
    //
    // ASN.1 Definition:
    //
    //     TyreSize ::= IA5String(SIZE(15))
    wayplatform.connect.tachograph.dd.v1.StringValue tyre_size = 12;

    // The authorised speed in km/h.
    //
    // See Data Dictionary, Section 2.156, `SpeedAuthorised`.
    // ASN.1 Definition:
    //
    //     SpeedAuthorised ::= INTEGER(0..255)
    int32 authorised_speed_kmh = 13;

    // The odometer value before calibration in km.
    //
    // See Data Dictionary, Section 2.113, `OdometerShort`.
    // ASN.1 Definition:
    //
    //     OdometerShort ::= INTEGER(0..999999)
    int32 old_odometer_value_km = 14;

    // The odometer value after calibration in km.
    //
    // See Data Dictionary, Section 2.113, `OdometerShort`.
    // ASN.1 Definition:
    //
    //     OdometerShort ::= INTEGER(0..999999)
    int32 new_odometer_value_km = 15;

    // The time value before calibration.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    // ASN.1 Definition:
    //
    //     TimeReal ::= INTEGER (0..2^32-1)
    google.protobuf.Timestamp old_time_value = 16;

    // The time value after calibration.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    // ASN.1 Definition:
    //
    //     TimeReal ::= INTEGER (0..2^32-1)
    google.protobuf.Timestamp new_time_value = 17;

    // The date of the next calibration.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    // ASN.1 Definition:
    //
    //     TimeReal ::= INTEGER (0..2^32-1)
    google.protobuf.Timestamp next_calibration_date = 18;
  }

  // Represents a record of a card used in the VU.
  //
  // See Data Dictionary, Section 2.179, `VuCardRecord`.
  //
  // ASN.1 Definition:
  //
  //     VuCardRecord ::= SEQUENCE {
  //         cardNumberAndGenerationInformation FullCardNumberAndGeneration,
  //         cardExtendedSerialNumber           ExtendedSerialNumber,
  //         cardStructureVersion               CardStructureVersion,
  //         cardNumber                         CardNumber
  //     }
  message CardRecord {
    // The full card number and generation of the card used.
    //
    // Corresponds to `cardNumberAndGenerationInformation`.
    // See Data Dictionary, Section 2.74.
    dd.v1.FullCardNumberAndGeneration card_number_and_generation = 1;

    // The extended serial number of the card, from the card's EF_ICC file.
    //
    // Corresponds to `cardExtendedSerialNumber`.
    // See Data Dictionary, Section 2.72.
    dd.v1.ExtendedSerialNumber card_extended_serial_number = 2;

    // The structure version of the card, from the card's EF_Application_Identification file.
    //
    // Corresponds to `cardStructureVersion`.
    // See Data Dictionary, Section 2.36.
    dd.v1.CardStructureVersion card_structure_version = 3;

    // The card number, as read from the card's EF_Identification file.
    // This is a CHOICE type in the ASN.1 spec, so only one of the following
    // two fields will be populated.
    //
    // Corresponds to `cardNumber`.
    // See Data Dictionary, Section 2.26.
    //
    // ASN.1 Definition:
    //
    //     CardNumber ::= CHOICE {
    //         driverIdentification   SEQUENCE { ... },
    //         ownerIdentification    SEQUENCE { ... }
    //     }
    dd.v1.DriverIdentification driver_identification = 4;
    dd.v1.OwnerIdentification owner_identification = 5;
  }

  // Represents a record of ITS consent status for a card (Gen2 only).
  //
  // See Data Dictionary, Section 2.207, `VuITSConsentRecord`.
  //
  // ASN.1 Definition:
  //
  //     VuITSConsentRecord ::= SEQUENCE {
  //         cardNumberAndGen FullCardNumberAndGeneration,
  //         consent          BOOLEAN
  //     }
  message ItsConsentRecord {
    // The full card number and generation of the card holder.
    //
    // This is a Gen2-only record and the specification explicitly requires
    // `FullCardNumberAndGeneration`.
    dd.v1.FullCardNumberAndGeneration full_card_number_and_generation = 1;

    // The consent status for ITS data provision.
    //
    // ASN.1 Definition:
    //
    //     BOOLEAN
    bool consent_status = 2;
  }

  // Represents a record of a power supply interruption.
  //
  // See Data Dictionary, Section 2.240, `VuPowerSupplyInterruptionRecord`.
  message PowerSupplyInterruptionRecord {
    // The timestamp of the interruption.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    // ASN.1 Definition:
    //
    //     TimeReal ::= INTEGER (0..2^32-1)
    google.protobuf.Timestamp timestamp = 1;

    // The slot number of the card affected.
    //
    // See Data Dictionary, Section 2.33, `CardSlotNumber`.
    dd.v1.CardSlotNumber card_slot_number = 2;
    int32 unrecognized_card_slot_number = 3;
  }

  // Vehicle unit identification data.
  // Corresponds to `VuIdentification` (DD 2.205).
  VuIdentification vu_identification = 2;

  // All calibration records stored in the VU.
  // Corresponds to `VuCalibrationData` (DD 2.173) or `VuCalibrationRecordArray` (DD 2.175).
  repeated CalibrationRecord calibration_records = 3;

  // For Gen1, the single paired sensor.
  // Corresponds to `SensorPaired` (DD 2.144).
  PairedSensor paired_sensor = 4;

  // For Gen2, the list of paired sensors.
  // Corresponds to `VuSensorPairedRecordArray` (DD 2.243).
  repeated PairedSensor paired_sensors = 5;

  // For Gen2, the list of coupled external GNSS facilities.
  // Corresponds to `VuSensorExternalGNSSCoupledRecordArray` (DD 2.242).
  repeated CoupledGnss coupled_gnss_facilities = 6;

  // For Gen2, the list of cards that have been used in the VU.
  // Corresponds to `VuCardRecordArray` (DD 2.180).
  repeated CardRecord card_records = 7;

  // For Gen2, the list of ITS consent records.
  // Corresponds to `VuITSConsentRecordArray` (DD 2.208).
  repeated ItsConsentRecord its_consent_records = 8;

  // For Gen2, the list of power supply interruptions.
  // Corresponds to `VuPowerSupplyInterruptionRecordArray` (DD 2.241).
  repeated PowerSupplyInterruptionRecord power_supply_interruptions = 9;

  // Signature for Gen1 data (RSA, 128 bytes).
  //
  // See Data Dictionary, Section 2.149, `Signature`.
  // ASN.1 Definition:
  //
  //     Signature ::= OCTET STRING (SIZE (128))
  bytes signature_gen1 = 10;

  // Signature for Gen2 data (ECC).
  //
  // See Data Dictionary, Section 2.149, `Signature`.
  bytes signature_gen2 = 11;

  // The raw, unparsed binary data of the complete Technical Data transfer value.
  // This field is preserved for data fidelity and lossless round-trips.
  // It includes all data structures and the embedded signature.
  bytes raw_data = 12;
}
