edition = "2023";

package wayplatform.connect.tachograph.vu.v1;

import "google/protobuf/timestamp.proto";
import "wayplatform/connect/tachograph/vu/v1/versioning.proto";

// Represents the consolidated data structure for a Technical Data transfer.
//
// This message corresponds to the data defined in the regulation document:
// Appendix 7, Section 2.2.6.6: "Positive Response Transfer Data Technical Data".
message TechnicalData {
  // Discriminator field indicating the generation of the data.
  Generation generation = 1;

  // Represents the identification data of the vehicle unit.
  //
  // Corresponds to the `VuIdentification` data type.
  // See Data Dictionary, Section 2.205.
  message VuIdentification {
    // See Data Dictionary, Section 2.210 for `VuManufacturerName`.
    string manufacturer_name = 1;
    // See Data Dictionary, Section 2.209 for `VuManufacturerAddress`.
    string manufacturer_address = 2;
    // See Data Dictionary, Section 2.217 for `VuPartNumber`.
    string part_number = 3;
    // Part of `ExtendedSerialNumber`. See Data Dictionary, Section 2.72.
    string serial_number = 4;
    // Part of `VuSoftwareIdentification`. See Data Dictionary, Section 2.225.
    string software_version = 5;
    // See Data Dictionary, Section 2.224 for `VuSoftInstallationDate`.
    google.protobuf.Timestamp software_installation_date = 6;
    // See Data Dictionary, Section 2.211 for `VuManufacturingDate`.
    google.protobuf.Timestamp manufacturing_date = 7;
    // See Data Dictionary, Section 2.172 for `VuApprovalNumber`.
    string approval_number = 8;
  }

  // Represents a paired motion sensor record.
  //
  // Corresponds to the `SensorPairedRecord` data type.
  // See Data Dictionary, Section 2.145.
  message PairedSensor {
    // See Data Dictionary, Section 2.148 for `SensorSerialNumber`.
    string serial_number = 1;
    // See Data Dictionary, Section 2.131 for `SensorApprovalNumber`.
    string approval_number = 2;
    // See Data Dictionary, Section 2.146 for `SensorPairingDate`.
    google.protobuf.Timestamp pairing_date = 3;
  }

  // Represents a coupled external GNSS facility record.
  //
  // Corresponds to the `SensorExternalGNSSCoupledRecord` data type.
  // See Data Dictionary, Section 2.133.
  message CoupledGnss {
    // See Data Dictionary, Section 2.139 for `SensorGNSSSerialNumber`.
    string serial_number = 1;
    // See Data Dictionary, Section 2.132 for `SensorExternalGNSSApprovalNumber`.
    string approval_number = 2;
    // See Data Dictionary, Section 2.138 for `SensorGNSSCouplingDate`.
    google.protobuf.Timestamp coupling_date = 3;
  }

  // Represents a calibration record.
  //
  // Corresponds to the `VuCalibrationRecord` data type.
  // See Data Dictionary, Section 2.174.
  message CalibrationRecord {
    // See Data Dictionary, Section 2.8 for `CalibrationPurpose`.
    int32 purpose = 1;
    // See Data Dictionary, Section 2.99 for `Name`.
    string workshop_name = 2;
    // See Data Dictionary, Section 2.2 for `Address`.
    string workshop_address = 3;
    // Part of `FullCardNumber`. See Data Dictionary, Section 2.73.
    string workshop_card_number = 4;
    // See Data Dictionary, Section 2.24 for `cardExpiryDate`.
    google.protobuf.Timestamp workshop_card_expiry_date = 5;
    // See Data Dictionary, Section 2.164 for `VehicleIdentificationNumber`.
    string vin = 6;
    // Part of `VehicleRegistrationIdentification`. See DD Sections 2.166 & 2.167.
    string vrn = 7;
    // Part of `VehicleRegistrationIdentification`. See DD Sections 2.166 & 2.101.
    int32 registering_nation = 8;
    // See Data Dictionary, Section 2.239 for `W-VehicleCharacteristicConstant`.
    int32 w_vehicle_characteristic_constant = 9;
    // See Data Dictionary, Section 2.85 for `K-ConstantOfRecordingEquipment`.
    int32 k_constant_of_recording_equipment = 10;
    // See Data Dictionary, Section 2.91 for `L-TyreCircumference`.
    int32 l_tyre_circumference_mm = 11;
    // See Data Dictionary, Section 2.163 for `TyreSize`.
    string tyre_size = 12;
    // See Data Dictionary, Section 2.156 for `SpeedAuthorised`.
    int32 authorised_speed_kmh = 13;
    // Odometer value before calibration. See DD Section 2.113 for `OdometerShort`.
    int32 old_odometer_value_km = 14;
    // Odometer value after calibration. See DD Section 2.113 for `OdometerShort`.
    int32 new_odometer_value_km = 15;
    // Time value before calibration. See DD Section 2.162 for `TimeReal`.
    google.protobuf.Timestamp old_time_value = 16;
    // Time value after calibration. See DD Section 2.162 for `TimeReal`.
    google.protobuf.Timestamp new_time_value = 17;
    // Date of next calibration. See DD Section 2.57 for `Datef`.
    google.protobuf.Timestamp next_calibration_date = 18;
  }

  // Represents a record of a card used in the VU.
  //
  // Corresponds to the `VuCardRecord` data type.
  // See Data Dictionary, Section 2.179.
  message CardRecord {
    // See Data Dictionary, Section 2.73 for `FullCardNumber`.
    string full_card_number = 1;
    // See Data Dictionary, Section 2.36 for `CardStructureVersion`.
    bytes card_structure_version = 2;
    // Part of `FullCardNumber`. See Data Dictionary, Section 2.73.
    int32 card_type = 3;
  }

  // Represents a record of ITS consent status for a card.
  //
  // Corresponds to the `VuITSConsentRecord` data type.
  // See Data Dictionary, Section 2.207.
  message ItsConsentRecord {
    // See Data Dictionary, Section 2.73 for `FullCardNumber`.
    string full_card_number = 1;
    // Consent status for ITS data provision.
    int32 consent_status = 2;
  }

  // Represents a record of a power supply interruption.
  //
  // Corresponds to the `VuPowerSupplyInterruptionRecord` data type.
  // See Data Dictionary, Section 2.240.
  message PowerSupplyInterruptionRecord {
    // Timestamp of the interruption. See DD Section 2.162 for `TimeReal`.
    google.protobuf.Timestamp timestamp = 1;
    // Slot number of the card affected. See DD Section 2.33 for `CardSlotNumber`.
    int32 card_slot_number = 2;
  }

  // Vehicle unit identification data.
  VuIdentification vu_identification = 2;
  // All calibration records stored in the VU.
  repeated CalibrationRecord calibration_records = 3;

  // For Gen1, the single paired sensor.
  PairedSensor paired_sensor = 4;

  // For Gen2, the list of paired sensors.
  repeated PairedSensor paired_sensors = 5;
  // For Gen2, the list of coupled external GNSS facilities.
  repeated CoupledGnss coupled_gnss_facilities = 6;
  // For Gen2, the list of cards that have been used in the VU.
  repeated CardRecord card_records = 7;
  // For Gen2, the list of ITS consent records.
  repeated ItsConsentRecord its_consent_records = 8;
  // For Gen2, the list of power supply interruptions.
  repeated PowerSupplyInterruptionRecord power_supply_interruptions = 9;

  // Signature for Gen1 data (RSA, 128 bytes).
  // See Data Dictionary, Section 2.149.
  bytes signature_gen1 = 10;

  // Signature for Gen2 data (ECC).
  // See Data Dictionary, Section 2.149.
  bytes signature_gen2 = 11;
}
