edition = "2023";

package wayplatform.connect.tachograph.vu.v1;

import "google/protobuf/timestamp.proto";
import "wayplatform/connect/tachograph/dd/v1/event_fault_record_purpose.proto";
import "wayplatform/connect/tachograph/dd/v1/event_fault_type.proto";
import "wayplatform/connect/tachograph/dd/v1/full_card_number.proto";
import "wayplatform/connect/tachograph/dd/v1/string_value.proto";

// Events and Faults data for Generation 1 VU downloads.
//
// See Appendix 7, Section 2.2.6.4 (TREP 03 Hex).
//
// ASN.1 Definition:
//
//     VuEventsAndFaultsFirstGen ::= SEQUENCE {
//         vuFaultData VuFaultData,
//         vuEventData VuEventData,
//         vuOverSpeedingControlData VuOverSpeedingControlData,
//         vuOverSpeedingEventData VuOverSpeedingEventData,
//         vuTimeAdjustmentData VuTimeAdjustmentData,
//         signature SignatureFirstGen
//     }
message EventsAndFaultsGen1 {
  // Represents a vehicle unit fault record.
  //
  // See Data Dictionary, Section 2.201, `VuFaultRecord`.
  //
  // ASN.1 Definition:
  //
  //     VuFaultRecord ::= SEQUENCE {
  //         faultType EventFaultType,
  //         faultRecordPurpose EventFaultRecordPurpose,
  //         faultBeginTime TimeReal,
  //         faultEndTime TimeReal,
  //         cardNumberDriverSlotBegin FullCardNumber,
  //         cardNumberCodriverSlotBegin FullCardNumber,
  //         cardNumberDriverSlotEnd FullCardNumber,
  //         cardNumberCodriverSlotEnd FullCardNumber
  //     }
  message FaultRecord {
    // Type of the fault.
    //
    // See Data Dictionary, Section 2.70, `EventFaultType`.
    dd.v1.EventFaultType fault_type = 1;
    int32 unrecognized_fault_type = 2;

    // Purpose for which the fault has been recorded.
    //
    // See Data Dictionary, Section 2.69, `EventFaultRecordPurpose`.
    dd.v1.EventFaultRecordPurpose record_purpose = 3;
    int32 unrecognized_record_purpose = 4;

    // Date and time of the beginning of the fault.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp begin_time = 5;

    // Date and time of the end of the fault.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp end_time = 6;

    // Card number in driver slot at begin.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber card_number_driver_slot_begin = 7;

    // Card number in co-driver slot at begin.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber card_number_codriver_slot_begin = 8;

    // Card number in driver slot at end.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber card_number_driver_slot_end = 9;

    // Card number in co-driver slot at end.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber card_number_codriver_slot_end = 10;
  }

  // Represents a vehicle unit event record.
  //
  // See Data Dictionary, Section 2.198, `VuEventRecord`.
  //
  // ASN.1 Definition:
  //
  //     VuEventRecord ::= SEQUENCE {
  //         eventType EventFaultType,
  //         eventRecordPurpose EventFaultRecordPurpose,
  //         eventBeginTime TimeReal,
  //         eventEndTime TimeReal,
  //         cardNumberDriverSlotBegin FullCardNumber,
  //         cardNumberCodriverSlotBegin FullCardNumber,
  //         cardNumberDriverSlotEnd FullCardNumber,
  //         cardNumberCodriverSlotEnd FullCardNumber,
  //         similarEventsNumber SimilarEventsNumber
  //     }
  message EventRecord {
    // Type of the event.
    //
    // See Data Dictionary, Section 2.70, `EventFaultType`.
    dd.v1.EventFaultType event_type = 1;
    int32 unrecognized_event_type = 2;

    // Purpose for which the event has been recorded.
    //
    // See Data Dictionary, Section 2.69, `EventFaultRecordPurpose`.
    dd.v1.EventFaultRecordPurpose record_purpose = 3;
    int32 unrecognized_record_purpose = 4;

    // Date and time of the beginning of the event.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp begin_time = 5;

    // Date and time of the end of the event.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp end_time = 6;

    // Card number in driver slot at begin.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber card_number_driver_slot_begin = 7;

    // Card number in co-driver slot at begin.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber card_number_codriver_slot_begin = 8;

    // Card number in driver slot at end.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber card_number_driver_slot_end = 9;

    // Card number in co-driver slot at end.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber card_number_codriver_slot_end = 10;

    // Number of similar events on the same day.
    //
    // See Data Dictionary, Section 2.151, `SimilarEventsNumber`.
    int32 similar_events_number = 11;
  }

  // Represents overspeeding control data.
  //
  // See Data Dictionary, Section 2.212, `VuOverSpeedingControlData`.
  //
  // ASN.1 Definition:
  //
  //     VuOverSpeedingControlData ::= SEQUENCE {
  //         lastOverspeedControlTime TimeReal,
  //         firstOverspeedSince TimeReal,
  //         numberOfOverspeedSince OverspeedNumber
  //     }
  message OverSpeedingControlData {
    // Date and time of the last overspeeding control.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp last_control_time = 1;

    // Date and time of the first overspeeding since the last control.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp first_overspeed_since_last_control = 2;

    // Number of overspeeding events since the last control.
    //
    // See Data Dictionary, Section 2.116, `OverspeedNumber`.
    int32 number_of_overspeed_since_last_control = 3;
  }

  // Represents an overspeeding event record.
  //
  // See Data Dictionary, Section 2.215, `VuOverSpeedingEventRecord`.
  //
  // ASN.1 Definition:
  //
  //     VuOverSpeedingEventRecord ::= SEQUENCE {
  //         eventType EventFaultType,
  //         eventRecordPurpose EventFaultRecordPurpose,
  //         eventBeginTime TimeReal,
  //         eventEndTime TimeReal,
  //         maxSpeedValue SpeedMax,
  //         averageSpeedValue SpeedAverage,
  //         cardNumberDriverSlotBegin FullCardNumber,
  //         similarEventsNumber SimilarEventsNumber
  //     }
  message OverSpeedingEventRecord {
    // Type of the event (always 'Over speeding').
    //
    // See Data Dictionary, Section 2.70, `EventFaultType`.
    dd.v1.EventFaultType event_type = 1;
    int32 unrecognized_event_type = 2;

    // Purpose for which the event has been recorded.
    //
    // See Data Dictionary, Section 2.69, `EventFaultRecordPurpose`.
    dd.v1.EventFaultRecordPurpose record_purpose = 3;
    int32 unrecognized_record_purpose = 4;

    // Date and time of the beginning of the event.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp begin_time = 5;

    // Date and time of the end of the event.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp end_time = 6;

    // Maximum speed measured during the event in km/h.
    //
    // See Data Dictionary, Section 2.158, `SpeedMax`.
    int32 max_speed_kmh = 7;

    // Average speed measured during the event in km/h.
    //
    // See Data Dictionary, Section 2.157, `SpeedAverage`.
    int32 average_speed_kmh = 8;

    // The card number of the driver who caused the event.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber card_number_driver_slot_begin = 9;

    // Number of similar events on the same day.
    //
    // See Data Dictionary, Section 2.151, `SimilarEventsNumber`.
    int32 similar_events_number = 10;
  }

  // Represents a time adjustment record.
  //
  // See Data Dictionary, Section 2.232, `VuTimeAdjustmentRecord`.
  //
  // ASN.1 Definition:
  //
  //     VuTimeAdjustmentRecord ::= SEQUENCE {
  //         oldTimeValue TimeReal,
  //         newTimeValue TimeReal,
  //         workshopName Name,
  //         workshopAddress Address,
  //         workshopCardNumber FullCardNumber
  //     }
  message TimeAdjustmentRecord {
    // Time value before adjustment.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp old_time = 1;

    // Time value after adjustment.
    //
    // See Data Dictionary, Section 2.162, `TimeReal`.
    google.protobuf.Timestamp new_time = 2;

    // Name of the workshop that performed the adjustment.
    //
    // See Data Dictionary, Section 2.99, `Name`.
    wayplatform.connect.tachograph.dd.v1.StringValue workshop_name = 3;

    // Address of the workshop.
    //
    // See Data Dictionary, Section 2.2, `Address`.
    wayplatform.connect.tachograph.dd.v1.StringValue workshop_address = 4;

    // The card number of the workshop that performed the adjustment.
    //
    // See Data Dictionary, Section 2.73, `FullCardNumber`.
    dd.v1.FullCardNumber workshop_card_number = 5;
  }

  // All faults stored or on-going in the VU.
  //
  // See Data Dictionary, Section 2.200, `VuFaultData`.
  repeated FaultRecord faults = 1;

  // All events (except over speeding) stored or on-going in the VU.
  //
  // See Data Dictionary, Section 2.197, `VuEventData`.
  repeated EventRecord events = 2;

  // Data related to the last overspeeding control.
  //
  // See Data Dictionary, Section 2.212, `VuOverSpeedingControlData`.
  OverSpeedingControlData overspeeding_control = 3;

  // All overspeeding events stored in the VU.
  //
  // See Data Dictionary, Section 2.214, `VuOverSpeedingEventData`.
  repeated OverSpeedingEventRecord overspeeding_events = 4;

  // All time adjustment events stored in the VU (outside a full calibration).
  //
  // See Data Dictionary, Section 2.229, `VuTimeAdjustmentData`.
  repeated TimeAdjustmentRecord time_adjustments = 5;

  // Signature for Gen1 data (RSA, 128 bytes).
  //
  // See Data Dictionary, Section 2.149, `Signature`.
  bytes signature = 6;

  // The raw, unparsed binary data of the complete Events and Faults transfer value.
  // This field is preserved for data fidelity and lossless round-trips.
  // It includes all data structures and the embedded signature.
  bytes raw_data = 7;
}

