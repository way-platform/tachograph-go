edition = "2023";

package wayplatform.connect.tachograph.vu.v1;

import "google/protobuf/timestamp.proto";
import "wayplatform/connect/tachograph/vu/v1/versioning.proto";

// Represents the consolidated data structure for an Activities transfer.
//
// This message corresponds to the data defined in the regulation document:
// Appendix 7, Section 2.2.6.3: "Positive Response Transfer Data Activities".
message Activities {
  // Discriminator fields indicating the generation and version of the data.
  Generation generation = 1;
  Version version = 2;

  // Represents a card insertion and withdrawal record.
  //
  // Corresponds to the `VuCardIWRecord` data type.
  // See Data Dictionary, Section 2.177.
  message CardIWRecord {
    // See Data Dictionary, Section 2.83 for `HolderName`.
    string card_holder_name = 1;
    // See Data Dictionary, Section 2.73 for `FullCardNumber`.
    string full_card_number = 2;
    // See Data Dictionary, Section 2.24 for `cardExpiryDate`.
    google.protobuf.Timestamp card_expiry_date = 3;
    // See Data Dictionary, Section 2.162 for `TimeReal`.
    google.protobuf.Timestamp card_insertion_time = 4;
    // See Data Dictionary, Section 2.113 for `OdometerShort`.
    int32 odometer_at_insertion_km = 5;
    // See Data Dictionary, Section 2.33 for `CardSlotNumber`.
    int32 card_slot_number = 6;
    // See Data Dictionary, Section 2.162 for `TimeReal`.
    google.protobuf.Timestamp card_withdrawal_time = 7;
    // See Data Dictionary, Section 2.113 for `OdometerShort`.
    int32 odometer_at_withdrawal_km = 8;
    // Part of `PreviousVehicleInfo`. See Data Dictionary, Section 2.118.
    string previous_vrn = 9;
    // Part of `PreviousVehicleInfo`. See Data Dictionary, Section 2.118.
    google.protobuf.Timestamp previous_card_withdrawal_time = 10;
    // See Data Dictionary, Section 2.93 for `ManualInputFlag`.
    int32 manual_input_flag = 11;
  }

  // Represents a change in driver activity, driving status, or card status.
  //
  // Corresponds to the `ActivityChangeInfo` data type.
  // See Data Dictionary, Section 2.1.
  message ActivityChange {
    // Slot of the driver/co-driver.
    int32 slot = 1;
    // Driving status (single or crew).
    int32 driving_status = 2;
    // Card status (inserted or not inserted).
    int32 card_status = 3;
    // Driver's activity (break/rest, availability, work, driving).
    int32 activity = 4;
    // Time of the change in minutes since 00:00.
    int32 time_of_change_minutes = 5;
  }

  // Represents a place record for the beginning or end of a daily work period.
  //
  // Corresponds to the `PlaceRecord` data type.
  // See Data Dictionary, Section 2.117.
  message PlaceRecord {
    // Time of the entry. See DD Section 2.162 for `TimeReal`.
    google.protobuf.Timestamp entry_time = 1;
    // Type of entry (begin or end). See DD Section 2.66 for `EntryTypeDailyWorkPeriod`.
    int32 entry_type = 2;
    // Country code. See DD Section 2.101 for `NationNumeric`.
    int32 country = 3;
    // Region code. See DD Section 2.122 for `RegionNumeric`.
    int32 region = 4;
    // Odometer value at the time of entry. See DD Section 2.113 for `OdometerShort`.
    int32 odometer_km = 5;
  }

  // Represents a GNSS position record.
  //
  // Corresponds to `GNSSPlaceRecord` (DD 2.80) or `GNSSPlaceAuthRecord` (DD 2.79c).
  message GnssRecord {
    // Timestamp of the position fix. See DD Section 2.162 for `TimeReal`.
    google.protobuf.Timestamp timestamp = 1;
    // Accuracy of the GNSS fix. See DD Section 2.77 for `GNSSAccuracy`.
    int32 gnss_accuracy = 2;
    // See Data Dictionary, Section 2.76 for `GeoCoordinates`.
    sint32 longitude = 3;
    // See Data Dictionary, Section 2.76 for `GeoCoordinates`.
    sint32 latitude = 4;
    // For Gen2v2+, indicates the authentication status of the position.
    // See Data Dictionary, Section 2.117a for `PositionAuthenticationStatus`.
    int32 authentication_status = 5;
  }

  // Represents a specific condition record (e.g., Ferry/Train crossing).
  //
  // Corresponds to the `SpecificConditionRecord` data type.
  // See Data Dictionary, Section 2.152.
  message SpecificConditionRecord {
    // Time of the entry. See DD Section 2.162 for `TimeReal`.
    google.protobuf.Timestamp entry_time = 1;
    // Type of specific condition. See DD Section 2.154 for `SpecificConditionType`.
    int32 specific_condition_type = 2;
  }

  // Represents a border crossing record (Gen2v2+).
  //
  // Corresponds to the `VuBorderCrossingRecord` data type.
  // See Data Dictionary, Section 2.203a.
  message BorderCrossingRecord {
    // Card number of the driver. See DD Section 2.73 for `FullCardNumber`.
    string full_card_number = 1;
    // Generation of the driver's card. See DD Section 2.75 for `Generation`.
    Generation card_generation = 2;
    // Country the vehicle is leaving. See DD Section 2.101 for `NationNumeric`.
    int32 country_left = 3;
    // Country the vehicle is entering. See DD Section 2.101 for `NationNumeric`.
    int32 country_entered = 4;
    // Position of the vehicle at the time of crossing.
    GnssRecord place_record = 5;
    // Odometer value at the time of crossing. See DD Section 2.113 for `OdometerShort`.
    int32 odometer_km = 6;
  }

  // Represents a load/unload operation record (Gen2v2+).
  //
  // Corresponds to the `VuLoadUnloadRecord` data type.
  // See Data Dictionary, Section 2.208a.
  message LoadUnloadRecord {
    // See Data Dictionary, Section 2.114a for `OperationType`.
    enum OperationType {
      OPERATION_TYPE_UNSPECIFIED = 0;
      LOAD = 1;
      UNLOAD = 2;
      SIMULTANEOUS = 3;
    }
    // Card number of the driver. See DD Section 2.73 for `FullCardNumber`.
    string full_card_number = 1;
    // Generation of the driver's card. See DD Section 2.75 for `Generation`.
    Generation card_generation = 2;
    // Type of operation (load, unload, or both).
    OperationType operation_type = 3;
    // Position of the vehicle at the time of the operation.
    GnssRecord place_record = 4;
    // Odometer value at the time of the operation. See DD Section 2.113 for `OdometerShort`.
    int32 odometer_km = 5;
  }

  // Date of the downloaded day. See DD Section 2.58 for `DateOfDayDownloaded`.
  google.protobuf.Timestamp date_of_day = 3;
  // Odometer value at midnight. See DD Section 2.114 for `OdometerValueMidnight`.
  int32 odometer_midnight_km = 4;
  // Card insertion and withdrawal data. See DD Section 2.176 for `VuCardIWData`.
  repeated CardIWRecord card_iw_data = 5;
  // Driver activity changes. See DD Section 2.170 for `VuActivityDailyData`.
  repeated ActivityChange activity_changes = 6;
  // Daily work period place entries. See DD Section 2.218 for `VuPlaceDailyWorkPeriodData`.
  repeated PlaceRecord places = 7;
  // Specific conditions data. See DD Section 2.227 for `VuSpecificConditionData`.
  repeated SpecificConditionRecord specific_conditions = 8;

  // Gen2+ Fields: GNSS positions recorded at 3-hour accumulated driving time intervals.
  // See Data Dictionary, Section 2.204 for `VuGNSSADRecordArray`.
  repeated GnssRecord gnss_accumulated_driving = 9;

  // Gen2v2+ Fields: Border crossing records.
  // See Data Dictionary, Section 2.203b for `VuBorderCrossingRecordArray`.
  repeated BorderCrossingRecord border_crossings = 10;
  // Gen2v2+ Fields: Load/unload operation records.
  // See Data Dictionary, Section 2.208b for `VuLoadUnloadRecordArray`.
  repeated LoadUnloadRecord load_unload_operations = 11;

  // Signature for Gen1 data (RSA, 128 bytes).
  // See Data Dictionary, Section 2.149.
  bytes signature_gen1 = 12;
  // Signature for Gen2 data (ECC).
  // See Data Dictionary, Section 2.149.
  bytes signature_gen2 = 13;
}
