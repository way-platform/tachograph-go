edition = "2023";

package wayplatform.connect.tachograph.dd.v1;

import "wayplatform/connect/tachograph/dd/v1/encoding.proto";

// StringValue provides a canonical representation for various string types
// found in the tachograph regulations that have special encoding rules.
//
// Many ASN.1 types in the specification, such as `Name` (DD 2.99) and
// `Address` (DD 2.2), are defined as a `SEQUENCE` containing a numeric
// code page and an octet string. Other types, like `IA5String`, have a
// fixed encoding (ASCII) and may include padding.
//
// This message solves the problem of representing these types faithfully
// by storing both the original raw bytes and the corresponding encoding
// information. This ensures that data can be unmarshalled for use and
// then marshalled back to its exact original binary format without data loss.
message StringValue {
  // The character encoding of the 'raw_data' bytes.
  Encoding encoding = 1;

  // The raw, original byte representation of the string as it appears in
  // the binary format.
  bytes raw_data = 2;

  // A user-friendly, UTF-8 representation of the string, generated by
  // decoding and trimming the 'raw_data' bytes. This field is for display
  // and consumption purposes (e.g., in JSON) and SHOULD be ignored when
  // marshalling.
  string value = 3;

  // The serialized length of the string data (for fixed-length formats).
  //
  // For IA5String types (Encoding_IA5), this field is REQUIRED and specifies
  // the fixed length as defined in the specification (e.g.,
  // VehicleIdentificationNumber is SIZE(17)). When marshalling:
  // - If 'raw_data' is present and matches this length, it is used directly
  // - Otherwise, the 'value' string is padded with spaces to this length
  //
  // For variable-length, code-paged formats (other encodings), this field
  // is typically unset (or 0), as the length is determined by the actual
  // data in 'raw_data'.
  //
  // If both 'raw_data' and 'length' are present, their lengths
  // must agree. Marshalling will fail with an error if they don't match,
  // ensuring data integrity.
  //
  // This field makes StringValue self-describing, eliminating the need to
  // pass length as a separate parameter during marshalling.
  uint32 length = 4;
}
