edition = "2023";

package wayplatform.connect.tachograph.dd.v1;

import "buf/validate/validate.proto";
import "wayplatform/connect/tachograph/dd/v1/encoding.proto";

// Ia5StringValue provides a canonical representation for IA5String types
// found in the tachograph regulations.
//
// IA5 strings have a fixed encoding (ASCII) and may include padding.
//
// This message solves the problem of representing these types faithfully by
// storing both the original raw bytes and the corresponding encoding information.
// This ensures that data can be unmarshalled for use and then marshalled back to
// its exact original binary format without data loss.
message Ia5StringValue {
  // The serialized length of the string data.
  //
  // If both 'raw_data' and 'length' are present, their lengths must agree.
  int32 length = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).int32.gt = 0
  ];

  // A user-friendly, UTF-8 representation of the string, generated by
  // decoding and trimming the 'raw_data' bytes.
  //
  // When raw_data is not present, this field will be used during marshalling
  // and padded with spaces to the length.
  string value = 2 [(buf.validate.field).required = true];

  // The raw, original byte representation of the string as it appears in
  // the binary format.
  //
  // If both 'raw_data' and 'length' are present, their lengths must agree.
  bytes raw_data = 3 [(buf.validate.field).bytes.min_len = 1];

  option (buf.validate.message).cel = {
    id: "raw_data.length"
    message: "if raw_data is present, length must match the size of the raw data"
    expression:
      "!has(this.raw_data) ? true"
      " : this.length == this.raw_data.size()"
  };

  option (buf.validate.message).cel = {
    id: "raw_data.value.equal"
    message: "the value must be no longer than the raw data"
    expression:
      "!has(this.raw_data) ? true"
      " : this.value.size() <= this.raw_data.size()"
  };
}
