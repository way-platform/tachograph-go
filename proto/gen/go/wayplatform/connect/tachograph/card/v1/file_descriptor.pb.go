// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/file_descriptor.proto

package cardv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes a file (MF, DF, or EF) in the card's file system hierarchy.
type FileDescriptor struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type        FileType               `protobuf:"varint,1,opt,name=type,enum=wayplatform.connect.tachograph.card.v1.FileType"`
	xxx_hidden_Ef          ElementaryFileType     `protobuf:"varint,2,opt,name=ef,enum=wayplatform.connect.tachograph.card.v1.ElementaryFileType"`
	xxx_hidden_Df          DedicatedFileType      `protobuf:"varint,3,opt,name=df,enum=wayplatform.connect.tachograph.card.v1.DedicatedFileType"`
	xxx_hidden_Files       *[]*FileDescriptor     `protobuf:"bytes,4,rep,name=files"`
	xxx_hidden_Conditional bool                   `protobuf:"varint,5,opt,name=conditional"`
	xxx_hidden_Sfid        int32                  `protobuf:"varint,6,opt,name=sfid"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FileDescriptor) Reset() {
	*x = FileDescriptor{}
	mi := &file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescriptor) ProtoMessage() {}

func (x *FileDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FileDescriptor) GetType() FileType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Type
		}
	}
	return FileType_FILE_TYPE_UNSPECIFIED
}

func (x *FileDescriptor) GetEf() ElementaryFileType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Ef
		}
	}
	return ElementaryFileType_ELEMENTARY_FILE_UNSPECIFIED
}

func (x *FileDescriptor) GetDf() DedicatedFileType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_Df
		}
	}
	return DedicatedFileType_DEDICATED_FILE_TYPE_UNSPECIFIED
}

func (x *FileDescriptor) GetFiles() []*FileDescriptor {
	if x != nil {
		if x.xxx_hidden_Files != nil {
			return *x.xxx_hidden_Files
		}
	}
	return nil
}

func (x *FileDescriptor) GetConditional() bool {
	if x != nil {
		return x.xxx_hidden_Conditional
	}
	return false
}

func (x *FileDescriptor) GetSfid() int32 {
	if x != nil {
		return x.xxx_hidden_Sfid
	}
	return 0
}

func (x *FileDescriptor) SetType(v FileType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *FileDescriptor) SetEf(v ElementaryFileType) {
	x.xxx_hidden_Ef = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *FileDescriptor) SetDf(v DedicatedFileType) {
	x.xxx_hidden_Df = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *FileDescriptor) SetFiles(v []*FileDescriptor) {
	x.xxx_hidden_Files = &v
}

func (x *FileDescriptor) SetConditional(v bool) {
	x.xxx_hidden_Conditional = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *FileDescriptor) SetSfid(v int32) {
	x.xxx_hidden_Sfid = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *FileDescriptor) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *FileDescriptor) HasEf() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FileDescriptor) HasDf() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FileDescriptor) HasConditional() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FileDescriptor) HasSfid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FileDescriptor) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Type = FileType_FILE_TYPE_UNSPECIFIED
}

func (x *FileDescriptor) ClearEf() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Ef = ElementaryFileType_ELEMENTARY_FILE_UNSPECIFIED
}

func (x *FileDescriptor) ClearDf() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Df = DedicatedFileType_DEDICATED_FILE_TYPE_UNSPECIFIED
}

func (x *FileDescriptor) ClearConditional() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Conditional = false
}

func (x *FileDescriptor) ClearSfid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Sfid = 0
}

type FileDescriptor_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The type of the file.
	Type *FileType
	// The type of the elementary file.
	Ef *ElementaryFileType
	// The type of the dedicated file.
	Df *DedicatedFileType
	// The files contained in the file.
	Files []*FileDescriptor
	// Indicates if the file is conditionally present.
	Conditional *bool
	// Short File Identifier (if applicable).
	Sfid *int32
}

func (b0 FileDescriptor_builder) Build() *FileDescriptor {
	m0 := &FileDescriptor{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Type = *b.Type
	}
	if b.Ef != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Ef = *b.Ef
	}
	if b.Df != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_Df = *b.Df
	}
	x.xxx_hidden_Files = &b.Files
	if b.Conditional != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_Conditional = *b.Conditional
	}
	if b.Sfid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_Sfid = *b.Sfid
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_file_descriptor_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_rawDesc = "" +
	"\n" +
	"<wayplatform/connect/tachograph/card/v1/file_descriptor.proto\x12&wayplatform.connect.tachograph.card.v1\x1a@wayplatform/connect/tachograph/card/v1/dedicated_file_type.proto\x1aAwayplatform/connect/tachograph/card/v1/elementary_file_type.proto\x1a6wayplatform/connect/tachograph/card/v1/file_type.proto\"\xf1\x02\n" +
	"\x0eFileDescriptor\x12D\n" +
	"\x04type\x18\x01 \x01(\x0e20.wayplatform.connect.tachograph.card.v1.FileTypeR\x04type\x12J\n" +
	"\x02ef\x18\x02 \x01(\x0e2:.wayplatform.connect.tachograph.card.v1.ElementaryFileTypeR\x02ef\x12I\n" +
	"\x02df\x18\x03 \x01(\x0e29.wayplatform.connect.tachograph.card.v1.DedicatedFileTypeR\x02df\x12L\n" +
	"\x05files\x18\x04 \x03(\v26.wayplatform.connect.tachograph.card.v1.FileDescriptorR\x05files\x12 \n" +
	"\vconditional\x18\x05 \x01(\bR\vconditional\x12\x12\n" +
	"\x04sfid\x18\x06 \x01(\x05R\x04sfidB\xe0\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x13FileDescriptorProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_goTypes = []any{
	(*FileDescriptor)(nil),  // 0: wayplatform.connect.tachograph.card.v1.FileDescriptor
	(FileType)(0),           // 1: wayplatform.connect.tachograph.card.v1.FileType
	(ElementaryFileType)(0), // 2: wayplatform.connect.tachograph.card.v1.ElementaryFileType
	(DedicatedFileType)(0),  // 3: wayplatform.connect.tachograph.card.v1.DedicatedFileType
}
var file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.FileDescriptor.type:type_name -> wayplatform.connect.tachograph.card.v1.FileType
	2, // 1: wayplatform.connect.tachograph.card.v1.FileDescriptor.ef:type_name -> wayplatform.connect.tachograph.card.v1.ElementaryFileType
	3, // 2: wayplatform.connect.tachograph.card.v1.FileDescriptor.df:type_name -> wayplatform.connect.tachograph.card.v1.DedicatedFileType
	0, // 3: wayplatform.connect.tachograph.card.v1.FileDescriptor.files:type_name -> wayplatform.connect.tachograph.card.v1.FileDescriptor
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_file_descriptor_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_card_v1_dedicated_file_type_proto_init()
	file_wayplatform_connect_tachograph_card_v1_elementary_file_type_proto_init()
	file_wayplatform_connect_tachograph_card_v1_file_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_file_descriptor_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_file_descriptor_proto_depIdxs = nil
}
