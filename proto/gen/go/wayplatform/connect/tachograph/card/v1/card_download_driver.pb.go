// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/card_download_driver.proto

package cardv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_Card_Download file for a driver card.
//
// The file structure is specified in Appendix 2, Section 4.2.1.
//
//	EF Card_Download
//	└─LastCardDownload
//
// The data type `LastCardDownload` is specified in the Data Dictionary, Section 2.89.
//
// ASN.1 Specification:
//
//	LastCardDownload ::= TimeReal
type CardDownloadDriver struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Timestamp   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp"`
	xxx_hidden_Signature   []byte                 `protobuf:"bytes,2,opt,name=signature"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CardDownloadDriver) Reset() {
	*x = CardDownloadDriver{}
	mi := &file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardDownloadDriver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardDownloadDriver) ProtoMessage() {}

func (x *CardDownloadDriver) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CardDownloadDriver) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *CardDownloadDriver) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *CardDownloadDriver) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *CardDownloadDriver) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *CardDownloadDriver) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *CardDownloadDriver) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CardDownloadDriver) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *CardDownloadDriver) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Signature = nil
}

type CardDownloadDriver_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Timestamp *timestamppb.Timestamp
	// Digital signature for the EF_Card_Download file content.
	Signature []byte
}

func (b0 CardDownloadDriver_builder) Build() *CardDownloadDriver {
	m0 := &CardDownloadDriver{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Signature = b.Signature
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_card_download_driver_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_rawDesc = "" +
	"\n" +
	"Awayplatform/connect/tachograph/card/v1/card_download_driver.proto\x12&wayplatform.connect.tachograph.card.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"l\n" +
	"\x12CardDownloadDriver\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignatureB\xe4\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x17CardDownloadDriverProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_goTypes = []any{
	(*CardDownloadDriver)(nil),    // 0: wayplatform.connect.tachograph.card.v1.CardDownloadDriver
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.CardDownloadDriver.timestamp:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_card_download_driver_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_card_download_driver_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_depIdxs = nil
}
