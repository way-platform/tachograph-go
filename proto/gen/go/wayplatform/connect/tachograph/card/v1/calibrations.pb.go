// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/calibrations.proto

package cardv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents calibration data from EF_Calibration.
//
// Corresponds to the `WorkshopCardCalibrationData` data type.
// See Data Dictionary, Section 2.235.
type Calibrations struct {
	state                            protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_CalibrationTotalCount int32                   `protobuf:"varint,1,opt,name=calibration_total_count,json=calibrationTotalCount"`
	xxx_hidden_NewestRecordIndex     int32                   `protobuf:"varint,2,opt,name=newest_record_index,json=newestRecordIndex"`
	xxx_hidden_Records               *[]*Calibrations_Record `protobuf:"bytes,3,rep,name=records"`
	XXX_raceDetectHookData           protoimpl.RaceDetectHookData
	XXX_presence                     [1]uint32
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *Calibrations) Reset() {
	*x = Calibrations{}
	mi := &file_wayplatform_connect_tachograph_card_v1_calibrations_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Calibrations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calibrations) ProtoMessage() {}

func (x *Calibrations) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_calibrations_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Calibrations) GetCalibrationTotalCount() int32 {
	if x != nil {
		return x.xxx_hidden_CalibrationTotalCount
	}
	return 0
}

func (x *Calibrations) GetNewestRecordIndex() int32 {
	if x != nil {
		return x.xxx_hidden_NewestRecordIndex
	}
	return 0
}

func (x *Calibrations) GetRecords() []*Calibrations_Record {
	if x != nil {
		if x.xxx_hidden_Records != nil {
			return *x.xxx_hidden_Records
		}
	}
	return nil
}

func (x *Calibrations) SetCalibrationTotalCount(v int32) {
	x.xxx_hidden_CalibrationTotalCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *Calibrations) SetNewestRecordIndex(v int32) {
	x.xxx_hidden_NewestRecordIndex = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *Calibrations) SetRecords(v []*Calibrations_Record) {
	x.xxx_hidden_Records = &v
}

func (x *Calibrations) HasCalibrationTotalCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Calibrations) HasNewestRecordIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Calibrations) ClearCalibrationTotalCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CalibrationTotalCount = 0
}

func (x *Calibrations) ClearNewestRecordIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_NewestRecordIndex = 0
}

type Calibrations_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Total number of calibrations performed with the card.
	CalibrationTotalCount *int32
	// Index of the last updated record.
	NewestRecordIndex *int32
	// The set of calibration records.
	Records []*Calibrations_Record
}

func (b0 Calibrations_builder) Build() *Calibrations {
	m0 := &Calibrations{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CalibrationTotalCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_CalibrationTotalCount = *b.CalibrationTotalCount
	}
	if b.NewestRecordIndex != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_NewestRecordIndex = *b.NewestRecordIndex
	}
	x.xxx_hidden_Records = &b.Records
	return m0
}

// Represents a single calibration record.
//
// Corresponds to the `WorkshopCardCalibrationRecord` data type.
// See Data Dictionary, Section 2.236.
type Calibrations_Record struct {
	state                                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CalibrationPurpose             int32                  `protobuf:"varint,1,opt,name=calibration_purpose,json=calibrationPurpose"`
	xxx_hidden_VehicleIdentificationNumber    *string                `protobuf:"bytes,2,opt,name=vehicle_identification_number,json=vehicleIdentificationNumber"`
	xxx_hidden_VehicleRegistrationNation      *string                `protobuf:"bytes,3,opt,name=vehicle_registration_nation,json=vehicleRegistrationNation"`
	xxx_hidden_VehicleRegistrationNumber      *string                `protobuf:"bytes,4,opt,name=vehicle_registration_number,json=vehicleRegistrationNumber"`
	xxx_hidden_WVehicleCharacteristicConstant int32                  `protobuf:"varint,5,opt,name=w_vehicle_characteristic_constant,json=wVehicleCharacteristicConstant"`
	xxx_hidden_KConstantOfRecordingEquipment  int32                  `protobuf:"varint,6,opt,name=k_constant_of_recording_equipment,json=kConstantOfRecordingEquipment"`
	xxx_hidden_LTyreCircumferenceMm           int32                  `protobuf:"varint,7,opt,name=l_tyre_circumference_mm,json=lTyreCircumferenceMm"`
	xxx_hidden_TyreSize                       *string                `protobuf:"bytes,8,opt,name=tyre_size,json=tyreSize"`
	xxx_hidden_AuthorisedSpeedKmh             int32                  `protobuf:"varint,9,opt,name=authorised_speed_kmh,json=authorisedSpeedKmh"`
	xxx_hidden_OldOdometerKm                  int32                  `protobuf:"varint,10,opt,name=old_odometer_km,json=oldOdometerKm"`
	xxx_hidden_NewOdometerKm                  int32                  `protobuf:"varint,11,opt,name=new_odometer_km,json=newOdometerKm"`
	xxx_hidden_OldTime                        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=old_time,json=oldTime"`
	xxx_hidden_NewTime                        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=new_time,json=newTime"`
	xxx_hidden_NextCalibrationDate            *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=next_calibration_date,json=nextCalibrationDate"`
	xxx_hidden_VuPartNumber                   *string                `protobuf:"bytes,15,opt,name=vu_part_number,json=vuPartNumber"`
	xxx_hidden_VuSerialNumber                 *string                `protobuf:"bytes,16,opt,name=vu_serial_number,json=vuSerialNumber"`
	xxx_hidden_SensorSerialNumber             *string                `protobuf:"bytes,17,opt,name=sensor_serial_number,json=sensorSerialNumber"`
	XXX_raceDetectHookData                    protoimpl.RaceDetectHookData
	XXX_presence                              [1]uint32
	unknownFields                             protoimpl.UnknownFields
	sizeCache                                 protoimpl.SizeCache
}

func (x *Calibrations_Record) Reset() {
	*x = Calibrations_Record{}
	mi := &file_wayplatform_connect_tachograph_card_v1_calibrations_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Calibrations_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calibrations_Record) ProtoMessage() {}

func (x *Calibrations_Record) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_calibrations_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Calibrations_Record) GetCalibrationPurpose() int32 {
	if x != nil {
		return x.xxx_hidden_CalibrationPurpose
	}
	return 0
}

func (x *Calibrations_Record) GetVehicleIdentificationNumber() string {
	if x != nil {
		if x.xxx_hidden_VehicleIdentificationNumber != nil {
			return *x.xxx_hidden_VehicleIdentificationNumber
		}
		return ""
	}
	return ""
}

func (x *Calibrations_Record) GetVehicleRegistrationNation() string {
	if x != nil {
		if x.xxx_hidden_VehicleRegistrationNation != nil {
			return *x.xxx_hidden_VehicleRegistrationNation
		}
		return ""
	}
	return ""
}

func (x *Calibrations_Record) GetVehicleRegistrationNumber() string {
	if x != nil {
		if x.xxx_hidden_VehicleRegistrationNumber != nil {
			return *x.xxx_hidden_VehicleRegistrationNumber
		}
		return ""
	}
	return ""
}

func (x *Calibrations_Record) GetWVehicleCharacteristicConstant() int32 {
	if x != nil {
		return x.xxx_hidden_WVehicleCharacteristicConstant
	}
	return 0
}

func (x *Calibrations_Record) GetKConstantOfRecordingEquipment() int32 {
	if x != nil {
		return x.xxx_hidden_KConstantOfRecordingEquipment
	}
	return 0
}

func (x *Calibrations_Record) GetLTyreCircumferenceMm() int32 {
	if x != nil {
		return x.xxx_hidden_LTyreCircumferenceMm
	}
	return 0
}

func (x *Calibrations_Record) GetTyreSize() string {
	if x != nil {
		if x.xxx_hidden_TyreSize != nil {
			return *x.xxx_hidden_TyreSize
		}
		return ""
	}
	return ""
}

func (x *Calibrations_Record) GetAuthorisedSpeedKmh() int32 {
	if x != nil {
		return x.xxx_hidden_AuthorisedSpeedKmh
	}
	return 0
}

func (x *Calibrations_Record) GetOldOdometerKm() int32 {
	if x != nil {
		return x.xxx_hidden_OldOdometerKm
	}
	return 0
}

func (x *Calibrations_Record) GetNewOdometerKm() int32 {
	if x != nil {
		return x.xxx_hidden_NewOdometerKm
	}
	return 0
}

func (x *Calibrations_Record) GetOldTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_OldTime
	}
	return nil
}

func (x *Calibrations_Record) GetNewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_NewTime
	}
	return nil
}

func (x *Calibrations_Record) GetNextCalibrationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_NextCalibrationDate
	}
	return nil
}

func (x *Calibrations_Record) GetVuPartNumber() string {
	if x != nil {
		if x.xxx_hidden_VuPartNumber != nil {
			return *x.xxx_hidden_VuPartNumber
		}
		return ""
	}
	return ""
}

func (x *Calibrations_Record) GetVuSerialNumber() string {
	if x != nil {
		if x.xxx_hidden_VuSerialNumber != nil {
			return *x.xxx_hidden_VuSerialNumber
		}
		return ""
	}
	return ""
}

func (x *Calibrations_Record) GetSensorSerialNumber() string {
	if x != nil {
		if x.xxx_hidden_SensorSerialNumber != nil {
			return *x.xxx_hidden_SensorSerialNumber
		}
		return ""
	}
	return ""
}

func (x *Calibrations_Record) SetCalibrationPurpose(v int32) {
	x.xxx_hidden_CalibrationPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 17)
}

func (x *Calibrations_Record) SetVehicleIdentificationNumber(v string) {
	x.xxx_hidden_VehicleIdentificationNumber = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 17)
}

func (x *Calibrations_Record) SetVehicleRegistrationNation(v string) {
	x.xxx_hidden_VehicleRegistrationNation = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 17)
}

func (x *Calibrations_Record) SetVehicleRegistrationNumber(v string) {
	x.xxx_hidden_VehicleRegistrationNumber = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 17)
}

func (x *Calibrations_Record) SetWVehicleCharacteristicConstant(v int32) {
	x.xxx_hidden_WVehicleCharacteristicConstant = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 17)
}

func (x *Calibrations_Record) SetKConstantOfRecordingEquipment(v int32) {
	x.xxx_hidden_KConstantOfRecordingEquipment = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 17)
}

func (x *Calibrations_Record) SetLTyreCircumferenceMm(v int32) {
	x.xxx_hidden_LTyreCircumferenceMm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 17)
}

func (x *Calibrations_Record) SetTyreSize(v string) {
	x.xxx_hidden_TyreSize = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 17)
}

func (x *Calibrations_Record) SetAuthorisedSpeedKmh(v int32) {
	x.xxx_hidden_AuthorisedSpeedKmh = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 17)
}

func (x *Calibrations_Record) SetOldOdometerKm(v int32) {
	x.xxx_hidden_OldOdometerKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 17)
}

func (x *Calibrations_Record) SetNewOdometerKm(v int32) {
	x.xxx_hidden_NewOdometerKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 17)
}

func (x *Calibrations_Record) SetOldTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_OldTime = v
}

func (x *Calibrations_Record) SetNewTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_NewTime = v
}

func (x *Calibrations_Record) SetNextCalibrationDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_NextCalibrationDate = v
}

func (x *Calibrations_Record) SetVuPartNumber(v string) {
	x.xxx_hidden_VuPartNumber = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 17)
}

func (x *Calibrations_Record) SetVuSerialNumber(v string) {
	x.xxx_hidden_VuSerialNumber = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 15, 17)
}

func (x *Calibrations_Record) SetSensorSerialNumber(v string) {
	x.xxx_hidden_SensorSerialNumber = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 16, 17)
}

func (x *Calibrations_Record) HasCalibrationPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Calibrations_Record) HasVehicleIdentificationNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Calibrations_Record) HasVehicleRegistrationNation() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Calibrations_Record) HasVehicleRegistrationNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Calibrations_Record) HasWVehicleCharacteristicConstant() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Calibrations_Record) HasKConstantOfRecordingEquipment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Calibrations_Record) HasLTyreCircumferenceMm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Calibrations_Record) HasTyreSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *Calibrations_Record) HasAuthorisedSpeedKmh() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *Calibrations_Record) HasOldOdometerKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *Calibrations_Record) HasNewOdometerKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *Calibrations_Record) HasOldTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OldTime != nil
}

func (x *Calibrations_Record) HasNewTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NewTime != nil
}

func (x *Calibrations_Record) HasNextCalibrationDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NextCalibrationDate != nil
}

func (x *Calibrations_Record) HasVuPartNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *Calibrations_Record) HasVuSerialNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 15)
}

func (x *Calibrations_Record) HasSensorSerialNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 16)
}

func (x *Calibrations_Record) ClearCalibrationPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CalibrationPurpose = 0
}

func (x *Calibrations_Record) ClearVehicleIdentificationNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_VehicleIdentificationNumber = nil
}

func (x *Calibrations_Record) ClearVehicleRegistrationNation() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VehicleRegistrationNation = nil
}

func (x *Calibrations_Record) ClearVehicleRegistrationNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VehicleRegistrationNumber = nil
}

func (x *Calibrations_Record) ClearWVehicleCharacteristicConstant() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_WVehicleCharacteristicConstant = 0
}

func (x *Calibrations_Record) ClearKConstantOfRecordingEquipment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_KConstantOfRecordingEquipment = 0
}

func (x *Calibrations_Record) ClearLTyreCircumferenceMm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_LTyreCircumferenceMm = 0
}

func (x *Calibrations_Record) ClearTyreSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_TyreSize = nil
}

func (x *Calibrations_Record) ClearAuthorisedSpeedKmh() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_AuthorisedSpeedKmh = 0
}

func (x *Calibrations_Record) ClearOldOdometerKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_OldOdometerKm = 0
}

func (x *Calibrations_Record) ClearNewOdometerKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_NewOdometerKm = 0
}

func (x *Calibrations_Record) ClearOldTime() {
	x.xxx_hidden_OldTime = nil
}

func (x *Calibrations_Record) ClearNewTime() {
	x.xxx_hidden_NewTime = nil
}

func (x *Calibrations_Record) ClearNextCalibrationDate() {
	x.xxx_hidden_NextCalibrationDate = nil
}

func (x *Calibrations_Record) ClearVuPartNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_VuPartNumber = nil
}

func (x *Calibrations_Record) ClearVuSerialNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 15)
	x.xxx_hidden_VuSerialNumber = nil
}

func (x *Calibrations_Record) ClearSensorSerialNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 16)
	x.xxx_hidden_SensorSerialNumber = nil
}

type Calibrations_Record_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// See Data Dictionary, Section 2.8 for `CalibrationPurpose`.
	CalibrationPurpose *int32
	// See Data Dictionary, Section 2.164 for `VehicleIdentificationNumber`.
	VehicleIdentificationNumber *string
	// See Data Dictionary, Section 2.166.
	VehicleRegistrationNation *string
	VehicleRegistrationNumber *string
	// See Data Dictionary, Section 2.239 for `W-VehicleCharacteristicConstant`.
	WVehicleCharacteristicConstant *int32
	// See Data Dictionary, Section 2.85 for `K-ConstantOfRecordingEquipment`.
	KConstantOfRecordingEquipment *int32
	// See Data Dictionary, Section 2.91 for `L-TyreCircumference`.
	LTyreCircumferenceMm *int32
	// See Data Dictionary, Section 2.163 for `TyreSize`.
	TyreSize *string
	// See Data Dictionary, Section 2.156 for `SpeedAuthorised`.
	AuthorisedSpeedKmh *int32
	// Odometer value before calibration. See DD Section 2.113.
	OldOdometerKm *int32
	// Odometer value after calibration. See DD Section 2.113.
	NewOdometerKm *int32
	// Time before calibration. See DD Section 2.162.
	OldTime *timestamppb.Timestamp
	// Time after calibration. See DD Section 2.162.
	NewTime *timestamppb.Timestamp
	// Date of next calibration. See DD Section 2.57.
	NextCalibrationDate *timestamppb.Timestamp
	// See Data Dictionary, Section 2.217 for `VuPartNumber`.
	VuPartNumber *string
	// See Data Dictionary, Section 2.72 for `ExtendedSerialNumber`.
	VuSerialNumber *string
	// See Data Dictionary, Section 2.148 for `SensorSerialNumber`.
	SensorSerialNumber *string
}

func (b0 Calibrations_Record_builder) Build() *Calibrations_Record {
	m0 := &Calibrations_Record{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CalibrationPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 17)
		x.xxx_hidden_CalibrationPurpose = *b.CalibrationPurpose
	}
	if b.VehicleIdentificationNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 17)
		x.xxx_hidden_VehicleIdentificationNumber = b.VehicleIdentificationNumber
	}
	if b.VehicleRegistrationNation != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 17)
		x.xxx_hidden_VehicleRegistrationNation = b.VehicleRegistrationNation
	}
	if b.VehicleRegistrationNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 17)
		x.xxx_hidden_VehicleRegistrationNumber = b.VehicleRegistrationNumber
	}
	if b.WVehicleCharacteristicConstant != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 17)
		x.xxx_hidden_WVehicleCharacteristicConstant = *b.WVehicleCharacteristicConstant
	}
	if b.KConstantOfRecordingEquipment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 17)
		x.xxx_hidden_KConstantOfRecordingEquipment = *b.KConstantOfRecordingEquipment
	}
	if b.LTyreCircumferenceMm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 17)
		x.xxx_hidden_LTyreCircumferenceMm = *b.LTyreCircumferenceMm
	}
	if b.TyreSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 17)
		x.xxx_hidden_TyreSize = b.TyreSize
	}
	if b.AuthorisedSpeedKmh != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 17)
		x.xxx_hidden_AuthorisedSpeedKmh = *b.AuthorisedSpeedKmh
	}
	if b.OldOdometerKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 17)
		x.xxx_hidden_OldOdometerKm = *b.OldOdometerKm
	}
	if b.NewOdometerKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 17)
		x.xxx_hidden_NewOdometerKm = *b.NewOdometerKm
	}
	x.xxx_hidden_OldTime = b.OldTime
	x.xxx_hidden_NewTime = b.NewTime
	x.xxx_hidden_NextCalibrationDate = b.NextCalibrationDate
	if b.VuPartNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 17)
		x.xxx_hidden_VuPartNumber = b.VuPartNumber
	}
	if b.VuSerialNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 15, 17)
		x.xxx_hidden_VuSerialNumber = b.VuSerialNumber
	}
	if b.SensorSerialNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 16, 17)
		x.xxx_hidden_SensorSerialNumber = b.SensorSerialNumber
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_calibrations_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_calibrations_proto_rawDesc = "" +
	"\n" +
	"9wayplatform/connect/tachograph/card/v1/calibrations.proto\x12&wayplatform.connect.tachograph.card.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf8\b\n" +
	"\fCalibrations\x126\n" +
	"\x17calibration_total_count\x18\x01 \x01(\x05R\x15calibrationTotalCount\x12.\n" +
	"\x13newest_record_index\x18\x02 \x01(\x05R\x11newestRecordIndex\x12U\n" +
	"\arecords\x18\x03 \x03(\v2;.wayplatform.connect.tachograph.card.v1.Calibrations.RecordR\arecords\x1a\xa8\a\n" +
	"\x06Record\x12/\n" +
	"\x13calibration_purpose\x18\x01 \x01(\x05R\x12calibrationPurpose\x12B\n" +
	"\x1dvehicle_identification_number\x18\x02 \x01(\tR\x1bvehicleIdentificationNumber\x12>\n" +
	"\x1bvehicle_registration_nation\x18\x03 \x01(\tR\x19vehicleRegistrationNation\x12>\n" +
	"\x1bvehicle_registration_number\x18\x04 \x01(\tR\x19vehicleRegistrationNumber\x12I\n" +
	"!w_vehicle_characteristic_constant\x18\x05 \x01(\x05R\x1ewVehicleCharacteristicConstant\x12H\n" +
	"!k_constant_of_recording_equipment\x18\x06 \x01(\x05R\x1dkConstantOfRecordingEquipment\x125\n" +
	"\x17l_tyre_circumference_mm\x18\a \x01(\x05R\x14lTyreCircumferenceMm\x12\x1b\n" +
	"\ttyre_size\x18\b \x01(\tR\btyreSize\x120\n" +
	"\x14authorised_speed_kmh\x18\t \x01(\x05R\x12authorisedSpeedKmh\x12&\n" +
	"\x0fold_odometer_km\x18\n" +
	" \x01(\x05R\roldOdometerKm\x12&\n" +
	"\x0fnew_odometer_km\x18\v \x01(\x05R\rnewOdometerKm\x125\n" +
	"\bold_time\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\aoldTime\x125\n" +
	"\bnew_time\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\anewTime\x12N\n" +
	"\x15next_calibration_date\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\x13nextCalibrationDate\x12$\n" +
	"\x0evu_part_number\x18\x0f \x01(\tR\fvuPartNumber\x12(\n" +
	"\x10vu_serial_number\x18\x10 \x01(\tR\x0evuSerialNumber\x120\n" +
	"\x14sensor_serial_number\x18\x11 \x01(\tR\x12sensorSerialNumberB\xde\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x11CalibrationsProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_calibrations_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_wayplatform_connect_tachograph_card_v1_calibrations_proto_goTypes = []any{
	(*Calibrations)(nil),          // 0: wayplatform.connect.tachograph.card.v1.Calibrations
	(*Calibrations_Record)(nil),   // 1: wayplatform.connect.tachograph.card.v1.Calibrations.Record
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_wayplatform_connect_tachograph_card_v1_calibrations_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.Calibrations.records:type_name -> wayplatform.connect.tachograph.card.v1.Calibrations.Record
	2, // 1: wayplatform.connect.tachograph.card.v1.Calibrations.Record.old_time:type_name -> google.protobuf.Timestamp
	2, // 2: wayplatform.connect.tachograph.card.v1.Calibrations.Record.new_time:type_name -> google.protobuf.Timestamp
	2, // 3: wayplatform.connect.tachograph.card.v1.Calibrations.Record.next_calibration_date:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_calibrations_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_calibrations_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_calibrations_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_calibrations_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_calibrations_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_calibrations_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_calibrations_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_calibrations_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_calibrations_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_calibrations_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_calibrations_proto_depIdxs = nil
}
