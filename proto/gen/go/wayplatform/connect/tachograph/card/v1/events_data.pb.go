// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/events_data.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_Events_Data file, which contains a log of
// events related to the tachograph system.
//
// The file structure is specified in Appendix 2.
//
// ASN.1 Definition (Gen1):
//
//	CardEventData ::= SEQUENCE (SIZE(6)) OF
//	    cardEventRecords SET SIZE(NoOfEventsPerType) OF CardEventRecord
//
// ASN.1 Definition (Gen2):
//
//	CardEventData ::= SEQUENCE (SIZE(11)) OF
//	    cardEventRecords SET SIZE(NoOfEventsPerType) OF CardEventRecord
//
// The sequence contains 6 (Gen1) or 11 (Gen2) sets of records, ordered by
// Event-FaultType. The protobuf message maps these to the named repeated fields
// below. For Gen1 data, fields 7-11 will be empty. The last set in each
// generation (`security_and_other_events`) contains security breach attempts
// and other remaining events.
type EventsData struct {
	state                                              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_InsertionOfNonValidCardEvents           *[]*EventsData_Record  `protobuf:"bytes,1,rep,name=insertion_of_non_valid_card_events,json=insertionOfNonValidCardEvents"`
	xxx_hidden_CardConflictEvents                      *[]*EventsData_Record  `protobuf:"bytes,2,rep,name=card_conflict_events,json=cardConflictEvents"`
	xxx_hidden_TimeOverlapEvents                       *[]*EventsData_Record  `protobuf:"bytes,3,rep,name=time_overlap_events,json=timeOverlapEvents"`
	xxx_hidden_DrivingWithoutAppropriateCardEvents     *[]*EventsData_Record  `protobuf:"bytes,4,rep,name=driving_without_appropriate_card_events,json=drivingWithoutAppropriateCardEvents"`
	xxx_hidden_CardInsertionWhileDrivingEvents         *[]*EventsData_Record  `protobuf:"bytes,5,rep,name=card_insertion_while_driving_events,json=cardInsertionWhileDrivingEvents"`
	xxx_hidden_LastCardSessionNotCorrectlyClosedEvents *[]*EventsData_Record  `protobuf:"bytes,6,rep,name=last_card_session_not_correctly_closed_events,json=lastCardSessionNotCorrectlyClosedEvents"`
	xxx_hidden_OverSpeedingEvents                      *[]*EventsData_Record  `protobuf:"bytes,7,rep,name=over_speeding_events,json=overSpeedingEvents"`
	xxx_hidden_PowerSupplyInterruptionEvents           *[]*EventsData_Record  `protobuf:"bytes,8,rep,name=power_supply_interruption_events,json=powerSupplyInterruptionEvents"`
	xxx_hidden_MotionDataErrorEvents                   *[]*EventsData_Record  `protobuf:"bytes,9,rep,name=motion_data_error_events,json=motionDataErrorEvents"`
	xxx_hidden_VehicleMotionConflictEvents             *[]*EventsData_Record  `protobuf:"bytes,10,rep,name=vehicle_motion_conflict_events,json=vehicleMotionConflictEvents"`
	xxx_hidden_SecurityAndOtherEvents                  *[]*EventsData_Record  `protobuf:"bytes,11,rep,name=security_and_other_events,json=securityAndOtherEvents"`
	xxx_hidden_Signature                               []byte                 `protobuf:"bytes,12,opt,name=signature"`
	XXX_raceDetectHookData                             protoimpl.RaceDetectHookData
	XXX_presence                                       [1]uint32
	unknownFields                                      protoimpl.UnknownFields
	sizeCache                                          protoimpl.SizeCache
}

func (x *EventsData) Reset() {
	*x = EventsData{}
	mi := &file_wayplatform_connect_tachograph_card_v1_events_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsData) ProtoMessage() {}

func (x *EventsData) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_events_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EventsData) GetInsertionOfNonValidCardEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_InsertionOfNonValidCardEvents != nil {
			return *x.xxx_hidden_InsertionOfNonValidCardEvents
		}
	}
	return nil
}

func (x *EventsData) GetCardConflictEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_CardConflictEvents != nil {
			return *x.xxx_hidden_CardConflictEvents
		}
	}
	return nil
}

func (x *EventsData) GetTimeOverlapEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_TimeOverlapEvents != nil {
			return *x.xxx_hidden_TimeOverlapEvents
		}
	}
	return nil
}

func (x *EventsData) GetDrivingWithoutAppropriateCardEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_DrivingWithoutAppropriateCardEvents != nil {
			return *x.xxx_hidden_DrivingWithoutAppropriateCardEvents
		}
	}
	return nil
}

func (x *EventsData) GetCardInsertionWhileDrivingEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_CardInsertionWhileDrivingEvents != nil {
			return *x.xxx_hidden_CardInsertionWhileDrivingEvents
		}
	}
	return nil
}

func (x *EventsData) GetLastCardSessionNotCorrectlyClosedEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_LastCardSessionNotCorrectlyClosedEvents != nil {
			return *x.xxx_hidden_LastCardSessionNotCorrectlyClosedEvents
		}
	}
	return nil
}

func (x *EventsData) GetOverSpeedingEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_OverSpeedingEvents != nil {
			return *x.xxx_hidden_OverSpeedingEvents
		}
	}
	return nil
}

func (x *EventsData) GetPowerSupplyInterruptionEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_PowerSupplyInterruptionEvents != nil {
			return *x.xxx_hidden_PowerSupplyInterruptionEvents
		}
	}
	return nil
}

func (x *EventsData) GetMotionDataErrorEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_MotionDataErrorEvents != nil {
			return *x.xxx_hidden_MotionDataErrorEvents
		}
	}
	return nil
}

func (x *EventsData) GetVehicleMotionConflictEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_VehicleMotionConflictEvents != nil {
			return *x.xxx_hidden_VehicleMotionConflictEvents
		}
	}
	return nil
}

func (x *EventsData) GetSecurityAndOtherEvents() []*EventsData_Record {
	if x != nil {
		if x.xxx_hidden_SecurityAndOtherEvents != nil {
			return *x.xxx_hidden_SecurityAndOtherEvents
		}
	}
	return nil
}

func (x *EventsData) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *EventsData) SetInsertionOfNonValidCardEvents(v []*EventsData_Record) {
	x.xxx_hidden_InsertionOfNonValidCardEvents = &v
}

func (x *EventsData) SetCardConflictEvents(v []*EventsData_Record) {
	x.xxx_hidden_CardConflictEvents = &v
}

func (x *EventsData) SetTimeOverlapEvents(v []*EventsData_Record) {
	x.xxx_hidden_TimeOverlapEvents = &v
}

func (x *EventsData) SetDrivingWithoutAppropriateCardEvents(v []*EventsData_Record) {
	x.xxx_hidden_DrivingWithoutAppropriateCardEvents = &v
}

func (x *EventsData) SetCardInsertionWhileDrivingEvents(v []*EventsData_Record) {
	x.xxx_hidden_CardInsertionWhileDrivingEvents = &v
}

func (x *EventsData) SetLastCardSessionNotCorrectlyClosedEvents(v []*EventsData_Record) {
	x.xxx_hidden_LastCardSessionNotCorrectlyClosedEvents = &v
}

func (x *EventsData) SetOverSpeedingEvents(v []*EventsData_Record) {
	x.xxx_hidden_OverSpeedingEvents = &v
}

func (x *EventsData) SetPowerSupplyInterruptionEvents(v []*EventsData_Record) {
	x.xxx_hidden_PowerSupplyInterruptionEvents = &v
}

func (x *EventsData) SetMotionDataErrorEvents(v []*EventsData_Record) {
	x.xxx_hidden_MotionDataErrorEvents = &v
}

func (x *EventsData) SetVehicleMotionConflictEvents(v []*EventsData_Record) {
	x.xxx_hidden_VehicleMotionConflictEvents = &v
}

func (x *EventsData) SetSecurityAndOtherEvents(v []*EventsData_Record) {
	x.xxx_hidden_SecurityAndOtherEvents = &v
}

func (x *EventsData) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 12)
}

func (x *EventsData) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *EventsData) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_Signature = nil
}

type EventsData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Set 1: Insertion of a non-valid card.
	InsertionOfNonValidCardEvents []*EventsData_Record
	// Set 2: Card conflict.
	CardConflictEvents []*EventsData_Record
	// Set 3: Time overlap.
	TimeOverlapEvents []*EventsData_Record
	// Set 4: Driving without an appropriate card.
	DrivingWithoutAppropriateCardEvents []*EventsData_Record
	// Set 5: Card insertion while driving.
	CardInsertionWhileDrivingEvents []*EventsData_Record
	// Set 6: Last card session not correctly closed.
	LastCardSessionNotCorrectlyClosedEvents []*EventsData_Record
	// Set 7: Over speeding. (Gen2+)
	OverSpeedingEvents []*EventsData_Record
	// Set 8: Power supply interruption. (Gen2+)
	PowerSupplyInterruptionEvents []*EventsData_Record
	// Set 9: Motion data error. (Gen2+)
	MotionDataErrorEvents []*EventsData_Record
	// Set 10: Vehicle Motion Conflict. (Gen2+)
	VehicleMotionConflictEvents []*EventsData_Record
	// Set 11: Security breach attempts and other events.
	SecurityAndOtherEvents []*EventsData_Record
	// Digital signature for the EF_Events_Data file content.
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	// ASN.1 Definition:
	//
	//	Signature ::= OCTET STRING (SIZE(128 for Gen1))
	Signature []byte
}

func (b0 EventsData_builder) Build() *EventsData {
	m0 := &EventsData{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_InsertionOfNonValidCardEvents = &b.InsertionOfNonValidCardEvents
	x.xxx_hidden_CardConflictEvents = &b.CardConflictEvents
	x.xxx_hidden_TimeOverlapEvents = &b.TimeOverlapEvents
	x.xxx_hidden_DrivingWithoutAppropriateCardEvents = &b.DrivingWithoutAppropriateCardEvents
	x.xxx_hidden_CardInsertionWhileDrivingEvents = &b.CardInsertionWhileDrivingEvents
	x.xxx_hidden_LastCardSessionNotCorrectlyClosedEvents = &b.LastCardSessionNotCorrectlyClosedEvents
	x.xxx_hidden_OverSpeedingEvents = &b.OverSpeedingEvents
	x.xxx_hidden_PowerSupplyInterruptionEvents = &b.PowerSupplyInterruptionEvents
	x.xxx_hidden_MotionDataErrorEvents = &b.MotionDataErrorEvents
	x.xxx_hidden_VehicleMotionConflictEvents = &b.VehicleMotionConflictEvents
	x.xxx_hidden_SecurityAndOtherEvents = &b.SecurityAndOtherEvents
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 12)
		x.xxx_hidden_Signature = b.Signature
	}
	return m0
}

// Represents a single event record.
//
// The data type `CardEventRecord` is specified in the Data Dictionary, Section 2.20.
//
// ASN.1 Definition:
//
//	CardEventRecord ::= SEQUENCE {
//	    eventType EventFaultType,
//	    eventBeginTime TimeReal,
//	    eventEndTime TimeReal,
//	    eventVehicleRegistration VehicleRegistrationIdentification
//	}
type EventsData_Record struct {
	state                               protoimpl.MessageState                `protogen:"opaque.v1"`
	xxx_hidden_Valid                    bool                                  `protobuf:"varint,1,opt,name=valid"`
	xxx_hidden_EventType                v1.EventFaultType                     `protobuf:"varint,2,opt,name=event_type,json=eventType,enum=wayplatform.connect.tachograph.dd.v1.EventFaultType"`
	xxx_hidden_EventBeginTime           *timestamppb.Timestamp                `protobuf:"bytes,4,opt,name=event_begin_time,json=eventBeginTime"`
	xxx_hidden_EventEndTime             *timestamppb.Timestamp                `protobuf:"bytes,5,opt,name=event_end_time,json=eventEndTime"`
	xxx_hidden_EventVehicleRegistration *v1.VehicleRegistrationIdentification `protobuf:"bytes,6,opt,name=event_vehicle_registration,json=eventVehicleRegistration"`
	xxx_hidden_RawData                  []byte                                `protobuf:"bytes,7,opt,name=raw_data,json=rawData"`
	XXX_raceDetectHookData              protoimpl.RaceDetectHookData
	XXX_presence                        [1]uint32
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *EventsData_Record) Reset() {
	*x = EventsData_Record{}
	mi := &file_wayplatform_connect_tachograph_card_v1_events_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsData_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsData_Record) ProtoMessage() {}

func (x *EventsData_Record) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_events_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EventsData_Record) GetValid() bool {
	if x != nil {
		return x.xxx_hidden_Valid
	}
	return false
}

func (x *EventsData_Record) GetEventType() v1.EventFaultType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_EventType
		}
	}
	return v1.EventFaultType(0)
}

func (x *EventsData_Record) GetEventBeginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EventBeginTime
	}
	return nil
}

func (x *EventsData_Record) GetEventEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EventEndTime
	}
	return nil
}

func (x *EventsData_Record) GetEventVehicleRegistration() *v1.VehicleRegistrationIdentification {
	if x != nil {
		return x.xxx_hidden_EventVehicleRegistration
	}
	return nil
}

func (x *EventsData_Record) GetRawData() []byte {
	if x != nil {
		return x.xxx_hidden_RawData
	}
	return nil
}

func (x *EventsData_Record) SetValid(v bool) {
	x.xxx_hidden_Valid = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *EventsData_Record) SetEventType(v v1.EventFaultType) {
	x.xxx_hidden_EventType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *EventsData_Record) SetEventBeginTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EventBeginTime = v
}

func (x *EventsData_Record) SetEventEndTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EventEndTime = v
}

func (x *EventsData_Record) SetEventVehicleRegistration(v *v1.VehicleRegistrationIdentification) {
	x.xxx_hidden_EventVehicleRegistration = v
}

func (x *EventsData_Record) SetRawData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RawData = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *EventsData_Record) HasValid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *EventsData_Record) HasEventType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *EventsData_Record) HasEventBeginTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EventBeginTime != nil
}

func (x *EventsData_Record) HasEventEndTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EventEndTime != nil
}

func (x *EventsData_Record) HasEventVehicleRegistration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EventVehicleRegistration != nil
}

func (x *EventsData_Record) HasRawData() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *EventsData_Record) ClearValid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Valid = false
}

func (x *EventsData_Record) ClearEventType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_EventType = v1.EventFaultType_EVENT_FAULT_TYPE_UNSPECIFIED
}

func (x *EventsData_Record) ClearEventBeginTime() {
	x.xxx_hidden_EventBeginTime = nil
}

func (x *EventsData_Record) ClearEventEndTime() {
	x.xxx_hidden_EventEndTime = nil
}

func (x *EventsData_Record) ClearEventVehicleRegistration() {
	x.xxx_hidden_EventVehicleRegistration = nil
}

func (x *EventsData_Record) ClearRawData() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_RawData = nil
}

type EventsData_Record_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// If true, the fields below are populated with parsed, semantic data.
	// If false, the 'raw_data' field contains the original, unprocessed record
	// bytes.
	Valid *bool
	// The type of the event.
	//
	// See Data Dictionary, Section 2.70, `EventFaultType`.
	// ASN.1 Definition:
	//
	//	EventFaultType ::= OCTET STRING (SIZE (1))
	EventType *v1.EventFaultType
	// The date and time of the beginning of the event.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	EventBeginTime *timestamppb.Timestamp
	// The date and time of the end of the event.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	EventEndTime *timestamppb.Timestamp
	// The vehicle registration of the vehicle in which the event happened.
	//
	// See Data Dictionary, Section 2.166, `VehicleRegistrationIdentification`.
	// ASN.1 Definition:
	//
	//	VehicleRegistrationIdentification ::= SEQUENCE { ... }
	EventVehicleRegistration *v1.VehicleRegistrationIdentification
	// --- Field for a non-valid record (when valid = false) ---
	// Holds the raw 24 bytes of the original record.
	RawData []byte
}

func (b0 EventsData_Record_builder) Build() *EventsData_Record {
	m0 := &EventsData_Record{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Valid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Valid = *b.Valid
	}
	if b.EventType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_EventType = *b.EventType
	}
	x.xxx_hidden_EventBeginTime = b.EventBeginTime
	x.xxx_hidden_EventEndTime = b.EventEndTime
	x.xxx_hidden_EventVehicleRegistration = b.EventVehicleRegistration
	if b.RawData != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_RawData = b.RawData
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_events_data_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_events_data_proto_rawDesc = "" +
	"\n" +
	"8wayplatform/connect/tachograph/card/v1/events_data.proto\x12&wayplatform.connect.tachograph.card.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a;wayplatform/connect/tachograph/dd/v1/event_fault_type.proto\x1aNwayplatform/connect/tachograph/dd/v1/vehicle_registration_identification.proto\"\xbe\x0e\n" +
	"\n" +
	"EventsData\x12\x84\x01\n" +
	"\"insertion_of_non_valid_card_events\x18\x01 \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR\x1dinsertionOfNonValidCardEvents\x12k\n" +
	"\x14card_conflict_events\x18\x02 \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR\x12cardConflictEvents\x12i\n" +
	"\x13time_overlap_events\x18\x03 \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR\x11timeOverlapEvents\x12\x8f\x01\n" +
	"'driving_without_appropriate_card_events\x18\x04 \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR#drivingWithoutAppropriateCardEvents\x12\x87\x01\n" +
	"#card_insertion_while_driving_events\x18\x05 \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR\x1fcardInsertionWhileDrivingEvents\x12\x99\x01\n" +
	"-last_card_session_not_correctly_closed_events\x18\x06 \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR'lastCardSessionNotCorrectlyClosedEvents\x12k\n" +
	"\x14over_speeding_events\x18\a \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR\x12overSpeedingEvents\x12\x82\x01\n" +
	" power_supply_interruption_events\x18\b \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR\x1dpowerSupplyInterruptionEvents\x12r\n" +
	"\x18motion_data_error_events\x18\t \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR\x15motionDataErrorEvents\x12~\n" +
	"\x1evehicle_motion_conflict_events\x18\n" +
	" \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR\x1bvehicleMotionConflictEvents\x12t\n" +
	"\x19security_and_other_events\x18\v \x03(\v29.wayplatform.connect.tachograph.card.v1.EventsData.RecordR\x16securityAndOtherEvents\x12\x1c\n" +
	"\tsignature\x18\f \x01(\fR\tsignature\x1a\x9e\x03\n" +
	"\x06Record\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x12S\n" +
	"\n" +
	"event_type\x18\x02 \x01(\x0e24.wayplatform.connect.tachograph.dd.v1.EventFaultTypeR\teventType\x12D\n" +
	"\x10event_begin_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x0eeventBeginTime\x12@\n" +
	"\x0eevent_end_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\feventEndTime\x12\x85\x01\n" +
	"\x1aevent_vehicle_registration\x18\x06 \x01(\v2G.wayplatform.connect.tachograph.dd.v1.VehicleRegistrationIdentificationR\x18eventVehicleRegistration\x12\x19\n" +
	"\braw_data\x18\a \x01(\fR\arawDataB\xdc\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x0fEventsDataProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_events_data_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_wayplatform_connect_tachograph_card_v1_events_data_proto_goTypes = []any{
	(*EventsData)(nil),                           // 0: wayplatform.connect.tachograph.card.v1.EventsData
	(*EventsData_Record)(nil),                    // 1: wayplatform.connect.tachograph.card.v1.EventsData.Record
	(v1.EventFaultType)(0),                       // 2: wayplatform.connect.tachograph.dd.v1.EventFaultType
	(*timestamppb.Timestamp)(nil),                // 3: google.protobuf.Timestamp
	(*v1.VehicleRegistrationIdentification)(nil), // 4: wayplatform.connect.tachograph.dd.v1.VehicleRegistrationIdentification
}
var file_wayplatform_connect_tachograph_card_v1_events_data_proto_depIdxs = []int32{
	1,  // 0: wayplatform.connect.tachograph.card.v1.EventsData.insertion_of_non_valid_card_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 1: wayplatform.connect.tachograph.card.v1.EventsData.card_conflict_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 2: wayplatform.connect.tachograph.card.v1.EventsData.time_overlap_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 3: wayplatform.connect.tachograph.card.v1.EventsData.driving_without_appropriate_card_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 4: wayplatform.connect.tachograph.card.v1.EventsData.card_insertion_while_driving_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 5: wayplatform.connect.tachograph.card.v1.EventsData.last_card_session_not_correctly_closed_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 6: wayplatform.connect.tachograph.card.v1.EventsData.over_speeding_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 7: wayplatform.connect.tachograph.card.v1.EventsData.power_supply_interruption_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 8: wayplatform.connect.tachograph.card.v1.EventsData.motion_data_error_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 9: wayplatform.connect.tachograph.card.v1.EventsData.vehicle_motion_conflict_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	1,  // 10: wayplatform.connect.tachograph.card.v1.EventsData.security_and_other_events:type_name -> wayplatform.connect.tachograph.card.v1.EventsData.Record
	2,  // 11: wayplatform.connect.tachograph.card.v1.EventsData.Record.event_type:type_name -> wayplatform.connect.tachograph.dd.v1.EventFaultType
	3,  // 12: wayplatform.connect.tachograph.card.v1.EventsData.Record.event_begin_time:type_name -> google.protobuf.Timestamp
	3,  // 13: wayplatform.connect.tachograph.card.v1.EventsData.Record.event_end_time:type_name -> google.protobuf.Timestamp
	4,  // 14: wayplatform.connect.tachograph.card.v1.EventsData.Record.event_vehicle_registration:type_name -> wayplatform.connect.tachograph.dd.v1.VehicleRegistrationIdentification
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_events_data_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_events_data_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_events_data_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_events_data_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_events_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_events_data_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_events_data_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_events_data_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_events_data_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_events_data_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_events_data_proto_depIdxs = nil
}
