// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/gnss_places.proto

package cardv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_GNSS_Places file, containing GNSS position records for
// accumulated driving periods.
//
// The file structure is specified in Appendix 2, Section 4.2.2.
//
//	EF GNSS_Places
//	└─GNSSAccumulatedDriving
//
// The data type `GNSSAccumulatedDriving` is specified in the Data Dictionary, Section 2.78.
//
// ASN.1 Definition:
//
//	GNSSAccumulatedDriving ::= SEQUENCE {
//	    gnssADPointerNewestRecord INTEGER(0..NoOfGNSSADRecords-1),
//	    gnssAccumulatedDrivingRecords SET SIZE(NoOfGNSSADRecords) OF GNSSAccumulatedDrivingRecord
//	}
type GnssPlaces struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NewestRecordIndex int32                  `protobuf:"varint,1,opt,name=newest_record_index,json=newestRecordIndex"`
	xxx_hidden_Records           *[]*GnssPlaces_Record  `protobuf:"bytes,2,rep,name=records"`
	xxx_hidden_Signature         []byte                 `protobuf:"bytes,3,opt,name=signature"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GnssPlaces) Reset() {
	*x = GnssPlaces{}
	mi := &file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GnssPlaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssPlaces) ProtoMessage() {}

func (x *GnssPlaces) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GnssPlaces) GetNewestRecordIndex() int32 {
	if x != nil {
		return x.xxx_hidden_NewestRecordIndex
	}
	return 0
}

func (x *GnssPlaces) GetRecords() []*GnssPlaces_Record {
	if x != nil {
		if x.xxx_hidden_Records != nil {
			return *x.xxx_hidden_Records
		}
	}
	return nil
}

func (x *GnssPlaces) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *GnssPlaces) SetNewestRecordIndex(v int32) {
	x.xxx_hidden_NewestRecordIndex = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *GnssPlaces) SetRecords(v []*GnssPlaces_Record) {
	x.xxx_hidden_Records = &v
}

func (x *GnssPlaces) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *GnssPlaces) HasNewestRecordIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GnssPlaces) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *GnssPlaces) ClearNewestRecordIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_NewestRecordIndex = 0
}

func (x *GnssPlaces) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Signature = nil
}

type GnssPlaces_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Index of the last updated record.
	// Corresponds to `gnssADPointerNewestRecord`.
	//
	// See Data Dictionary, Section 2.78.
	// ASN.1 Definition:
	//
	//	INTEGER(0..NoOfGNSSADRecords-1)
	NewestRecordIndex *int32
	// The set of GNSS accumulated driving records.
	// Corresponds to `gnssAccumulatedDrivingRecords`.
	Records []*GnssPlaces_Record
	// Digital signature for the EF_GNSS_Places file content.
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	// ASN.1 Definition:
	//
	//	Signature ::= OCTET STRING (SIZE(128 for Gen1))
	Signature []byte
}

func (b0 GnssPlaces_builder) Build() *GnssPlaces {
	m0 := &GnssPlaces{}
	b, x := &b0, m0
	_, _ = b, x
	if b.NewestRecordIndex != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_NewestRecordIndex = *b.NewestRecordIndex
	}
	x.xxx_hidden_Records = &b.Records
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Signature = b.Signature
	}
	return m0
}

// Represents a single record of accumulated driving and GNSS position.
//
// The data type `GNSSAccumulatedDrivingRecord` is specified in the Data Dictionary, Section 2.79.
//
// ASN.1 Definition:
//
//	GNSSAccumulatedDrivingRecord ::= SEQUENCE {
//	    timeStamp TimeReal,
//	    gnssPlaceRecord GNSSPlaceRecord,
//	    vehicleOdometerValue OdometerShort
//	}
type GnssPlaces_Record struct {
	state                        protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Timestamp         *timestamppb.Timestamp       `protobuf:"bytes,1,opt,name=timestamp"`
	xxx_hidden_GnssPlace         *GnssPlaces_Record_GnssPlace `protobuf:"bytes,2,opt,name=gnss_place,json=gnssPlace"`
	xxx_hidden_VehicleOdometerKm int32                        `protobuf:"varint,3,opt,name=vehicle_odometer_km,json=vehicleOdometerKm"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GnssPlaces_Record) Reset() {
	*x = GnssPlaces_Record{}
	mi := &file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GnssPlaces_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssPlaces_Record) ProtoMessage() {}

func (x *GnssPlaces_Record) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GnssPlaces_Record) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *GnssPlaces_Record) GetGnssPlace() *GnssPlaces_Record_GnssPlace {
	if x != nil {
		return x.xxx_hidden_GnssPlace
	}
	return nil
}

func (x *GnssPlaces_Record) GetVehicleOdometerKm() int32 {
	if x != nil {
		return x.xxx_hidden_VehicleOdometerKm
	}
	return 0
}

func (x *GnssPlaces_Record) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *GnssPlaces_Record) SetGnssPlace(v *GnssPlaces_Record_GnssPlace) {
	x.xxx_hidden_GnssPlace = v
}

func (x *GnssPlaces_Record) SetVehicleOdometerKm(v int32) {
	x.xxx_hidden_VehicleOdometerKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *GnssPlaces_Record) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *GnssPlaces_Record) HasGnssPlace() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GnssPlace != nil
}

func (x *GnssPlaces_Record) HasVehicleOdometerKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *GnssPlaces_Record) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *GnssPlaces_Record) ClearGnssPlace() {
	x.xxx_hidden_GnssPlace = nil
}

func (x *GnssPlaces_Record) ClearVehicleOdometerKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VehicleOdometerKm = 0
}

type GnssPlaces_Record_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Timestamp from the outer `GNSSAccumulatedDrivingRecord` structure.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	Timestamp *timestamppb.Timestamp
	// The nested GNSS place record.
	//
	// See Data Dictionary, Section 2.80, `GNSSPlaceRecord`.
	GnssPlace *GnssPlaces_Record_GnssPlace
	// Odometer at the time of the record in kilometers.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	// ASN.1 Definition:
	//
	//	OdometerShort ::= INTEGER(0..999999)
	VehicleOdometerKm *int32
}

func (b0 GnssPlaces_Record_builder) Build() *GnssPlaces_Record {
	m0 := &GnssPlaces_Record{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	x.xxx_hidden_GnssPlace = b.GnssPlace
	if b.VehicleOdometerKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_VehicleOdometerKm = *b.VehicleOdometerKm
	}
	return m0
}

// Represents the nested GNSS position record.
//
// The data type `GNSSPlaceRecord` is specified in the Data Dictionary, Section 2.80.
//
// ASN.1 Definition:
//
//	GNSSPlaceRecord ::= SEQUENCE {
//	    timeStamp TimeReal,
//	    gnssAccuracy GNSSAccuracy,
//	    geoCoordinates GeoCoordinates
//	}
type GnssPlaces_Record_GnssPlace struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Timestamp    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp"`
	xxx_hidden_GnssAccuracy int32                  `protobuf:"varint,2,opt,name=gnss_accuracy,json=gnssAccuracy"`
	xxx_hidden_Longitude    int32                  `protobuf:"zigzag32,3,opt,name=longitude"`
	xxx_hidden_Latitude     int32                  `protobuf:"zigzag32,4,opt,name=latitude"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GnssPlaces_Record_GnssPlace) Reset() {
	*x = GnssPlaces_Record_GnssPlace{}
	mi := &file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GnssPlaces_Record_GnssPlace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssPlaces_Record_GnssPlace) ProtoMessage() {}

func (x *GnssPlaces_Record_GnssPlace) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GnssPlaces_Record_GnssPlace) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *GnssPlaces_Record_GnssPlace) GetGnssAccuracy() int32 {
	if x != nil {
		return x.xxx_hidden_GnssAccuracy
	}
	return 0
}

func (x *GnssPlaces_Record_GnssPlace) GetLongitude() int32 {
	if x != nil {
		return x.xxx_hidden_Longitude
	}
	return 0
}

func (x *GnssPlaces_Record_GnssPlace) GetLatitude() int32 {
	if x != nil {
		return x.xxx_hidden_Latitude
	}
	return 0
}

func (x *GnssPlaces_Record_GnssPlace) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *GnssPlaces_Record_GnssPlace) SetGnssAccuracy(v int32) {
	x.xxx_hidden_GnssAccuracy = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *GnssPlaces_Record_GnssPlace) SetLongitude(v int32) {
	x.xxx_hidden_Longitude = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *GnssPlaces_Record_GnssPlace) SetLatitude(v int32) {
	x.xxx_hidden_Latitude = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *GnssPlaces_Record_GnssPlace) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *GnssPlaces_Record_GnssPlace) HasGnssAccuracy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GnssPlaces_Record_GnssPlace) HasLongitude() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *GnssPlaces_Record_GnssPlace) HasLatitude() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *GnssPlaces_Record_GnssPlace) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *GnssPlaces_Record_GnssPlace) ClearGnssAccuracy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_GnssAccuracy = 0
}

func (x *GnssPlaces_Record_GnssPlace) ClearLongitude() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Longitude = 0
}

func (x *GnssPlaces_Record_GnssPlace) ClearLatitude() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Latitude = 0
}

type GnssPlaces_Record_GnssPlace_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Timestamp from the inner `GNSSPlaceRecord` structure.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	Timestamp *timestamppb.Timestamp
	// Accuracy of the GNSS fix.
	//
	// See Data Dictionary, Section 2.77, `GNSSAccuracy`.
	// ASN.1 Definition:
	//
	//	GNSSAccuracy ::= OCTET STRING(SIZE(1))
	GnssAccuracy *int32
	// Geographic coordinates of the position.
	//
	// See Data Dictionary, Section 2.76, `GeoCoordinates`.
	// ASN.1 Definition:
	//
	//	GeoCoordinates ::= SEQUENCE {
	//	    latitude INTEGER(-90*3600*1000..90*3600*1000),
	//	    longitude INTEGER(-180*3600*1000+1..180*3600*1000)
	//	}
	Longitude *int32
	Latitude  *int32
}

func (b0 GnssPlaces_Record_GnssPlace_builder) Build() *GnssPlaces_Record_GnssPlace {
	m0 := &GnssPlaces_Record_GnssPlace{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.GnssAccuracy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_GnssAccuracy = *b.GnssAccuracy
	}
	if b.Longitude != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Longitude = *b.Longitude
	}
	if b.Latitude != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Latitude = *b.Latitude
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_gnss_places_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_rawDesc = "" +
	"\n" +
	"8wayplatform/connect/tachograph/card/v1/gnss_places.proto\x12&wayplatform.connect.tachograph.card.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xaf\x04\n" +
	"\n" +
	"GnssPlaces\x12.\n" +
	"\x13newest_record_index\x18\x01 \x01(\x05R\x11newestRecordIndex\x12S\n" +
	"\arecords\x18\x02 \x03(\v29.wayplatform.connect.tachograph.card.v1.GnssPlaces.RecordR\arecords\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\x1a\xfd\x02\n" +
	"\x06Record\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12b\n" +
	"\n" +
	"gnss_place\x18\x02 \x01(\v2C.wayplatform.connect.tachograph.card.v1.GnssPlaces.Record.GnssPlaceR\tgnssPlace\x12.\n" +
	"\x13vehicle_odometer_km\x18\x03 \x01(\x05R\x11vehicleOdometerKm\x1a\xa4\x01\n" +
	"\tGnssPlace\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12#\n" +
	"\rgnss_accuracy\x18\x02 \x01(\x05R\fgnssAccuracy\x12\x1c\n" +
	"\tlongitude\x18\x03 \x01(\x11R\tlongitude\x12\x1a\n" +
	"\blatitude\x18\x04 \x01(\x11R\blatitudeB\xdc\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x0fGnssPlacesProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_goTypes = []any{
	(*GnssPlaces)(nil),                  // 0: wayplatform.connect.tachograph.card.v1.GnssPlaces
	(*GnssPlaces_Record)(nil),           // 1: wayplatform.connect.tachograph.card.v1.GnssPlaces.Record
	(*GnssPlaces_Record_GnssPlace)(nil), // 2: wayplatform.connect.tachograph.card.v1.GnssPlaces.Record.GnssPlace
	(*timestamppb.Timestamp)(nil),       // 3: google.protobuf.Timestamp
}
var file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.GnssPlaces.records:type_name -> wayplatform.connect.tachograph.card.v1.GnssPlaces.Record
	3, // 1: wayplatform.connect.tachograph.card.v1.GnssPlaces.Record.timestamp:type_name -> google.protobuf.Timestamp
	2, // 2: wayplatform.connect.tachograph.card.v1.GnssPlaces.Record.gnss_place:type_name -> wayplatform.connect.tachograph.card.v1.GnssPlaces.Record.GnssPlace
	3, // 3: wayplatform.connect.tachograph.card.v1.GnssPlaces.Record.GnssPlace.timestamp:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_gnss_places_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_gnss_places_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_depIdxs = nil
}
