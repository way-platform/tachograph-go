// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/identification.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_Identification file, which contains identification
// data for the card and its holder.
//
// The file structure is specified in Appendix 2, Sections 4.2.1, 4.3.1, 4.4.1, and 4.5.1.
//
//	EF Identification
//	├─CardIdentification
//	└─[Driver|Workshop|Control|Company]CardHolderIdentification
//
// The top-level structure varies by card type, but is a sequence of the two main data types.
type Identification struct {
	state                         protoimpl.MessageState             `protogen:"opaque.v1"`
	xxx_hidden_Card               *Identification_Card               `protobuf:"bytes,1,opt,name=card"`
	xxx_hidden_CardType           CardType                           `protobuf:"varint,2,opt,name=card_type,json=cardType,enum=wayplatform.connect.tachograph.card.v1.CardType"`
	xxx_hidden_DriverCardHolder   *Identification_DriverCardHolder   `protobuf:"bytes,3,opt,name=driver_card_holder,json=driverCardHolder"`
	xxx_hidden_WorkshopCardHolder *Identification_WorkshopCardHolder `protobuf:"bytes,4,opt,name=workshop_card_holder,json=workshopCardHolder"`
	xxx_hidden_ControlCardHolder  *Identification_ControlCardHolder  `protobuf:"bytes,5,opt,name=control_card_holder,json=controlCardHolder"`
	xxx_hidden_CompanyCardHolder  *Identification_CompanyCardHolder  `protobuf:"bytes,6,opt,name=company_card_holder,json=companyCardHolder"`
	xxx_hidden_Signature          []byte                             `protobuf:"bytes,7,opt,name=signature"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *Identification) Reset() {
	*x = Identification{}
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identification) ProtoMessage() {}

func (x *Identification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Identification) GetCard() *Identification_Card {
	if x != nil {
		return x.xxx_hidden_Card
	}
	return nil
}

func (x *Identification) GetCardType() CardType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_CardType
		}
	}
	return CardType_CARD_TYPE_UNSPECIFIED
}

func (x *Identification) GetDriverCardHolder() *Identification_DriverCardHolder {
	if x != nil {
		return x.xxx_hidden_DriverCardHolder
	}
	return nil
}

func (x *Identification) GetWorkshopCardHolder() *Identification_WorkshopCardHolder {
	if x != nil {
		return x.xxx_hidden_WorkshopCardHolder
	}
	return nil
}

func (x *Identification) GetControlCardHolder() *Identification_ControlCardHolder {
	if x != nil {
		return x.xxx_hidden_ControlCardHolder
	}
	return nil
}

func (x *Identification) GetCompanyCardHolder() *Identification_CompanyCardHolder {
	if x != nil {
		return x.xxx_hidden_CompanyCardHolder
	}
	return nil
}

func (x *Identification) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *Identification) SetCard(v *Identification_Card) {
	x.xxx_hidden_Card = v
}

func (x *Identification) SetCardType(v CardType) {
	x.xxx_hidden_CardType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *Identification) SetDriverCardHolder(v *Identification_DriverCardHolder) {
	x.xxx_hidden_DriverCardHolder = v
}

func (x *Identification) SetWorkshopCardHolder(v *Identification_WorkshopCardHolder) {
	x.xxx_hidden_WorkshopCardHolder = v
}

func (x *Identification) SetControlCardHolder(v *Identification_ControlCardHolder) {
	x.xxx_hidden_ControlCardHolder = v
}

func (x *Identification) SetCompanyCardHolder(v *Identification_CompanyCardHolder) {
	x.xxx_hidden_CompanyCardHolder = v
}

func (x *Identification) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *Identification) HasCard() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Card != nil
}

func (x *Identification) HasCardType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Identification) HasDriverCardHolder() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DriverCardHolder != nil
}

func (x *Identification) HasWorkshopCardHolder() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopCardHolder != nil
}

func (x *Identification) HasControlCardHolder() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ControlCardHolder != nil
}

func (x *Identification) HasCompanyCardHolder() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CompanyCardHolder != nil
}

func (x *Identification) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Identification) ClearCard() {
	x.xxx_hidden_Card = nil
}

func (x *Identification) ClearCardType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardType = CardType_CARD_TYPE_UNSPECIFIED
}

func (x *Identification) ClearDriverCardHolder() {
	x.xxx_hidden_DriverCardHolder = nil
}

func (x *Identification) ClearWorkshopCardHolder() {
	x.xxx_hidden_WorkshopCardHolder = nil
}

func (x *Identification) ClearControlCardHolder() {
	x.xxx_hidden_ControlCardHolder = nil
}

func (x *Identification) ClearCompanyCardHolder() {
	x.xxx_hidden_CompanyCardHolder = nil
}

func (x *Identification) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Signature = nil
}

type Identification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The common card identification part.
	Card *Identification_Card
	// The type of card this identification belongs to. This determines which
	// of the following holder identification fields is populated.
	CardType *CardType
	// Holder identification for a driver card.
	// Populated only if card_type is DRIVER_CARD.
	DriverCardHolder *Identification_DriverCardHolder
	// Holder identification for a workshop card.
	// Populated only if card_type is WORKSHOP_CARD.
	WorkshopCardHolder *Identification_WorkshopCardHolder
	// Holder identification for a control card.
	// Populated only if card_type is CONTROL_CARD.
	ControlCardHolder *Identification_ControlCardHolder
	// Holder identification for a company card.
	// Populated only if card_type is COMPANY_CARD.
	CompanyCardHolder *Identification_CompanyCardHolder
	// Digital signature for the EF_Identification file content.
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	// ASN.1 Specification: Signature ::= OCTET STRING (SIZE(128 for Gen1))
	Signature []byte
}

func (b0 Identification_builder) Build() *Identification {
	m0 := &Identification{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Card = b.Card
	if b.CardType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_CardType = *b.CardType
	}
	x.xxx_hidden_DriverCardHolder = b.DriverCardHolder
	x.xxx_hidden_WorkshopCardHolder = b.WorkshopCardHolder
	x.xxx_hidden_ControlCardHolder = b.ControlCardHolder
	x.xxx_hidden_CompanyCardHolder = b.CompanyCardHolder
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_Signature = b.Signature
	}
	return m0
}

// Represents the `driverIdentification` sequence from the `CardNumber` CHOICE.
// This is nested here to provide local context, per our design discussion.
//
// ASN.1 Definition:
//
//	driverIdentification SEQUENCE {
//	    driverIdentification   IA5String(SIZE(14)),
//	    cardConsecutiveIndex   IA5String(SIZE(1)),
//	    cardReplacementIndex   IA5String(SIZE(1)),
//	    cardRenewalIndex       IA5String(SIZE(1))
//	}
type Identification_DriverIdentification struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Identification   *v1.StringValue        `protobuf:"bytes,1,opt,name=identification"`
	xxx_hidden_ConsecutiveIndex *v1.StringValue        `protobuf:"bytes,2,opt,name=consecutive_index,json=consecutiveIndex"`
	xxx_hidden_ReplacementIndex *v1.StringValue        `protobuf:"bytes,3,opt,name=replacement_index,json=replacementIndex"`
	xxx_hidden_RenewalIndex     *v1.StringValue        `protobuf:"bytes,4,opt,name=renewal_index,json=renewalIndex"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Identification_DriverIdentification) Reset() {
	*x = Identification_DriverIdentification{}
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identification_DriverIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identification_DriverIdentification) ProtoMessage() {}

func (x *Identification_DriverIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Identification_DriverIdentification) GetIdentification() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_Identification
	}
	return nil
}

func (x *Identification_DriverIdentification) GetConsecutiveIndex() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_ConsecutiveIndex
	}
	return nil
}

func (x *Identification_DriverIdentification) GetReplacementIndex() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_ReplacementIndex
	}
	return nil
}

func (x *Identification_DriverIdentification) GetRenewalIndex() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_RenewalIndex
	}
	return nil
}

func (x *Identification_DriverIdentification) SetIdentification(v *v1.StringValue) {
	x.xxx_hidden_Identification = v
}

func (x *Identification_DriverIdentification) SetConsecutiveIndex(v *v1.StringValue) {
	x.xxx_hidden_ConsecutiveIndex = v
}

func (x *Identification_DriverIdentification) SetReplacementIndex(v *v1.StringValue) {
	x.xxx_hidden_ReplacementIndex = v
}

func (x *Identification_DriverIdentification) SetRenewalIndex(v *v1.StringValue) {
	x.xxx_hidden_RenewalIndex = v
}

func (x *Identification_DriverIdentification) HasIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Identification != nil
}

func (x *Identification_DriverIdentification) HasConsecutiveIndex() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ConsecutiveIndex != nil
}

func (x *Identification_DriverIdentification) HasReplacementIndex() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ReplacementIndex != nil
}

func (x *Identification_DriverIdentification) HasRenewalIndex() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RenewalIndex != nil
}

func (x *Identification_DriverIdentification) ClearIdentification() {
	x.xxx_hidden_Identification = nil
}

func (x *Identification_DriverIdentification) ClearConsecutiveIndex() {
	x.xxx_hidden_ConsecutiveIndex = nil
}

func (x *Identification_DriverIdentification) ClearReplacementIndex() {
	x.xxx_hidden_ReplacementIndex = nil
}

func (x *Identification_DriverIdentification) ClearRenewalIndex() {
	x.xxx_hidden_RenewalIndex = nil
}

type Identification_DriverIdentification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The core driver identification number string.
	Identification *v1.StringValue
	// A single-digit index for the card.
	ConsecutiveIndex *v1.StringValue
	// A single-digit index for card replacement.
	ReplacementIndex *v1.StringValue
	// A single-digit index for card renewal.
	RenewalIndex *v1.StringValue
}

func (b0 Identification_DriverIdentification_builder) Build() *Identification_DriverIdentification {
	m0 := &Identification_DriverIdentification{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Identification = b.Identification
	x.xxx_hidden_ConsecutiveIndex = b.ConsecutiveIndex
	x.xxx_hidden_ReplacementIndex = b.ReplacementIndex
	x.xxx_hidden_RenewalIndex = b.RenewalIndex
	return m0
}

// Represents the `ownerIdentification` sequence from the `CardNumber` CHOICE.
// This is nested here to provide local context, per our design discussion.
//
// ASN.1 Definition:
//
//	ownerIdentification SEQUENCE {
//	    ownerIdentification    IA5String(SIZE(13))
//	}
type Identification_OwnerIdentification struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Identification *v1.StringValue        `protobuf:"bytes,1,opt,name=identification"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Identification_OwnerIdentification) Reset() {
	*x = Identification_OwnerIdentification{}
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identification_OwnerIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identification_OwnerIdentification) ProtoMessage() {}

func (x *Identification_OwnerIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Identification_OwnerIdentification) GetIdentification() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_Identification
	}
	return nil
}

func (x *Identification_OwnerIdentification) SetIdentification(v *v1.StringValue) {
	x.xxx_hidden_Identification = v
}

func (x *Identification_OwnerIdentification) HasIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Identification != nil
}

func (x *Identification_OwnerIdentification) ClearIdentification() {
	x.xxx_hidden_Identification = nil
}

type Identification_OwnerIdentification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The unique identification for the owner.
	Identification *v1.StringValue
}

func (b0 Identification_OwnerIdentification_builder) Build() *Identification_OwnerIdentification {
	m0 := &Identification_OwnerIdentification{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Identification = b.Identification
	return m0
}

// Represents card identification data, common to all card types.
//
// The data type `CardIdentification` is specified in the Data Dictionary, Section 2.24.
//
// ASN.1 Specification:
//
//	CardIdentification ::= SEQUENCE {
//	    cardIssuingMemberState NationNumeric,
//	    cardNumber CardNumber,
//	    cardIssuingAuthorityName Name,
//	    cardIssueDate TimeReal,
//	    cardValidityBegin TimeReal,
//	    cardExpiryDate TimeReal
//	}
type Identification_Card struct {
	state                               protoimpl.MessageState               `protogen:"opaque.v1"`
	xxx_hidden_CardIssuingMemberState   v1.NationNumeric                     `protobuf:"varint,1,opt,name=card_issuing_member_state,json=cardIssuingMemberState,enum=wayplatform.connect.tachograph.datadictionary.v1.NationNumeric"`
	xxx_hidden_DriverIdentification     *Identification_DriverIdentification `protobuf:"bytes,2,opt,name=driver_identification,json=driverIdentification"`
	xxx_hidden_OwnerIdentification      *Identification_OwnerIdentification  `protobuf:"bytes,7,opt,name=owner_identification,json=ownerIdentification"`
	xxx_hidden_CardIssuingAuthorityName *v1.StringValue                      `protobuf:"bytes,3,opt,name=card_issuing_authority_name,json=cardIssuingAuthorityName"`
	xxx_hidden_CardIssueDate            *timestamppb.Timestamp               `protobuf:"bytes,4,opt,name=card_issue_date,json=cardIssueDate"`
	xxx_hidden_CardValidityBegin        *timestamppb.Timestamp               `protobuf:"bytes,5,opt,name=card_validity_begin,json=cardValidityBegin"`
	xxx_hidden_CardExpiryDate           *timestamppb.Timestamp               `protobuf:"bytes,6,opt,name=card_expiry_date,json=cardExpiryDate"`
	XXX_raceDetectHookData              protoimpl.RaceDetectHookData
	XXX_presence                        [1]uint32
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *Identification_Card) Reset() {
	*x = Identification_Card{}
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identification_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identification_Card) ProtoMessage() {}

func (x *Identification_Card) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Identification_Card) GetCardIssuingMemberState() v1.NationNumeric {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_CardIssuingMemberState
		}
	}
	return v1.NationNumeric(0)
}

func (x *Identification_Card) GetDriverIdentification() *Identification_DriverIdentification {
	if x != nil {
		return x.xxx_hidden_DriverIdentification
	}
	return nil
}

func (x *Identification_Card) GetOwnerIdentification() *Identification_OwnerIdentification {
	if x != nil {
		return x.xxx_hidden_OwnerIdentification
	}
	return nil
}

func (x *Identification_Card) GetCardIssuingAuthorityName() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardIssuingAuthorityName
	}
	return nil
}

func (x *Identification_Card) GetCardIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CardIssueDate
	}
	return nil
}

func (x *Identification_Card) GetCardValidityBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CardValidityBegin
	}
	return nil
}

func (x *Identification_Card) GetCardExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CardExpiryDate
	}
	return nil
}

func (x *Identification_Card) SetCardIssuingMemberState(v v1.NationNumeric) {
	x.xxx_hidden_CardIssuingMemberState = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *Identification_Card) SetDriverIdentification(v *Identification_DriverIdentification) {
	x.xxx_hidden_DriverIdentification = v
}

func (x *Identification_Card) SetOwnerIdentification(v *Identification_OwnerIdentification) {
	x.xxx_hidden_OwnerIdentification = v
}

func (x *Identification_Card) SetCardIssuingAuthorityName(v *v1.StringValue) {
	x.xxx_hidden_CardIssuingAuthorityName = v
}

func (x *Identification_Card) SetCardIssueDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_CardIssueDate = v
}

func (x *Identification_Card) SetCardValidityBegin(v *timestamppb.Timestamp) {
	x.xxx_hidden_CardValidityBegin = v
}

func (x *Identification_Card) SetCardExpiryDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_CardExpiryDate = v
}

func (x *Identification_Card) HasCardIssuingMemberState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Identification_Card) HasDriverIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DriverIdentification != nil
}

func (x *Identification_Card) HasOwnerIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OwnerIdentification != nil
}

func (x *Identification_Card) HasCardIssuingAuthorityName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardIssuingAuthorityName != nil
}

func (x *Identification_Card) HasCardIssueDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardIssueDate != nil
}

func (x *Identification_Card) HasCardValidityBegin() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardValidityBegin != nil
}

func (x *Identification_Card) HasCardExpiryDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardExpiryDate != nil
}

func (x *Identification_Card) ClearCardIssuingMemberState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CardIssuingMemberState = v1.NationNumeric_NATION_NUMERIC_UNSPECIFIED
}

func (x *Identification_Card) ClearDriverIdentification() {
	x.xxx_hidden_DriverIdentification = nil
}

func (x *Identification_Card) ClearOwnerIdentification() {
	x.xxx_hidden_OwnerIdentification = nil
}

func (x *Identification_Card) ClearCardIssuingAuthorityName() {
	x.xxx_hidden_CardIssuingAuthorityName = nil
}

func (x *Identification_Card) ClearCardIssueDate() {
	x.xxx_hidden_CardIssueDate = nil
}

func (x *Identification_Card) ClearCardValidityBegin() {
	x.xxx_hidden_CardValidityBegin = nil
}

func (x *Identification_Card) ClearCardExpiryDate() {
	x.xxx_hidden_CardExpiryDate = nil
}

type Identification_Card_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The issuing member state of the card.
	//
	// See Data Dictionary, Section 2.24, `cardIssuingMemberState`.
	// ASN.1 Specification: NationNumeric ::= INTEGER (0..255)
	CardIssuingMemberState *v1.NationNumeric
	// This field is part of the `CardNumber` CHOICE.
	// It is populated when `card_type` is `DRIVER_CARD`.
	DriverIdentification *Identification_DriverIdentification
	// This field is part of the `CardNumber` CHOICE.
	// It is populated when `card_type` is `WORKSHOP_CARD` or `COMPANY_CARD`.
	OwnerIdentification *Identification_OwnerIdentification
	// The name of the authority that issued the card.
	//
	// See Data Dictionary, Section 2.24, `cardIssuingAuthorityName`.
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	CardIssuingAuthorityName *v1.StringValue
	// The date the card was issued.
	//
	// See Data Dictionary, Section 2.24, `cardIssueDate`.
	// ASN.1 Specification: TimeReal ::= INTEGER (0..2^32-1)
	CardIssueDate *timestamppb.Timestamp
	// The date from which the card is valid.
	//
	// See Data Dictionary, Section 2.24, `cardValidityBegin`.
	// ASN.1 Specification: TimeReal ::= INTEGER (0..2^32-1)
	CardValidityBegin *timestamppb.Timestamp
	// The date on which the card expires.
	//
	// See Data Dictionary, Section 2.24, `cardExpiryDate`.
	// ASN.1 Specification: TimeReal ::= INTEGER (0..2^32-1)
	CardExpiryDate *timestamppb.Timestamp
}

func (b0 Identification_Card_builder) Build() *Identification_Card {
	m0 := &Identification_Card{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CardIssuingMemberState != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_CardIssuingMemberState = *b.CardIssuingMemberState
	}
	x.xxx_hidden_DriverIdentification = b.DriverIdentification
	x.xxx_hidden_OwnerIdentification = b.OwnerIdentification
	x.xxx_hidden_CardIssuingAuthorityName = b.CardIssuingAuthorityName
	x.xxx_hidden_CardIssueDate = b.CardIssueDate
	x.xxx_hidden_CardValidityBegin = b.CardValidityBegin
	x.xxx_hidden_CardExpiryDate = b.CardExpiryDate
	return m0
}

// Represents the identification of the driver card holder.
//
// The data type `DriverCardHolderIdentification` is specified in the Data Dictionary, Section 2.62.
//
// ASN.1 Specification:
//
//	DriverCardHolderIdentification ::= SEQUENCE {
//	    cardHolderName HolderName,
//	    cardHolderBirthDate Datef,
//	    cardHolderPreferredLanguage Language
//	}
type Identification_DriverCardHolder struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CardHolderSurname           *v1.StringValue        `protobuf:"bytes,1,opt,name=card_holder_surname,json=cardHolderSurname"`
	xxx_hidden_CardHolderFirstNames        *v1.StringValue        `protobuf:"bytes,2,opt,name=card_holder_first_names,json=cardHolderFirstNames"`
	xxx_hidden_CardHolderBirthDate         *v1.Date               `protobuf:"bytes,3,opt,name=card_holder_birth_date,json=cardHolderBirthDate"`
	xxx_hidden_CardHolderPreferredLanguage *v1.StringValue        `protobuf:"bytes,4,opt,name=card_holder_preferred_language,json=cardHolderPreferredLanguage"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *Identification_DriverCardHolder) Reset() {
	*x = Identification_DriverCardHolder{}
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identification_DriverCardHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identification_DriverCardHolder) ProtoMessage() {}

func (x *Identification_DriverCardHolder) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Identification_DriverCardHolder) GetCardHolderSurname() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderSurname
	}
	return nil
}

func (x *Identification_DriverCardHolder) GetCardHolderFirstNames() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderFirstNames
	}
	return nil
}

func (x *Identification_DriverCardHolder) GetCardHolderBirthDate() *v1.Date {
	if x != nil {
		return x.xxx_hidden_CardHolderBirthDate
	}
	return nil
}

func (x *Identification_DriverCardHolder) GetCardHolderPreferredLanguage() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderPreferredLanguage
	}
	return nil
}

func (x *Identification_DriverCardHolder) SetCardHolderSurname(v *v1.StringValue) {
	x.xxx_hidden_CardHolderSurname = v
}

func (x *Identification_DriverCardHolder) SetCardHolderFirstNames(v *v1.StringValue) {
	x.xxx_hidden_CardHolderFirstNames = v
}

func (x *Identification_DriverCardHolder) SetCardHolderBirthDate(v *v1.Date) {
	x.xxx_hidden_CardHolderBirthDate = v
}

func (x *Identification_DriverCardHolder) SetCardHolderPreferredLanguage(v *v1.StringValue) {
	x.xxx_hidden_CardHolderPreferredLanguage = v
}

func (x *Identification_DriverCardHolder) HasCardHolderSurname() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderSurname != nil
}

func (x *Identification_DriverCardHolder) HasCardHolderFirstNames() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderFirstNames != nil
}

func (x *Identification_DriverCardHolder) HasCardHolderBirthDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderBirthDate != nil
}

func (x *Identification_DriverCardHolder) HasCardHolderPreferredLanguage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderPreferredLanguage != nil
}

func (x *Identification_DriverCardHolder) ClearCardHolderSurname() {
	x.xxx_hidden_CardHolderSurname = nil
}

func (x *Identification_DriverCardHolder) ClearCardHolderFirstNames() {
	x.xxx_hidden_CardHolderFirstNames = nil
}

func (x *Identification_DriverCardHolder) ClearCardHolderBirthDate() {
	x.xxx_hidden_CardHolderBirthDate = nil
}

func (x *Identification_DriverCardHolder) ClearCardHolderPreferredLanguage() {
	x.xxx_hidden_CardHolderPreferredLanguage = nil
}

type Identification_DriverCardHolder_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The surname of the card holder.
	//
	// Corresponds to `holderSurname` within `HolderName` (DD 2.83).
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	CardHolderSurname *v1.StringValue
	// The first name(s) of the card holder.
	//
	// Corresponds to `holderFirstNames` within `HolderName` (DD 2.83).
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	CardHolderFirstNames *v1.StringValue
	// The birth date of the card holder.
	//
	// See Data Dictionary, Section 2.62, `cardHolderBirthDate`.
	// ASN.1 Specification: Datef ::= OCTET STRING (SIZE(4))
	CardHolderBirthDate *v1.Date
	// The preferred language of the card holder.
	//
	// See Data Dictionary, Section 2.62, `cardHolderPreferredLanguage`.
	//
	// ASN.1 Definition:
	//
	//	Language ::= IA5String (SIZE(2))
	CardHolderPreferredLanguage *v1.StringValue
}

func (b0 Identification_DriverCardHolder_builder) Build() *Identification_DriverCardHolder {
	m0 := &Identification_DriverCardHolder{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CardHolderSurname = b.CardHolderSurname
	x.xxx_hidden_CardHolderFirstNames = b.CardHolderFirstNames
	x.xxx_hidden_CardHolderBirthDate = b.CardHolderBirthDate
	x.xxx_hidden_CardHolderPreferredLanguage = b.CardHolderPreferredLanguage
	return m0
}

// Represents the identification of the workshop card holder.
//
// The data type `WorkshopCardHolderIdentification` is specified in the Data Dictionary, Section 2.237.
//
// ASN.1 Specification:
//
//	WorkshopCardHolderIdentification ::= SEQUENCE {
//	    workshopName Name,
//	    workshopAddress Address,
//	    cardHolderName HolderName,
//	    cardHolderPreferredLanguage Language
//	}
type Identification_WorkshopCardHolder struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_WorkshopName                *v1.StringValue        `protobuf:"bytes,1,opt,name=workshop_name,json=workshopName"`
	xxx_hidden_WorkshopAddress             *v1.StringValue        `protobuf:"bytes,2,opt,name=workshop_address,json=workshopAddress"`
	xxx_hidden_CardHolderSurname           *v1.StringValue        `protobuf:"bytes,3,opt,name=card_holder_surname,json=cardHolderSurname"`
	xxx_hidden_CardHolderFirstNames        *v1.StringValue        `protobuf:"bytes,4,opt,name=card_holder_first_names,json=cardHolderFirstNames"`
	xxx_hidden_CardHolderPreferredLanguage *v1.StringValue        `protobuf:"bytes,5,opt,name=card_holder_preferred_language,json=cardHolderPreferredLanguage"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *Identification_WorkshopCardHolder) Reset() {
	*x = Identification_WorkshopCardHolder{}
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identification_WorkshopCardHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identification_WorkshopCardHolder) ProtoMessage() {}

func (x *Identification_WorkshopCardHolder) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Identification_WorkshopCardHolder) GetWorkshopName() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_WorkshopName
	}
	return nil
}

func (x *Identification_WorkshopCardHolder) GetWorkshopAddress() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_WorkshopAddress
	}
	return nil
}

func (x *Identification_WorkshopCardHolder) GetCardHolderSurname() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderSurname
	}
	return nil
}

func (x *Identification_WorkshopCardHolder) GetCardHolderFirstNames() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderFirstNames
	}
	return nil
}

func (x *Identification_WorkshopCardHolder) GetCardHolderPreferredLanguage() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderPreferredLanguage
	}
	return nil
}

func (x *Identification_WorkshopCardHolder) SetWorkshopName(v *v1.StringValue) {
	x.xxx_hidden_WorkshopName = v
}

func (x *Identification_WorkshopCardHolder) SetWorkshopAddress(v *v1.StringValue) {
	x.xxx_hidden_WorkshopAddress = v
}

func (x *Identification_WorkshopCardHolder) SetCardHolderSurname(v *v1.StringValue) {
	x.xxx_hidden_CardHolderSurname = v
}

func (x *Identification_WorkshopCardHolder) SetCardHolderFirstNames(v *v1.StringValue) {
	x.xxx_hidden_CardHolderFirstNames = v
}

func (x *Identification_WorkshopCardHolder) SetCardHolderPreferredLanguage(v *v1.StringValue) {
	x.xxx_hidden_CardHolderPreferredLanguage = v
}

func (x *Identification_WorkshopCardHolder) HasWorkshopName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopName != nil
}

func (x *Identification_WorkshopCardHolder) HasWorkshopAddress() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopAddress != nil
}

func (x *Identification_WorkshopCardHolder) HasCardHolderSurname() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderSurname != nil
}

func (x *Identification_WorkshopCardHolder) HasCardHolderFirstNames() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderFirstNames != nil
}

func (x *Identification_WorkshopCardHolder) HasCardHolderPreferredLanguage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderPreferredLanguage != nil
}

func (x *Identification_WorkshopCardHolder) ClearWorkshopName() {
	x.xxx_hidden_WorkshopName = nil
}

func (x *Identification_WorkshopCardHolder) ClearWorkshopAddress() {
	x.xxx_hidden_WorkshopAddress = nil
}

func (x *Identification_WorkshopCardHolder) ClearCardHolderSurname() {
	x.xxx_hidden_CardHolderSurname = nil
}

func (x *Identification_WorkshopCardHolder) ClearCardHolderFirstNames() {
	x.xxx_hidden_CardHolderFirstNames = nil
}

func (x *Identification_WorkshopCardHolder) ClearCardHolderPreferredLanguage() {
	x.xxx_hidden_CardHolderPreferredLanguage = nil
}

type Identification_WorkshopCardHolder_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the workshop.
	//
	// See Data Dictionary, Section 2.237, `workshopName`.
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	WorkshopName *v1.StringValue
	// The address of the workshop.
	//
	// See Data Dictionary, Section 2.237, `workshopAddress`.
	// ASN.1 Specification: Address ::= SEQUENCE { codePage INTEGER(0..255), address OCTET STRING (SIZE(36)) }
	WorkshopAddress *v1.StringValue
	// The surname of the card holder.
	//
	// Corresponds to `holderSurname` within `HolderName` (DD 2.83).
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	CardHolderSurname *v1.StringValue
	// The first name(s) of the card holder.
	//
	// Corresponds to `holderFirstNames` within `HolderName` (DD 2.83).
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	CardHolderFirstNames *v1.StringValue
	// The preferred language of the card holder.
	//
	// See Data Dictionary, Section 2.237, `cardHolderPreferredLanguage`.
	//
	// ASN.1 Definition:
	//
	//	Language ::= IA5String (SIZE(2))
	CardHolderPreferredLanguage *v1.StringValue
}

func (b0 Identification_WorkshopCardHolder_builder) Build() *Identification_WorkshopCardHolder {
	m0 := &Identification_WorkshopCardHolder{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_WorkshopName = b.WorkshopName
	x.xxx_hidden_WorkshopAddress = b.WorkshopAddress
	x.xxx_hidden_CardHolderSurname = b.CardHolderSurname
	x.xxx_hidden_CardHolderFirstNames = b.CardHolderFirstNames
	x.xxx_hidden_CardHolderPreferredLanguage = b.CardHolderPreferredLanguage
	return m0
}

// Represents the identification of the control card holder.
//
// The data type `ControlCardHolderIdentification` is specified in the Data Dictionary, Section 2.52.
//
// ASN.1 Specification:
//
//	ControlCardHolderIdentification ::= SEQUENCE {
//	    controlBodyName Name,
//	    controlBodyAddress Address,
//	    cardHolderName HolderName,
//	    cardHolderPreferredLanguage Language
//	}
type Identification_ControlCardHolder struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ControlBodyName             *v1.StringValue        `protobuf:"bytes,1,opt,name=control_body_name,json=controlBodyName"`
	xxx_hidden_ControlBodyAddress          *v1.StringValue        `protobuf:"bytes,2,opt,name=control_body_address,json=controlBodyAddress"`
	xxx_hidden_CardHolderSurname           *v1.StringValue        `protobuf:"bytes,3,opt,name=card_holder_surname,json=cardHolderSurname"`
	xxx_hidden_CardHolderFirstNames        *v1.StringValue        `protobuf:"bytes,4,opt,name=card_holder_first_names,json=cardHolderFirstNames"`
	xxx_hidden_CardHolderPreferredLanguage *v1.StringValue        `protobuf:"bytes,5,opt,name=card_holder_preferred_language,json=cardHolderPreferredLanguage"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *Identification_ControlCardHolder) Reset() {
	*x = Identification_ControlCardHolder{}
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identification_ControlCardHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identification_ControlCardHolder) ProtoMessage() {}

func (x *Identification_ControlCardHolder) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Identification_ControlCardHolder) GetControlBodyName() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_ControlBodyName
	}
	return nil
}

func (x *Identification_ControlCardHolder) GetControlBodyAddress() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_ControlBodyAddress
	}
	return nil
}

func (x *Identification_ControlCardHolder) GetCardHolderSurname() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderSurname
	}
	return nil
}

func (x *Identification_ControlCardHolder) GetCardHolderFirstNames() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderFirstNames
	}
	return nil
}

func (x *Identification_ControlCardHolder) GetCardHolderPreferredLanguage() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderPreferredLanguage
	}
	return nil
}

func (x *Identification_ControlCardHolder) SetControlBodyName(v *v1.StringValue) {
	x.xxx_hidden_ControlBodyName = v
}

func (x *Identification_ControlCardHolder) SetControlBodyAddress(v *v1.StringValue) {
	x.xxx_hidden_ControlBodyAddress = v
}

func (x *Identification_ControlCardHolder) SetCardHolderSurname(v *v1.StringValue) {
	x.xxx_hidden_CardHolderSurname = v
}

func (x *Identification_ControlCardHolder) SetCardHolderFirstNames(v *v1.StringValue) {
	x.xxx_hidden_CardHolderFirstNames = v
}

func (x *Identification_ControlCardHolder) SetCardHolderPreferredLanguage(v *v1.StringValue) {
	x.xxx_hidden_CardHolderPreferredLanguage = v
}

func (x *Identification_ControlCardHolder) HasControlBodyName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ControlBodyName != nil
}

func (x *Identification_ControlCardHolder) HasControlBodyAddress() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ControlBodyAddress != nil
}

func (x *Identification_ControlCardHolder) HasCardHolderSurname() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderSurname != nil
}

func (x *Identification_ControlCardHolder) HasCardHolderFirstNames() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderFirstNames != nil
}

func (x *Identification_ControlCardHolder) HasCardHolderPreferredLanguage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderPreferredLanguage != nil
}

func (x *Identification_ControlCardHolder) ClearControlBodyName() {
	x.xxx_hidden_ControlBodyName = nil
}

func (x *Identification_ControlCardHolder) ClearControlBodyAddress() {
	x.xxx_hidden_ControlBodyAddress = nil
}

func (x *Identification_ControlCardHolder) ClearCardHolderSurname() {
	x.xxx_hidden_CardHolderSurname = nil
}

func (x *Identification_ControlCardHolder) ClearCardHolderFirstNames() {
	x.xxx_hidden_CardHolderFirstNames = nil
}

func (x *Identification_ControlCardHolder) ClearCardHolderPreferredLanguage() {
	x.xxx_hidden_CardHolderPreferredLanguage = nil
}

type Identification_ControlCardHolder_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the control body.
	//
	// See Data Dictionary, Section 2.52, `controlBodyName`.
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	ControlBodyName *v1.StringValue
	// The address of the control body.
	//
	// See Data Dictionary, Section 2.52, `controlBodyAddress`.
	// ASN.1 Specification: Address ::= SEQUENCE { codePage INTEGER(0..255), address OCTET STRING (SIZE(36)) }
	ControlBodyAddress *v1.StringValue
	// The surname of the card holder.
	//
	// Corresponds to `holderSurname` within `HolderName` (DD 2.83).
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	CardHolderSurname *v1.StringValue
	// The first name(s) of the card holder.
	//
	// Corresponds to `holderFirstNames` within `HolderName` (DD 2.83).
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	CardHolderFirstNames *v1.StringValue
	// The preferred language of the card holder.
	//
	// See Data Dictionary, Section 2.52, `cardHolderPreferredLanguage`.
	//
	// ASN.1 Definition:
	//
	//	Language ::= IA5String (SIZE(2))
	CardHolderPreferredLanguage *v1.StringValue
}

func (b0 Identification_ControlCardHolder_builder) Build() *Identification_ControlCardHolder {
	m0 := &Identification_ControlCardHolder{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ControlBodyName = b.ControlBodyName
	x.xxx_hidden_ControlBodyAddress = b.ControlBodyAddress
	x.xxx_hidden_CardHolderSurname = b.CardHolderSurname
	x.xxx_hidden_CardHolderFirstNames = b.CardHolderFirstNames
	x.xxx_hidden_CardHolderPreferredLanguage = b.CardHolderPreferredLanguage
	return m0
}

// Represents the identification of the company card holder.
//
// The data type `CompanyCardHolderIdentification` is specified in the Data Dictionary, Section 2.49.
//
// ASN.1 Specification:
//
//	CompanyCardHolderIdentification ::= SEQUENCE {
//	    companyName Name,
//	    companyAddress Address,
//	    cardHolderPreferredLanguage Language
//	}
type Identification_CompanyCardHolder struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CompanyName                 *v1.StringValue        `protobuf:"bytes,1,opt,name=company_name,json=companyName"`
	xxx_hidden_CompanyAddress              *v1.StringValue        `protobuf:"bytes,2,opt,name=company_address,json=companyAddress"`
	xxx_hidden_CardHolderPreferredLanguage *v1.StringValue        `protobuf:"bytes,3,opt,name=card_holder_preferred_language,json=cardHolderPreferredLanguage"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *Identification_CompanyCardHolder) Reset() {
	*x = Identification_CompanyCardHolder{}
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identification_CompanyCardHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identification_CompanyCardHolder) ProtoMessage() {}

func (x *Identification_CompanyCardHolder) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Identification_CompanyCardHolder) GetCompanyName() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CompanyName
	}
	return nil
}

func (x *Identification_CompanyCardHolder) GetCompanyAddress() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CompanyAddress
	}
	return nil
}

func (x *Identification_CompanyCardHolder) GetCardHolderPreferredLanguage() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_CardHolderPreferredLanguage
	}
	return nil
}

func (x *Identification_CompanyCardHolder) SetCompanyName(v *v1.StringValue) {
	x.xxx_hidden_CompanyName = v
}

func (x *Identification_CompanyCardHolder) SetCompanyAddress(v *v1.StringValue) {
	x.xxx_hidden_CompanyAddress = v
}

func (x *Identification_CompanyCardHolder) SetCardHolderPreferredLanguage(v *v1.StringValue) {
	x.xxx_hidden_CardHolderPreferredLanguage = v
}

func (x *Identification_CompanyCardHolder) HasCompanyName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CompanyName != nil
}

func (x *Identification_CompanyCardHolder) HasCompanyAddress() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CompanyAddress != nil
}

func (x *Identification_CompanyCardHolder) HasCardHolderPreferredLanguage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderPreferredLanguage != nil
}

func (x *Identification_CompanyCardHolder) ClearCompanyName() {
	x.xxx_hidden_CompanyName = nil
}

func (x *Identification_CompanyCardHolder) ClearCompanyAddress() {
	x.xxx_hidden_CompanyAddress = nil
}

func (x *Identification_CompanyCardHolder) ClearCardHolderPreferredLanguage() {
	x.xxx_hidden_CardHolderPreferredLanguage = nil
}

type Identification_CompanyCardHolder_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the company.
	//
	// See Data Dictionary, Section 2.49, `companyName`.
	// ASN.1 Specification: Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	CompanyName *v1.StringValue
	// The address of the company.
	//
	// See Data Dictionary, Section 2.49, `companyAddress`.
	// ASN.1 Specification: Address ::= SEQUENCE { codePage INTEGER(0..255), address OCTET STRING (SIZE(36)) }
	CompanyAddress *v1.StringValue
	// The preferred language of the card holder.
	//
	// See Data Dictionary, Section 2.49, `cardHolderPreferredLanguage`.
	//
	// ASN.1 Definition:
	//
	//	Language ::= IA5String (SIZE(2))
	CardHolderPreferredLanguage *v1.StringValue
}

func (b0 Identification_CompanyCardHolder_builder) Build() *Identification_CompanyCardHolder {
	m0 := &Identification_CompanyCardHolder{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CompanyName = b.CompanyName
	x.xxx_hidden_CompanyAddress = b.CompanyAddress
	x.xxx_hidden_CardHolderPreferredLanguage = b.CardHolderPreferredLanguage
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_identification_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_identification_proto_rawDesc = "" +
	"\n" +
	";wayplatform/connect/tachograph/card/v1/identification.proto\x12&wayplatform.connect.tachograph.card.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a6wayplatform/connect/tachograph/card/v1/card_type.proto\x1aEwayplatform/connect/tachograph/datadictionary/v1/nation_numeric.proto\x1aCwayplatform/connect/tachograph/datadictionary/v1/string_value.proto\x1a;wayplatform/connect/tachograph/datadictionary/v1/date.proto\"\xc7\x1f\n" +
	"\x0eIdentification\x12O\n" +
	"\x04card\x18\x01 \x01(\v2;.wayplatform.connect.tachograph.card.v1.Identification.CardR\x04card\x12M\n" +
	"\tcard_type\x18\x02 \x01(\x0e20.wayplatform.connect.tachograph.card.v1.CardTypeR\bcardType\x12u\n" +
	"\x12driver_card_holder\x18\x03 \x01(\v2G.wayplatform.connect.tachograph.card.v1.Identification.DriverCardHolderR\x10driverCardHolder\x12{\n" +
	"\x14workshop_card_holder\x18\x04 \x01(\v2I.wayplatform.connect.tachograph.card.v1.Identification.WorkshopCardHolderR\x12workshopCardHolder\x12x\n" +
	"\x13control_card_holder\x18\x05 \x01(\v2H.wayplatform.connect.tachograph.card.v1.Identification.ControlCardHolderR\x11controlCardHolder\x12x\n" +
	"\x13company_card_holder\x18\x06 \x01(\v2H.wayplatform.connect.tachograph.card.v1.Identification.CompanyCardHolderR\x11companyCardHolder\x12\x1c\n" +
	"\tsignature\x18\a \x01(\fR\tsignature\x1a\xb9\x03\n" +
	"\x14DriverIdentification\x12e\n" +
	"\x0eidentification\x18\x01 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x0eidentification\x12j\n" +
	"\x11consecutive_index\x18\x02 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x10consecutiveIndex\x12j\n" +
	"\x11replacement_index\x18\x03 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x10replacementIndex\x12b\n" +
	"\rrenewal_index\x18\x04 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\frenewalIndex\x1a|\n" +
	"\x13OwnerIdentification\x12e\n" +
	"\x0eidentification\x18\x01 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x0eidentification\x1a\xd8\x05\n" +
	"\x04Card\x12z\n" +
	"\x19card_issuing_member_state\x18\x01 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.NationNumericR\x16cardIssuingMemberState\x12\x80\x01\n" +
	"\x15driver_identification\x18\x02 \x01(\v2K.wayplatform.connect.tachograph.card.v1.Identification.DriverIdentificationR\x14driverIdentification\x12}\n" +
	"\x14owner_identification\x18\a \x01(\v2J.wayplatform.connect.tachograph.card.v1.Identification.OwnerIdentificationR\x13ownerIdentification\x12|\n" +
	"\x1bcard_issuing_authority_name\x18\x03 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x18cardIssuingAuthorityName\x12B\n" +
	"\x0fcard_issue_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\rcardIssueDate\x12J\n" +
	"\x13card_validity_begin\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x11cardValidityBegin\x12D\n" +
	"\x10card_expiry_date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x0ecardExpiryDate\x1a\xe9\x03\n" +
	"\x10DriverCardHolder\x12m\n" +
	"\x13card_holder_surname\x18\x01 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x11cardHolderSurname\x12t\n" +
	"\x17card_holder_first_names\x18\x02 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x14cardHolderFirstNames\x12k\n" +
	"\x16card_holder_birth_date\x18\x03 \x01(\v26.wayplatform.connect.tachograph.datadictionary.v1.DateR\x13cardHolderBirthDate\x12\x82\x01\n" +
	"\x1ecard_holder_preferred_language\x18\x04 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x1bcardHolderPreferredLanguage\x1a\xcc\x04\n" +
	"\x12WorkshopCardHolder\x12b\n" +
	"\rworkshop_name\x18\x01 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\fworkshopName\x12h\n" +
	"\x10workshop_address\x18\x02 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x0fworkshopAddress\x12m\n" +
	"\x13card_holder_surname\x18\x03 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x11cardHolderSurname\x12t\n" +
	"\x17card_holder_first_names\x18\x04 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x14cardHolderFirstNames\x12\x82\x01\n" +
	"\x1ecard_holder_preferred_language\x18\x05 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x1bcardHolderPreferredLanguage\x1a\xd9\x04\n" +
	"\x11ControlCardHolder\x12i\n" +
	"\x11control_body_name\x18\x01 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x0fcontrolBodyName\x12o\n" +
	"\x14control_body_address\x18\x02 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x12controlBodyAddress\x12m\n" +
	"\x13card_holder_surname\x18\x03 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x11cardHolderSurname\x12t\n" +
	"\x17card_holder_first_names\x18\x04 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x14cardHolderFirstNames\x12\x82\x01\n" +
	"\x1ecard_holder_preferred_language\x18\x05 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x1bcardHolderPreferredLanguage\x1a\xe2\x02\n" +
	"\x11CompanyCardHolder\x12`\n" +
	"\fcompany_name\x18\x01 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\vcompanyName\x12f\n" +
	"\x0fcompany_address\x18\x02 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x0ecompanyAddress\x12\x82\x01\n" +
	"\x1ecard_holder_preferred_language\x18\x03 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x1bcardHolderPreferredLanguageB\xe0\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x13IdentificationProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_wayplatform_connect_tachograph_card_v1_identification_proto_goTypes = []any{
	(*Identification)(nil),                      // 0: wayplatform.connect.tachograph.card.v1.Identification
	(*Identification_DriverIdentification)(nil), // 1: wayplatform.connect.tachograph.card.v1.Identification.DriverIdentification
	(*Identification_OwnerIdentification)(nil),  // 2: wayplatform.connect.tachograph.card.v1.Identification.OwnerIdentification
	(*Identification_Card)(nil),                 // 3: wayplatform.connect.tachograph.card.v1.Identification.Card
	(*Identification_DriverCardHolder)(nil),     // 4: wayplatform.connect.tachograph.card.v1.Identification.DriverCardHolder
	(*Identification_WorkshopCardHolder)(nil),   // 5: wayplatform.connect.tachograph.card.v1.Identification.WorkshopCardHolder
	(*Identification_ControlCardHolder)(nil),    // 6: wayplatform.connect.tachograph.card.v1.Identification.ControlCardHolder
	(*Identification_CompanyCardHolder)(nil),    // 7: wayplatform.connect.tachograph.card.v1.Identification.CompanyCardHolder
	(CardType)(0),                               // 8: wayplatform.connect.tachograph.card.v1.CardType
	(*v1.StringValue)(nil),                      // 9: wayplatform.connect.tachograph.datadictionary.v1.StringValue
	(v1.NationNumeric)(0),                       // 10: wayplatform.connect.tachograph.datadictionary.v1.NationNumeric
	(*timestamppb.Timestamp)(nil),               // 11: google.protobuf.Timestamp
	(*v1.Date)(nil),                             // 12: wayplatform.connect.tachograph.datadictionary.v1.Date
}
var file_wayplatform_connect_tachograph_card_v1_identification_proto_depIdxs = []int32{
	3,  // 0: wayplatform.connect.tachograph.card.v1.Identification.card:type_name -> wayplatform.connect.tachograph.card.v1.Identification.Card
	8,  // 1: wayplatform.connect.tachograph.card.v1.Identification.card_type:type_name -> wayplatform.connect.tachograph.card.v1.CardType
	4,  // 2: wayplatform.connect.tachograph.card.v1.Identification.driver_card_holder:type_name -> wayplatform.connect.tachograph.card.v1.Identification.DriverCardHolder
	5,  // 3: wayplatform.connect.tachograph.card.v1.Identification.workshop_card_holder:type_name -> wayplatform.connect.tachograph.card.v1.Identification.WorkshopCardHolder
	6,  // 4: wayplatform.connect.tachograph.card.v1.Identification.control_card_holder:type_name -> wayplatform.connect.tachograph.card.v1.Identification.ControlCardHolder
	7,  // 5: wayplatform.connect.tachograph.card.v1.Identification.company_card_holder:type_name -> wayplatform.connect.tachograph.card.v1.Identification.CompanyCardHolder
	9,  // 6: wayplatform.connect.tachograph.card.v1.Identification.DriverIdentification.identification:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 7: wayplatform.connect.tachograph.card.v1.Identification.DriverIdentification.consecutive_index:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 8: wayplatform.connect.tachograph.card.v1.Identification.DriverIdentification.replacement_index:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 9: wayplatform.connect.tachograph.card.v1.Identification.DriverIdentification.renewal_index:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 10: wayplatform.connect.tachograph.card.v1.Identification.OwnerIdentification.identification:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	10, // 11: wayplatform.connect.tachograph.card.v1.Identification.Card.card_issuing_member_state:type_name -> wayplatform.connect.tachograph.datadictionary.v1.NationNumeric
	1,  // 12: wayplatform.connect.tachograph.card.v1.Identification.Card.driver_identification:type_name -> wayplatform.connect.tachograph.card.v1.Identification.DriverIdentification
	2,  // 13: wayplatform.connect.tachograph.card.v1.Identification.Card.owner_identification:type_name -> wayplatform.connect.tachograph.card.v1.Identification.OwnerIdentification
	9,  // 14: wayplatform.connect.tachograph.card.v1.Identification.Card.card_issuing_authority_name:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	11, // 15: wayplatform.connect.tachograph.card.v1.Identification.Card.card_issue_date:type_name -> google.protobuf.Timestamp
	11, // 16: wayplatform.connect.tachograph.card.v1.Identification.Card.card_validity_begin:type_name -> google.protobuf.Timestamp
	11, // 17: wayplatform.connect.tachograph.card.v1.Identification.Card.card_expiry_date:type_name -> google.protobuf.Timestamp
	9,  // 18: wayplatform.connect.tachograph.card.v1.Identification.DriverCardHolder.card_holder_surname:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 19: wayplatform.connect.tachograph.card.v1.Identification.DriverCardHolder.card_holder_first_names:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	12, // 20: wayplatform.connect.tachograph.card.v1.Identification.DriverCardHolder.card_holder_birth_date:type_name -> wayplatform.connect.tachograph.datadictionary.v1.Date
	9,  // 21: wayplatform.connect.tachograph.card.v1.Identification.DriverCardHolder.card_holder_preferred_language:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 22: wayplatform.connect.tachograph.card.v1.Identification.WorkshopCardHolder.workshop_name:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 23: wayplatform.connect.tachograph.card.v1.Identification.WorkshopCardHolder.workshop_address:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 24: wayplatform.connect.tachograph.card.v1.Identification.WorkshopCardHolder.card_holder_surname:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 25: wayplatform.connect.tachograph.card.v1.Identification.WorkshopCardHolder.card_holder_first_names:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 26: wayplatform.connect.tachograph.card.v1.Identification.WorkshopCardHolder.card_holder_preferred_language:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 27: wayplatform.connect.tachograph.card.v1.Identification.ControlCardHolder.control_body_name:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 28: wayplatform.connect.tachograph.card.v1.Identification.ControlCardHolder.control_body_address:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 29: wayplatform.connect.tachograph.card.v1.Identification.ControlCardHolder.card_holder_surname:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 30: wayplatform.connect.tachograph.card.v1.Identification.ControlCardHolder.card_holder_first_names:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 31: wayplatform.connect.tachograph.card.v1.Identification.ControlCardHolder.card_holder_preferred_language:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 32: wayplatform.connect.tachograph.card.v1.Identification.CompanyCardHolder.company_name:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 33: wayplatform.connect.tachograph.card.v1.Identification.CompanyCardHolder.company_address:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	9,  // 34: wayplatform.connect.tachograph.card.v1.Identification.CompanyCardHolder.card_holder_preferred_language:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_identification_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_identification_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_identification_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_card_v1_card_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_identification_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_identification_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_identification_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_identification_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_identification_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_identification_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_identification_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_identification_proto_depIdxs = nil
}
