// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/driving_licence_info.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_Driving_Licence_Info file, which contains the
// card holder's driving licence information.
//
// The file structure is defined in Appendix 2 (tables TCS_150 and TCS_154) and
// does not contain a signature block.
//
// File Structure (from TCS_154):
//
//	EF Driving_Licence_Info
//	└─CardDrivingLicenceInformation
//
// The data type `CardDrivingLicenceInformation` is specified in the Data Dictionary, Section 2.18.
//
// ASN.1 Specification:
//
//	CardDrivingLicenceInformation ::= SEQUENCE {
//	    drivingLicenceIssuingAuthority Name,
//	    drivingLicenceIssuingNation NationNumeric,
//	    drivingLicenceNumber IA5String(SIZE(16))
//	}
type DrivingLicenceInfo struct {
	state                                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_DrivingLicenceIssuingAuthority *v1.StringValue        `protobuf:"bytes,1,opt,name=driving_licence_issuing_authority,json=drivingLicenceIssuingAuthority"`
	xxx_hidden_DrivingLicenceIssuingNation    v1.NationNumeric       `protobuf:"varint,2,opt,name=driving_licence_issuing_nation,json=drivingLicenceIssuingNation,enum=wayplatform.connect.tachograph.dd.v1.NationNumeric"`
	xxx_hidden_DrivingLicenceNumber           *v1.Ia5StringValue     `protobuf:"bytes,3,opt,name=driving_licence_number,json=drivingLicenceNumber"`
	xxx_hidden_Signature                      []byte                 `protobuf:"bytes,4,opt,name=signature"`
	xxx_hidden_SignatureVerified              bool                   `protobuf:"varint,5,opt,name=signature_verified,json=signatureVerified"`
	XXX_raceDetectHookData                    protoimpl.RaceDetectHookData
	XXX_presence                              [1]uint32
	unknownFields                             protoimpl.UnknownFields
	sizeCache                                 protoimpl.SizeCache
}

func (x *DrivingLicenceInfo) Reset() {
	*x = DrivingLicenceInfo{}
	mi := &file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrivingLicenceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrivingLicenceInfo) ProtoMessage() {}

func (x *DrivingLicenceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DrivingLicenceInfo) GetDrivingLicenceIssuingAuthority() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_DrivingLicenceIssuingAuthority
	}
	return nil
}

func (x *DrivingLicenceInfo) GetDrivingLicenceIssuingNation() v1.NationNumeric {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_DrivingLicenceIssuingNation
		}
	}
	return v1.NationNumeric(0)
}

func (x *DrivingLicenceInfo) GetDrivingLicenceNumber() *v1.Ia5StringValue {
	if x != nil {
		return x.xxx_hidden_DrivingLicenceNumber
	}
	return nil
}

func (x *DrivingLicenceInfo) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *DrivingLicenceInfo) GetSignatureVerified() bool {
	if x != nil {
		return x.xxx_hidden_SignatureVerified
	}
	return false
}

func (x *DrivingLicenceInfo) SetDrivingLicenceIssuingAuthority(v *v1.StringValue) {
	x.xxx_hidden_DrivingLicenceIssuingAuthority = v
}

func (x *DrivingLicenceInfo) SetDrivingLicenceIssuingNation(v v1.NationNumeric) {
	x.xxx_hidden_DrivingLicenceIssuingNation = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *DrivingLicenceInfo) SetDrivingLicenceNumber(v *v1.Ia5StringValue) {
	x.xxx_hidden_DrivingLicenceNumber = v
}

func (x *DrivingLicenceInfo) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *DrivingLicenceInfo) SetSignatureVerified(v bool) {
	x.xxx_hidden_SignatureVerified = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *DrivingLicenceInfo) HasDrivingLicenceIssuingAuthority() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DrivingLicenceIssuingAuthority != nil
}

func (x *DrivingLicenceInfo) HasDrivingLicenceIssuingNation() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DrivingLicenceInfo) HasDrivingLicenceNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DrivingLicenceNumber != nil
}

func (x *DrivingLicenceInfo) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *DrivingLicenceInfo) HasSignatureVerified() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *DrivingLicenceInfo) ClearDrivingLicenceIssuingAuthority() {
	x.xxx_hidden_DrivingLicenceIssuingAuthority = nil
}

func (x *DrivingLicenceInfo) ClearDrivingLicenceIssuingNation() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DrivingLicenceIssuingNation = v1.NationNumeric_NATION_NUMERIC_UNSPECIFIED
}

func (x *DrivingLicenceInfo) ClearDrivingLicenceNumber() {
	x.xxx_hidden_DrivingLicenceNumber = nil
}

func (x *DrivingLicenceInfo) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Signature = nil
}

func (x *DrivingLicenceInfo) ClearSignatureVerified() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_SignatureVerified = false
}

type DrivingLicenceInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Authority that issued the driving licence.
	//
	// See Data Dictionary, Section 2.99, `Name`.
	// ASN.1 Specification:
	//
	//	Name ::= SEQUENCE { codePage INTEGER(0..255), name OCTET STRING (SIZE(36)) }
	DrivingLicenceIssuingAuthority *v1.StringValue
	// Nation of the issuing authority.
	//
	// See Data Dictionary, Section 2.101, `NationNumeric`.
	// ASN.1 Specification:
	//
	//	NationNumeric ::= INTEGER(0..255)
	DrivingLicenceIssuingNation *v1.NationNumeric
	// The driving licence number.
	//
	// See Data Dictionary, Section 2.18, `drivingLicenceNumber`.
	// ASN.1 Specification:
	//
	//	IA5String(SIZE(16))
	DrivingLicenceNumber *v1.Ia5StringValue
	// Signature data from the following file block, if tagged as a signature for
	// this EF according to the card file format specification (Appendix 2).
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	//
	// ASN.1 Definition (Gen1):
	//
	//	Signature ::= OCTET STRING (SIZE(128))
	//
	// ASN.1 Definition (Gen2):
	//
	//	Signature ::= OCTET STRING (variable size, depends on elliptic curve)
	//
	// Gen2 uses ECDSA signatures with variable lengths based on the curve:
	// - 256-bit curves: ~64 bytes
	// - 384-bit curves: ~96 bytes
	// - 512/521-bit curves: ~128-132 bytes
	Signature []byte
	// Indicates if the signature has been successfully verified.
	SignatureVerified *bool
}

func (b0 DrivingLicenceInfo_builder) Build() *DrivingLicenceInfo {
	m0 := &DrivingLicenceInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_DrivingLicenceIssuingAuthority = b.DrivingLicenceIssuingAuthority
	if b.DrivingLicenceIssuingNation != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_DrivingLicenceIssuingNation = *b.DrivingLicenceIssuingNation
	}
	x.xxx_hidden_DrivingLicenceNumber = b.DrivingLicenceNumber
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Signature = b.Signature
	}
	if b.SignatureVerified != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_SignatureVerified = *b.SignatureVerified
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_rawDesc = "" +
	"\n" +
	"Awayplatform/connect/tachograph/card/v1/driving_licence_info.proto\x12&wayplatform.connect.tachograph.card.v1\x1a;wayplatform/connect/tachograph/dd/v1/ia5_string_value.proto\x1a9wayplatform/connect/tachograph/dd/v1/nation_numeric.proto\x1a7wayplatform/connect/tachograph/dd/v1/string_value.proto\"\xc5\x03\n" +
	"\x12DrivingLicenceInfo\x12|\n" +
	"!driving_licence_issuing_authority\x18\x01 \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\x1edrivingLicenceIssuingAuthority\x12x\n" +
	"\x1edriving_licence_issuing_nation\x18\x02 \x01(\x0e23.wayplatform.connect.tachograph.dd.v1.NationNumericR\x1bdrivingLicenceIssuingNation\x12j\n" +
	"\x16driving_licence_number\x18\x03 \x01(\v24.wayplatform.connect.tachograph.dd.v1.Ia5StringValueR\x14drivingLicenceNumber\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\x12-\n" +
	"\x12signature_verified\x18\x05 \x01(\bR\x11signatureVerifiedB\xe4\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x17DrivingLicenceInfoProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_goTypes = []any{
	(*DrivingLicenceInfo)(nil), // 0: wayplatform.connect.tachograph.card.v1.DrivingLicenceInfo
	(*v1.StringValue)(nil),     // 1: wayplatform.connect.tachograph.dd.v1.StringValue
	(v1.NationNumeric)(0),      // 2: wayplatform.connect.tachograph.dd.v1.NationNumeric
	(*v1.Ia5StringValue)(nil),  // 3: wayplatform.connect.tachograph.dd.v1.Ia5StringValue
}
var file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.DrivingLicenceInfo.driving_licence_issuing_authority:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	2, // 1: wayplatform.connect.tachograph.card.v1.DrivingLicenceInfo.driving_licence_issuing_nation:type_name -> wayplatform.connect.tachograph.dd.v1.NationNumeric
	3, // 2: wayplatform.connect.tachograph.card.v1.DrivingLicenceInfo.driving_licence_number:type_name -> wayplatform.connect.tachograph.dd.v1.Ia5StringValue
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_depIdxs = nil
}
