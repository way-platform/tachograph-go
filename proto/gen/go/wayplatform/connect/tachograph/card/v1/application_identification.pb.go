// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/application_identification.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents data from EF_Application_Identification.
//
// The structure of this EF depends on the type of card. This message uses a
// tagged union pattern to represent this, where the `card_type` field indicates
// which of the nested messages is populated.
type ApplicationIdentification struct {
	state                             protoimpl.MessageState              `protogen:"opaque.v1"`
	xxx_hidden_CardType               CardType                            `protobuf:"varint,1,opt,name=card_type,json=cardType,enum=wayplatform.connect.tachograph.card.v1.CardType"`
	xxx_hidden_TypeOfTachographCardId v1.EquipmentType                    `protobuf:"varint,2,opt,name=type_of_tachograph_card_id,json=typeOfTachographCardId,enum=wayplatform.connect.tachograph.datadictionary.v1.EquipmentType"`
	xxx_hidden_CardStructureVersion   *v1.CardStructureVersion            `protobuf:"bytes,3,opt,name=card_structure_version,json=cardStructureVersion"`
	xxx_hidden_Driver                 *ApplicationIdentification_Driver   `protobuf:"bytes,4,opt,name=driver"`
	xxx_hidden_Workshop               *ApplicationIdentification_Workshop `protobuf:"bytes,5,opt,name=workshop"`
	xxx_hidden_Company                *ApplicationIdentification_Company  `protobuf:"bytes,6,opt,name=company"`
	xxx_hidden_Control                *ApplicationIdentification_Control  `protobuf:"bytes,7,opt,name=control"`
	XXX_raceDetectHookData            protoimpl.RaceDetectHookData
	XXX_presence                      [1]uint32
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *ApplicationIdentification) Reset() {
	*x = ApplicationIdentification{}
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationIdentification) ProtoMessage() {}

func (x *ApplicationIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ApplicationIdentification) GetCardType() CardType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_CardType
		}
	}
	return CardType_CARD_TYPE_UNSPECIFIED
}

func (x *ApplicationIdentification) GetTypeOfTachographCardId() v1.EquipmentType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_TypeOfTachographCardId
		}
	}
	return v1.EquipmentType(0)
}

func (x *ApplicationIdentification) GetCardStructureVersion() *v1.CardStructureVersion {
	if x != nil {
		return x.xxx_hidden_CardStructureVersion
	}
	return nil
}

func (x *ApplicationIdentification) GetDriver() *ApplicationIdentification_Driver {
	if x != nil {
		return x.xxx_hidden_Driver
	}
	return nil
}

func (x *ApplicationIdentification) GetWorkshop() *ApplicationIdentification_Workshop {
	if x != nil {
		return x.xxx_hidden_Workshop
	}
	return nil
}

func (x *ApplicationIdentification) GetCompany() *ApplicationIdentification_Company {
	if x != nil {
		return x.xxx_hidden_Company
	}
	return nil
}

func (x *ApplicationIdentification) GetControl() *ApplicationIdentification_Control {
	if x != nil {
		return x.xxx_hidden_Control
	}
	return nil
}

func (x *ApplicationIdentification) SetCardType(v CardType) {
	x.xxx_hidden_CardType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *ApplicationIdentification) SetTypeOfTachographCardId(v v1.EquipmentType) {
	x.xxx_hidden_TypeOfTachographCardId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *ApplicationIdentification) SetCardStructureVersion(v *v1.CardStructureVersion) {
	x.xxx_hidden_CardStructureVersion = v
}

func (x *ApplicationIdentification) SetDriver(v *ApplicationIdentification_Driver) {
	x.xxx_hidden_Driver = v
}

func (x *ApplicationIdentification) SetWorkshop(v *ApplicationIdentification_Workshop) {
	x.xxx_hidden_Workshop = v
}

func (x *ApplicationIdentification) SetCompany(v *ApplicationIdentification_Company) {
	x.xxx_hidden_Company = v
}

func (x *ApplicationIdentification) SetControl(v *ApplicationIdentification_Control) {
	x.xxx_hidden_Control = v
}

func (x *ApplicationIdentification) HasCardType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ApplicationIdentification) HasTypeOfTachographCardId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ApplicationIdentification) HasCardStructureVersion() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardStructureVersion != nil
}

func (x *ApplicationIdentification) HasDriver() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Driver != nil
}

func (x *ApplicationIdentification) HasWorkshop() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Workshop != nil
}

func (x *ApplicationIdentification) HasCompany() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Company != nil
}

func (x *ApplicationIdentification) HasControl() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Control != nil
}

func (x *ApplicationIdentification) ClearCardType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CardType = CardType_CARD_TYPE_UNSPECIFIED
}

func (x *ApplicationIdentification) ClearTypeOfTachographCardId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_TypeOfTachographCardId = v1.EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED
}

func (x *ApplicationIdentification) ClearCardStructureVersion() {
	x.xxx_hidden_CardStructureVersion = nil
}

func (x *ApplicationIdentification) ClearDriver() {
	x.xxx_hidden_Driver = nil
}

func (x *ApplicationIdentification) ClearWorkshop() {
	x.xxx_hidden_Workshop = nil
}

func (x *ApplicationIdentification) ClearCompany() {
	x.xxx_hidden_Company = nil
}

func (x *ApplicationIdentification) ClearControl() {
	x.xxx_hidden_Control = nil
}

type ApplicationIdentification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The type of card this data is from.
	CardType *CardType
	// The type of tachograph card.
	//
	// See Data Dictionary, Section 2.67, `EquipmentType`.
	// ASN.1 definition:
	//
	//	EquipmentType ::= INTEGER (0..255)
	TypeOfTachographCardId *v1.EquipmentType
	// The version of the card structure.
	//
	// See Data Dictionary, Section 2.36, `CardStructureVersion`.
	// ASN.1 definition:
	//
	//	CardStructureVersion ::= OCTET STRING (SIZE (2))
	CardStructureVersion *v1.CardStructureVersion
	// Populated if `card_type` is `DRIVER_CARD`.
	Driver *ApplicationIdentification_Driver
	// Populated if `card_type` is `WORKSHOP_CARD`.
	Workshop *ApplicationIdentification_Workshop
	// Populated if `card_type` is `COMPANY_CARD`.
	Company *ApplicationIdentification_Company
	// Populated if `card_type` is `CONTROL_CARD`.
	Control *ApplicationIdentification_Control
}

func (b0 ApplicationIdentification_builder) Build() *ApplicationIdentification {
	m0 := &ApplicationIdentification{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CardType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_CardType = *b.CardType
	}
	if b.TypeOfTachographCardId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_TypeOfTachographCardId = *b.TypeOfTachographCardId
	}
	x.xxx_hidden_CardStructureVersion = b.CardStructureVersion
	x.xxx_hidden_Driver = b.Driver
	x.xxx_hidden_Workshop = b.Workshop
	x.xxx_hidden_Company = b.Company
	x.xxx_hidden_Control = b.Control
	return m0
}

// Data for a driver card. Populated if `card_type` is `DRIVER_CARD`.
// See Data Dictionary, Section 2.61, `DriverCardApplicationIdentification`.
type ApplicationIdentification_Driver struct {
	state                                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_EventsPerTypeCount            int32                  `protobuf:"varint,1,opt,name=events_per_type_count,json=eventsPerTypeCount"`
	xxx_hidden_FaultsPerTypeCount            int32                  `protobuf:"varint,2,opt,name=faults_per_type_count,json=faultsPerTypeCount"`
	xxx_hidden_ActivityStructureLength       int32                  `protobuf:"varint,3,opt,name=activity_structure_length,json=activityStructureLength"`
	xxx_hidden_CardVehicleRecordsCount       int32                  `protobuf:"varint,4,opt,name=card_vehicle_records_count,json=cardVehicleRecordsCount"`
	xxx_hidden_CardPlaceRecordsCount         int32                  `protobuf:"varint,5,opt,name=card_place_records_count,json=cardPlaceRecordsCount"`
	xxx_hidden_GnssAdRecordsCount            int32                  `protobuf:"varint,6,opt,name=gnss_ad_records_count,json=gnssAdRecordsCount"`
	xxx_hidden_SpecificConditionRecordsCount int32                  `protobuf:"varint,7,opt,name=specific_condition_records_count,json=specificConditionRecordsCount"`
	xxx_hidden_CardVehicleUnitRecordsCount   int32                  `protobuf:"varint,8,opt,name=card_vehicle_unit_records_count,json=cardVehicleUnitRecordsCount"`
	xxx_hidden_Signature                     []byte                 `protobuf:"bytes,9,opt,name=signature"`
	XXX_raceDetectHookData                   protoimpl.RaceDetectHookData
	XXX_presence                             [1]uint32
	unknownFields                            protoimpl.UnknownFields
	sizeCache                                protoimpl.SizeCache
}

func (x *ApplicationIdentification_Driver) Reset() {
	*x = ApplicationIdentification_Driver{}
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationIdentification_Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationIdentification_Driver) ProtoMessage() {}

func (x *ApplicationIdentification_Driver) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ApplicationIdentification_Driver) GetEventsPerTypeCount() int32 {
	if x != nil {
		return x.xxx_hidden_EventsPerTypeCount
	}
	return 0
}

func (x *ApplicationIdentification_Driver) GetFaultsPerTypeCount() int32 {
	if x != nil {
		return x.xxx_hidden_FaultsPerTypeCount
	}
	return 0
}

func (x *ApplicationIdentification_Driver) GetActivityStructureLength() int32 {
	if x != nil {
		return x.xxx_hidden_ActivityStructureLength
	}
	return 0
}

func (x *ApplicationIdentification_Driver) GetCardVehicleRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CardVehicleRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Driver) GetCardPlaceRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CardPlaceRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Driver) GetGnssAdRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_GnssAdRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Driver) GetSpecificConditionRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_SpecificConditionRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Driver) GetCardVehicleUnitRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CardVehicleUnitRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Driver) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *ApplicationIdentification_Driver) SetEventsPerTypeCount(v int32) {
	x.xxx_hidden_EventsPerTypeCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *ApplicationIdentification_Driver) SetFaultsPerTypeCount(v int32) {
	x.xxx_hidden_FaultsPerTypeCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 9)
}

func (x *ApplicationIdentification_Driver) SetActivityStructureLength(v int32) {
	x.xxx_hidden_ActivityStructureLength = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *ApplicationIdentification_Driver) SetCardVehicleRecordsCount(v int32) {
	x.xxx_hidden_CardVehicleRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *ApplicationIdentification_Driver) SetCardPlaceRecordsCount(v int32) {
	x.xxx_hidden_CardPlaceRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 9)
}

func (x *ApplicationIdentification_Driver) SetGnssAdRecordsCount(v int32) {
	x.xxx_hidden_GnssAdRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 9)
}

func (x *ApplicationIdentification_Driver) SetSpecificConditionRecordsCount(v int32) {
	x.xxx_hidden_SpecificConditionRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 9)
}

func (x *ApplicationIdentification_Driver) SetCardVehicleUnitRecordsCount(v int32) {
	x.xxx_hidden_CardVehicleUnitRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 9)
}

func (x *ApplicationIdentification_Driver) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 9)
}

func (x *ApplicationIdentification_Driver) HasEventsPerTypeCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ApplicationIdentification_Driver) HasFaultsPerTypeCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ApplicationIdentification_Driver) HasActivityStructureLength() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ApplicationIdentification_Driver) HasCardVehicleRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ApplicationIdentification_Driver) HasCardPlaceRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ApplicationIdentification_Driver) HasGnssAdRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ApplicationIdentification_Driver) HasSpecificConditionRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *ApplicationIdentification_Driver) HasCardVehicleUnitRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *ApplicationIdentification_Driver) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *ApplicationIdentification_Driver) ClearEventsPerTypeCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_EventsPerTypeCount = 0
}

func (x *ApplicationIdentification_Driver) ClearFaultsPerTypeCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_FaultsPerTypeCount = 0
}

func (x *ApplicationIdentification_Driver) ClearActivityStructureLength() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ActivityStructureLength = 0
}

func (x *ApplicationIdentification_Driver) ClearCardVehicleRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_CardVehicleRecordsCount = 0
}

func (x *ApplicationIdentification_Driver) ClearCardPlaceRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_CardPlaceRecordsCount = 0
}

func (x *ApplicationIdentification_Driver) ClearGnssAdRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_GnssAdRecordsCount = 0
}

func (x *ApplicationIdentification_Driver) ClearSpecificConditionRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_SpecificConditionRecordsCount = 0
}

func (x *ApplicationIdentification_Driver) ClearCardVehicleUnitRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_CardVehicleUnitRecordsCount = 0
}

func (x *ApplicationIdentification_Driver) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Signature = nil
}

type ApplicationIdentification_Driver_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The number of events per type the card can record.
	//
	// See Data Dictionary, Section 2.109, `NoOfEventsPerType`.
	// ASN.1 definition:
	//
	//	NoOfEventsPerType ::= INTEGER(0..255)
	EventsPerTypeCount *int32
	// The number of faults per type the card can record.
	//
	// See Data Dictionary, Section 2.110, `NoOfFaultsPerType`.
	// ASN.1 definition:
	//
	//	NoOfFaultsPerType ::= INTEGER(0..255)
	FaultsPerTypeCount *int32
	// The number of bytes available for storing activity records.
	//
	// See Data Dictionary, Section 2.10, `CardActivityLengthRange`.
	// ASN.1 definition:
	//
	//	CardActivityLengthRange ::= INTEGER(0..2^16-1)
	ActivityStructureLength *int32
	// The number of vehicle records the card can contain.
	//
	// See Data Dictionary, Section 2.105, `NoOfCardVehicleRecords`.
	// ASN.1 definition:
	//
	//	NoOfCardVehicleRecords ::= INTEGER(0..65535)
	CardVehicleRecordsCount *int32
	// The number of place records the card can store.
	//
	// See Data Dictionary, Section 2.104, `NoOfCardPlaceRecords`.
	// ASN.1 definition:
	//
	//	NoOfCardPlaceRecords ::= INTEGER(0..65535)
	CardPlaceRecordsCount *int32
	// The number of GNSS accumulated driving records the card can store.
	//
	// See Data Dictionary, Section 2.111, `NoOfGNSSADRecords`.
	// ASN.1 definition:
	//
	//	NoOfGNSSADRecords ::= INTEGER(0..65535)
	GnssAdRecordsCount *int32
	// The number of specific condition records the card can store.
	//
	// See Data Dictionary, Section 2.112, `NoOfSpecificConditionRecords`.
	// ASN.1 definition:
	//
	//	NoOfSpecificConditionRecords ::= INTEGER(0..255)
	SpecificConditionRecordsCount *int32
	// The number of vehicle units used records the card can store.
	//
	// See Data Dictionary, Section 2.106, `NoOfCardVehicleUnitRecords`.
	// ASN.1 definition:
	//
	//	NoOfCardVehicleUnitRecords ::= INTEGER(0..65535)
	CardVehicleUnitRecordsCount *int32
	// Digital signature for the EF_Application_Identification file content.
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	// ASN.1 definition:
	//
	//	Signature ::= OCTET STRING (SIZE(128 for Gen1))
	Signature []byte
}

func (b0 ApplicationIdentification_Driver_builder) Build() *ApplicationIdentification_Driver {
	m0 := &ApplicationIdentification_Driver{}
	b, x := &b0, m0
	_, _ = b, x
	if b.EventsPerTypeCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_EventsPerTypeCount = *b.EventsPerTypeCount
	}
	if b.FaultsPerTypeCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 9)
		x.xxx_hidden_FaultsPerTypeCount = *b.FaultsPerTypeCount
	}
	if b.ActivityStructureLength != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_ActivityStructureLength = *b.ActivityStructureLength
	}
	if b.CardVehicleRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_CardVehicleRecordsCount = *b.CardVehicleRecordsCount
	}
	if b.CardPlaceRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 9)
		x.xxx_hidden_CardPlaceRecordsCount = *b.CardPlaceRecordsCount
	}
	if b.GnssAdRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 9)
		x.xxx_hidden_GnssAdRecordsCount = *b.GnssAdRecordsCount
	}
	if b.SpecificConditionRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 9)
		x.xxx_hidden_SpecificConditionRecordsCount = *b.SpecificConditionRecordsCount
	}
	if b.CardVehicleUnitRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 9)
		x.xxx_hidden_CardVehicleUnitRecordsCount = *b.CardVehicleUnitRecordsCount
	}
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 9)
		x.xxx_hidden_Signature = b.Signature
	}
	return m0
}

// Data for a workshop card. Populated if `card_type` is `WORKSHOP_CARD`.
// See Data Dictionary, Section 2.234, `WorkshopCardApplicationIdentification`.
type ApplicationIdentification_Workshop struct {
	state                              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_EventsPerTypeCount      int32                  `protobuf:"varint,1,opt,name=events_per_type_count,json=eventsPerTypeCount"`
	xxx_hidden_FaultsPerTypeCount      int32                  `protobuf:"varint,2,opt,name=faults_per_type_count,json=faultsPerTypeCount"`
	xxx_hidden_ActivityStructureLength int32                  `protobuf:"varint,3,opt,name=activity_structure_length,json=activityStructureLength"`
	xxx_hidden_CardVehicleRecordsCount int32                  `protobuf:"varint,4,opt,name=card_vehicle_records_count,json=cardVehicleRecordsCount"`
	xxx_hidden_CardPlaceRecordsCount   int32                  `protobuf:"varint,5,opt,name=card_place_records_count,json=cardPlaceRecordsCount"`
	xxx_hidden_CalibrationRecordsCount int32                  `protobuf:"varint,6,opt,name=calibration_records_count,json=calibrationRecordsCount"`
	XXX_raceDetectHookData             protoimpl.RaceDetectHookData
	XXX_presence                       [1]uint32
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *ApplicationIdentification_Workshop) Reset() {
	*x = ApplicationIdentification_Workshop{}
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationIdentification_Workshop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationIdentification_Workshop) ProtoMessage() {}

func (x *ApplicationIdentification_Workshop) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ApplicationIdentification_Workshop) GetEventsPerTypeCount() int32 {
	if x != nil {
		return x.xxx_hidden_EventsPerTypeCount
	}
	return 0
}

func (x *ApplicationIdentification_Workshop) GetFaultsPerTypeCount() int32 {
	if x != nil {
		return x.xxx_hidden_FaultsPerTypeCount
	}
	return 0
}

func (x *ApplicationIdentification_Workshop) GetActivityStructureLength() int32 {
	if x != nil {
		return x.xxx_hidden_ActivityStructureLength
	}
	return 0
}

func (x *ApplicationIdentification_Workshop) GetCardVehicleRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CardVehicleRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Workshop) GetCardPlaceRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CardPlaceRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Workshop) GetCalibrationRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CalibrationRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Workshop) SetEventsPerTypeCount(v int32) {
	x.xxx_hidden_EventsPerTypeCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *ApplicationIdentification_Workshop) SetFaultsPerTypeCount(v int32) {
	x.xxx_hidden_FaultsPerTypeCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *ApplicationIdentification_Workshop) SetActivityStructureLength(v int32) {
	x.xxx_hidden_ActivityStructureLength = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *ApplicationIdentification_Workshop) SetCardVehicleRecordsCount(v int32) {
	x.xxx_hidden_CardVehicleRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *ApplicationIdentification_Workshop) SetCardPlaceRecordsCount(v int32) {
	x.xxx_hidden_CardPlaceRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *ApplicationIdentification_Workshop) SetCalibrationRecordsCount(v int32) {
	x.xxx_hidden_CalibrationRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *ApplicationIdentification_Workshop) HasEventsPerTypeCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ApplicationIdentification_Workshop) HasFaultsPerTypeCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ApplicationIdentification_Workshop) HasActivityStructureLength() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ApplicationIdentification_Workshop) HasCardVehicleRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ApplicationIdentification_Workshop) HasCardPlaceRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ApplicationIdentification_Workshop) HasCalibrationRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ApplicationIdentification_Workshop) ClearEventsPerTypeCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_EventsPerTypeCount = 0
}

func (x *ApplicationIdentification_Workshop) ClearFaultsPerTypeCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_FaultsPerTypeCount = 0
}

func (x *ApplicationIdentification_Workshop) ClearActivityStructureLength() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ActivityStructureLength = 0
}

func (x *ApplicationIdentification_Workshop) ClearCardVehicleRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_CardVehicleRecordsCount = 0
}

func (x *ApplicationIdentification_Workshop) ClearCardPlaceRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_CardPlaceRecordsCount = 0
}

func (x *ApplicationIdentification_Workshop) ClearCalibrationRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_CalibrationRecordsCount = 0
}

type ApplicationIdentification_Workshop_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The number of events per type the card can record.
	//
	// See Data Dictionary, Section 2.109, `NoOfEventsPerType`.
	// ASN.1 definition:
	//
	//	NoOfEventsPerType ::= INTEGER(0..255)
	EventsPerTypeCount *int32
	// The number of faults per type the card can record.
	//
	// See Data Dictionary, Section 2.110, `NoOfFaultsPerType`.
	// ASN.1 definition:
	//
	//	NoOfFaultsPerType ::= INTEGER(0..255)
	FaultsPerTypeCount *int32
	// The number of bytes available for storing activity records.
	//
	// See Data Dictionary, Section 2.10, `CardActivityLengthRange`.
	// ASN.1 definition:
	//
	//	CardActivityLengthRange ::= INTEGER(0..2^16-1)
	ActivityStructureLength *int32
	// The number of vehicle records the card can contain.
	//
	// See Data Dictionary, Section 2.105, `NoOfCardVehicleRecords`.
	// ASN.1 definition:
	//
	//	NoOfCardVehicleRecords ::= INTEGER(0..65535)
	CardVehicleRecordsCount *int32
	// The number of place records the card can store.
	//
	// See Data Dictionary, Section 2.104, `NoOfCardPlaceRecords`.
	// ASN.1 definition:
	//
	//	NoOfCardPlaceRecords ::= INTEGER(0..65535)
	CardPlaceRecordsCount *int32
	// The number of calibration records the card can store.
	//
	// See Data Dictionary, Section 2.102, `NoOfCalibrationRecords`.
	// ASN.1 definition:
	//
	//	NoOfCalibrationRecords ::= INTEGER(0..255)
	CalibrationRecordsCount *int32
}

func (b0 ApplicationIdentification_Workshop_builder) Build() *ApplicationIdentification_Workshop {
	m0 := &ApplicationIdentification_Workshop{}
	b, x := &b0, m0
	_, _ = b, x
	if b.EventsPerTypeCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_EventsPerTypeCount = *b.EventsPerTypeCount
	}
	if b.FaultsPerTypeCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_FaultsPerTypeCount = *b.FaultsPerTypeCount
	}
	if b.ActivityStructureLength != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_ActivityStructureLength = *b.ActivityStructureLength
	}
	if b.CardVehicleRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_CardVehicleRecordsCount = *b.CardVehicleRecordsCount
	}
	if b.CardPlaceRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_CardPlaceRecordsCount = *b.CardPlaceRecordsCount
	}
	if b.CalibrationRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_CalibrationRecordsCount = *b.CalibrationRecordsCount
	}
	return m0
}

// Data for a company card. Populated if `card_type` is `COMPANY_CARD`.
// See Data Dictionary, Section 2.48, `CompanyCardApplicationIdentification`.
type ApplicationIdentification_Company struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CompanyActivityRecordsCount int32                  `protobuf:"varint,1,opt,name=company_activity_records_count,json=companyActivityRecordsCount"`
	XXX_raceDetectHookData                 protoimpl.RaceDetectHookData
	XXX_presence                           [1]uint32
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *ApplicationIdentification_Company) Reset() {
	*x = ApplicationIdentification_Company{}
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationIdentification_Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationIdentification_Company) ProtoMessage() {}

func (x *ApplicationIdentification_Company) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ApplicationIdentification_Company) GetCompanyActivityRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CompanyActivityRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Company) SetCompanyActivityRecordsCount(v int32) {
	x.xxx_hidden_CompanyActivityRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *ApplicationIdentification_Company) HasCompanyActivityRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ApplicationIdentification_Company) ClearCompanyActivityRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CompanyActivityRecordsCount = 0
}

type ApplicationIdentification_Company_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The number of company activity records the card can store.
	//
	// See Data Dictionary, Section 2.107, `NoOfCompanyActivityRecords`.
	// ASN.1 definition:
	//
	//	NoOfCompanyActivityRecords ::= INTEGER(0..65535)
	CompanyActivityRecordsCount *int32
}

func (b0 ApplicationIdentification_Company_builder) Build() *ApplicationIdentification_Company {
	m0 := &ApplicationIdentification_Company{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CompanyActivityRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_CompanyActivityRecordsCount = *b.CompanyActivityRecordsCount
	}
	return m0
}

// Data for a control card. Populated if `card_type` is `CONTROL_CARD`.
// See Data Dictionary, Section 2.50, `ControlCardApplicationIdentification`.
type ApplicationIdentification_Control struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ControlActivityRecordsCount int32                  `protobuf:"varint,1,opt,name=control_activity_records_count,json=controlActivityRecordsCount"`
	XXX_raceDetectHookData                 protoimpl.RaceDetectHookData
	XXX_presence                           [1]uint32
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *ApplicationIdentification_Control) Reset() {
	*x = ApplicationIdentification_Control{}
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationIdentification_Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationIdentification_Control) ProtoMessage() {}

func (x *ApplicationIdentification_Control) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ApplicationIdentification_Control) GetControlActivityRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_ControlActivityRecordsCount
	}
	return 0
}

func (x *ApplicationIdentification_Control) SetControlActivityRecordsCount(v int32) {
	x.xxx_hidden_ControlActivityRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *ApplicationIdentification_Control) HasControlActivityRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ApplicationIdentification_Control) ClearControlActivityRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ControlActivityRecordsCount = 0
}

type ApplicationIdentification_Control_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The number of control activity records the card can store.
	//
	// See Data Dictionary, Section 2.108, `NoOfControlActivityRecords`.
	// ASN.1 definition:
	//
	//	NoOfControlActivityRecords ::= INTEGER(0..65535)
	ControlActivityRecordsCount *int32
}

func (b0 ApplicationIdentification_Control_builder) Build() *ApplicationIdentification_Control {
	m0 := &ApplicationIdentification_Control{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ControlActivityRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_ControlActivityRecordsCount = *b.ControlActivityRecordsCount
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_application_identification_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_application_identification_proto_rawDesc = "" +
	"\n" +
	"Gwayplatform/connect/tachograph/card/v1/application_identification.proto\x12&wayplatform.connect.tachograph.card.v1\x1a6wayplatform/connect/tachograph/card/v1/card_type.proto\x1aMwayplatform/connect/tachograph/datadictionary/v1/card_structure_version.proto\x1aEwayplatform/connect/tachograph/datadictionary/v1/equipment_type.proto\"\xfd\r\n" +
	"\x19ApplicationIdentification\x12M\n" +
	"\tcard_type\x18\x01 \x01(\x0e20.wayplatform.connect.tachograph.card.v1.CardTypeR\bcardType\x12{\n" +
	"\x1atype_of_tachograph_card_id\x18\x02 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.EquipmentTypeR\x16typeOfTachographCardId\x12|\n" +
	"\x16card_structure_version\x18\x03 \x01(\v2F.wayplatform.connect.tachograph.datadictionary.v1.CardStructureVersionR\x14cardStructureVersion\x12`\n" +
	"\x06driver\x18\x04 \x01(\v2H.wayplatform.connect.tachograph.card.v1.ApplicationIdentification.DriverR\x06driver\x12f\n" +
	"\bworkshop\x18\x05 \x01(\v2J.wayplatform.connect.tachograph.card.v1.ApplicationIdentification.WorkshopR\bworkshop\x12c\n" +
	"\acompany\x18\x06 \x01(\v2I.wayplatform.connect.tachograph.card.v1.ApplicationIdentification.CompanyR\acompany\x12c\n" +
	"\acontrol\x18\a \x01(\v2I.wayplatform.connect.tachograph.card.v1.ApplicationIdentification.ControlR\acontrol\x1a\x80\x04\n" +
	"\x06Driver\x121\n" +
	"\x15events_per_type_count\x18\x01 \x01(\x05R\x12eventsPerTypeCount\x121\n" +
	"\x15faults_per_type_count\x18\x02 \x01(\x05R\x12faultsPerTypeCount\x12:\n" +
	"\x19activity_structure_length\x18\x03 \x01(\x05R\x17activityStructureLength\x12;\n" +
	"\x1acard_vehicle_records_count\x18\x04 \x01(\x05R\x17cardVehicleRecordsCount\x127\n" +
	"\x18card_place_records_count\x18\x05 \x01(\x05R\x15cardPlaceRecordsCount\x121\n" +
	"\x15gnss_ad_records_count\x18\x06 \x01(\x05R\x12gnssAdRecordsCount\x12G\n" +
	" specific_condition_records_count\x18\a \x01(\x05R\x1dspecificConditionRecordsCount\x12D\n" +
	"\x1fcard_vehicle_unit_records_count\x18\b \x01(\x05R\x1bcardVehicleUnitRecordsCount\x12\x1c\n" +
	"\tsignature\x18\t \x01(\fR\tsignature\x1a\xde\x02\n" +
	"\bWorkshop\x121\n" +
	"\x15events_per_type_count\x18\x01 \x01(\x05R\x12eventsPerTypeCount\x121\n" +
	"\x15faults_per_type_count\x18\x02 \x01(\x05R\x12faultsPerTypeCount\x12:\n" +
	"\x19activity_structure_length\x18\x03 \x01(\x05R\x17activityStructureLength\x12;\n" +
	"\x1acard_vehicle_records_count\x18\x04 \x01(\x05R\x17cardVehicleRecordsCount\x127\n" +
	"\x18card_place_records_count\x18\x05 \x01(\x05R\x15cardPlaceRecordsCount\x12:\n" +
	"\x19calibration_records_count\x18\x06 \x01(\x05R\x17calibrationRecordsCount\x1aN\n" +
	"\aCompany\x12C\n" +
	"\x1ecompany_activity_records_count\x18\x01 \x01(\x05R\x1bcompanyActivityRecordsCount\x1aN\n" +
	"\aControl\x12C\n" +
	"\x1econtrol_activity_records_count\x18\x01 \x01(\x05R\x1bcontrolActivityRecordsCountB\xeb\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x1eApplicationIdentificationProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_wayplatform_connect_tachograph_card_v1_application_identification_proto_goTypes = []any{
	(*ApplicationIdentification)(nil),          // 0: wayplatform.connect.tachograph.card.v1.ApplicationIdentification
	(*ApplicationIdentification_Driver)(nil),   // 1: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.Driver
	(*ApplicationIdentification_Workshop)(nil), // 2: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.Workshop
	(*ApplicationIdentification_Company)(nil),  // 3: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.Company
	(*ApplicationIdentification_Control)(nil),  // 4: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.Control
	(CardType)(0),                   // 5: wayplatform.connect.tachograph.card.v1.CardType
	(v1.EquipmentType)(0),           // 6: wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
	(*v1.CardStructureVersion)(nil), // 7: wayplatform.connect.tachograph.datadictionary.v1.CardStructureVersion
}
var file_wayplatform_connect_tachograph_card_v1_application_identification_proto_depIdxs = []int32{
	5, // 0: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.card_type:type_name -> wayplatform.connect.tachograph.card.v1.CardType
	6, // 1: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.type_of_tachograph_card_id:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
	7, // 2: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.card_structure_version:type_name -> wayplatform.connect.tachograph.datadictionary.v1.CardStructureVersion
	1, // 3: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.driver:type_name -> wayplatform.connect.tachograph.card.v1.ApplicationIdentification.Driver
	2, // 4: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.workshop:type_name -> wayplatform.connect.tachograph.card.v1.ApplicationIdentification.Workshop
	3, // 5: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.company:type_name -> wayplatform.connect.tachograph.card.v1.ApplicationIdentification.Company
	4, // 6: wayplatform.connect.tachograph.card.v1.ApplicationIdentification.control:type_name -> wayplatform.connect.tachograph.card.v1.ApplicationIdentification.Control
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_application_identification_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_application_identification_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_application_identification_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_card_v1_card_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_application_identification_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_application_identification_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_application_identification_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_application_identification_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_application_identification_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_application_identification_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_application_identification_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_application_identification_proto_depIdxs = nil
}
