// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/calibration_add_data.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_Calibration_Add_Data file (Gen2v2).
//
// The file structure is specified in Appendix 2, Section 4.3.2.
//
//	EF Calibration_Add_Data
//	└─WorkshopCardCalibrationAddData
//
// The data type `WorkshopCardCalibrationAddData` is specified in the Data Dictionary, Section 2.234b.
//
// ASN.1 Specification:
//
//	WorkshopCardCalibrationAddData ::= SEQUENCE {
//	    calibrationPointerNewestRecord INTEGER(0..NoOfCalibrationRecords-1),
//	    workshopCardCalibrationAddDataRecords SET SIZE(NoOfCalibrationRecords) OF WorkshopCardCalibrationAddDataRecord
//	}
type CalibrationAddData struct {
	state                        protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_NewestRecordIndex int32                         `protobuf:"varint,1,opt,name=newest_record_index,json=newestRecordIndex"`
	xxx_hidden_Records           *[]*CalibrationAddData_Record `protobuf:"bytes,2,rep,name=records"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *CalibrationAddData) Reset() {
	*x = CalibrationAddData{}
	mi := &file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalibrationAddData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrationAddData) ProtoMessage() {}

func (x *CalibrationAddData) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CalibrationAddData) GetNewestRecordIndex() int32 {
	if x != nil {
		return x.xxx_hidden_NewestRecordIndex
	}
	return 0
}

func (x *CalibrationAddData) GetRecords() []*CalibrationAddData_Record {
	if x != nil {
		if x.xxx_hidden_Records != nil {
			return *x.xxx_hidden_Records
		}
	}
	return nil
}

func (x *CalibrationAddData) SetNewestRecordIndex(v int32) {
	x.xxx_hidden_NewestRecordIndex = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *CalibrationAddData) SetRecords(v []*CalibrationAddData_Record) {
	x.xxx_hidden_Records = &v
}

func (x *CalibrationAddData) HasNewestRecordIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CalibrationAddData) ClearNewestRecordIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_NewestRecordIndex = 0
}

type CalibrationAddData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Index of the last updated record.
	// Corresponds to `calibrationPointerNewestRecord`.
	//
	// See Data Dictionary, Section 2.234b.
	// ASN.1 Specification:
	//
	//	INTEGER(0..NoOfCalibrationRecords-1)
	NewestRecordIndex *int32
	// The set of additional calibration data records.
	// Corresponds to `workshopCardCalibrationAddDataRecords`.
	Records []*CalibrationAddData_Record
}

func (b0 CalibrationAddData_builder) Build() *CalibrationAddData {
	m0 := &CalibrationAddData{}
	b, x := &b0, m0
	_, _ = b, x
	if b.NewestRecordIndex != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_NewestRecordIndex = *b.NewestRecordIndex
	}
	x.xxx_hidden_Records = &b.Records
	return m0
}

// Represents a single additional data record for a calibration.
//
// The data type `WorkshopCardCalibrationAddDataRecord` is specified in the Data Dictionary, Section 2.234c.
//
// ASN.1 Specification:
//
//	WorkshopCardCalibrationAddDataRecord ::= SEQUENCE {
//	    oldTimeValue TimeReal,
//	    vehicleIdentificationNumber VehicleIdentificationNumber,
//	    byDefaultLoadType LoadType,
//	    calibrationCountry NationNumeric,
//	    calibrationCountryTimestamp TimeReal
//	}
type CalibrationAddData_Record struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_OldTime                     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=old_time,json=oldTime"`
	xxx_hidden_VehicleIdentificationNumber *v1.StringValue        `protobuf:"bytes,2,opt,name=vehicle_identification_number,json=vehicleIdentificationNumber"`
	xxx_hidden_ByDefaultLoadType           v1.LoadType            `protobuf:"varint,3,opt,name=by_default_load_type,json=byDefaultLoadType,enum=wayplatform.connect.tachograph.datadictionary.v1.LoadType"`
	xxx_hidden_CalibrationCountry          v1.NationNumeric       `protobuf:"varint,4,opt,name=calibration_country,json=calibrationCountry,enum=wayplatform.connect.tachograph.datadictionary.v1.NationNumeric"`
	xxx_hidden_CalibrationCountryTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=calibration_country_timestamp,json=calibrationCountryTimestamp"`
	XXX_raceDetectHookData                 protoimpl.RaceDetectHookData
	XXX_presence                           [1]uint32
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *CalibrationAddData_Record) Reset() {
	*x = CalibrationAddData_Record{}
	mi := &file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalibrationAddData_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrationAddData_Record) ProtoMessage() {}

func (x *CalibrationAddData_Record) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CalibrationAddData_Record) GetOldTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_OldTime
	}
	return nil
}

func (x *CalibrationAddData_Record) GetVehicleIdentificationNumber() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_VehicleIdentificationNumber
	}
	return nil
}

func (x *CalibrationAddData_Record) GetByDefaultLoadType() v1.LoadType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_ByDefaultLoadType
		}
	}
	return v1.LoadType(0)
}

func (x *CalibrationAddData_Record) GetCalibrationCountry() v1.NationNumeric {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_CalibrationCountry
		}
	}
	return v1.NationNumeric(0)
}

func (x *CalibrationAddData_Record) GetCalibrationCountryTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CalibrationCountryTimestamp
	}
	return nil
}

func (x *CalibrationAddData_Record) SetOldTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_OldTime = v
}

func (x *CalibrationAddData_Record) SetVehicleIdentificationNumber(v *v1.StringValue) {
	x.xxx_hidden_VehicleIdentificationNumber = v
}

func (x *CalibrationAddData_Record) SetByDefaultLoadType(v v1.LoadType) {
	x.xxx_hidden_ByDefaultLoadType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *CalibrationAddData_Record) SetCalibrationCountry(v v1.NationNumeric) {
	x.xxx_hidden_CalibrationCountry = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *CalibrationAddData_Record) SetCalibrationCountryTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_CalibrationCountryTimestamp = v
}

func (x *CalibrationAddData_Record) HasOldTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OldTime != nil
}

func (x *CalibrationAddData_Record) HasVehicleIdentificationNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VehicleIdentificationNumber != nil
}

func (x *CalibrationAddData_Record) HasByDefaultLoadType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CalibrationAddData_Record) HasCalibrationCountry() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CalibrationAddData_Record) HasCalibrationCountryTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CalibrationCountryTimestamp != nil
}

func (x *CalibrationAddData_Record) ClearOldTime() {
	x.xxx_hidden_OldTime = nil
}

func (x *CalibrationAddData_Record) ClearVehicleIdentificationNumber() {
	x.xxx_hidden_VehicleIdentificationNumber = nil
}

func (x *CalibrationAddData_Record) ClearByDefaultLoadType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ByDefaultLoadType = v1.LoadType_LOAD_TYPE_UNSPECIFIED
}

func (x *CalibrationAddData_Record) ClearCalibrationCountry() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_CalibrationCountry = v1.NationNumeric_NATION_NUMERIC_UNSPECIFIED
}

func (x *CalibrationAddData_Record) ClearCalibrationCountryTimestamp() {
	x.xxx_hidden_CalibrationCountryTimestamp = nil
}

type CalibrationAddData_Record_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The old time value before adjustment.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Specification:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	OldTime *timestamppb.Timestamp
	// The Vehicle Identification Number (VIN).
	//
	// See Data Dictionary, Section 2.164, `VehicleIdentificationNumber`.
	// ASN.1 Specification:
	//
	//	VehicleIdentificationNumber ::= IA5String(SIZE(17))
	VehicleIdentificationNumber *v1.StringValue
	// The default load type.
	//
	// See Data Dictionary, Section 2.90a, `LoadType`.
	// ASN.1 Specification:
	//
	//	LoadType ::= INTEGER {
	//	    not-defined(0), passengers(1), goods(2)
	//	} (0..255)
	ByDefaultLoadType *v1.LoadType
	// The country where the calibration was performed.
	//
	// See Data Dictionary, Section 2.101, `NationNumeric`.
	// ASN.1 Specification:
	//
	//	NationNumeric ::= INTEGER(0..255)
	CalibrationCountry *v1.NationNumeric
	// The timestamp when the calibration country was recorded.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Specification:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	CalibrationCountryTimestamp *timestamppb.Timestamp
}

func (b0 CalibrationAddData_Record_builder) Build() *CalibrationAddData_Record {
	m0 := &CalibrationAddData_Record{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_OldTime = b.OldTime
	x.xxx_hidden_VehicleIdentificationNumber = b.VehicleIdentificationNumber
	if b.ByDefaultLoadType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_ByDefaultLoadType = *b.ByDefaultLoadType
	}
	if b.CalibrationCountry != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_CalibrationCountry = *b.CalibrationCountry
	}
	x.xxx_hidden_CalibrationCountryTimestamp = b.CalibrationCountryTimestamp
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_rawDesc = "" +
	"\n" +
	"Awayplatform/connect/tachograph/card/v1/calibration_add_data.proto\x12&wayplatform.connect.tachograph.card.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a@wayplatform/connect/tachograph/datadictionary/v1/load_type.proto\x1aCwayplatform/connect/tachograph/datadictionary/v1/string_value.proto\x1aEwayplatform/connect/tachograph/datadictionary/v1/nation_numeric.proto\"\xa6\x05\n" +
	"\x12CalibrationAddData\x12.\n" +
	"\x13newest_record_index\x18\x01 \x01(\x05R\x11newestRecordIndex\x12[\n" +
	"\arecords\x18\x02 \x03(\v2A.wayplatform.connect.tachograph.card.v1.CalibrationAddData.RecordR\arecords\x1a\x82\x04\n" +
	"\x06Record\x125\n" +
	"\bold_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\aoldTime\x12\x81\x01\n" +
	"\x1dvehicle_identification_number\x18\x02 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x1bvehicleIdentificationNumber\x12k\n" +
	"\x14by_default_load_type\x18\x03 \x01(\x0e2:.wayplatform.connect.tachograph.datadictionary.v1.LoadTypeR\x11byDefaultLoadType\x12p\n" +
	"\x13calibration_country\x18\x04 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.NationNumericR\x12calibrationCountry\x12^\n" +
	"\x1dcalibration_country_timestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x1bcalibrationCountryTimestampB\xe4\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x17CalibrationAddDataProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_goTypes = []any{
	(*CalibrationAddData)(nil),        // 0: wayplatform.connect.tachograph.card.v1.CalibrationAddData
	(*CalibrationAddData_Record)(nil), // 1: wayplatform.connect.tachograph.card.v1.CalibrationAddData.Record
	(*timestamppb.Timestamp)(nil),     // 2: google.protobuf.Timestamp
	(*v1.StringValue)(nil),            // 3: wayplatform.connect.tachograph.datadictionary.v1.StringValue
	(v1.LoadType)(0),                  // 4: wayplatform.connect.tachograph.datadictionary.v1.LoadType
	(v1.NationNumeric)(0),             // 5: wayplatform.connect.tachograph.datadictionary.v1.NationNumeric
}
var file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.CalibrationAddData.records:type_name -> wayplatform.connect.tachograph.card.v1.CalibrationAddData.Record
	2, // 1: wayplatform.connect.tachograph.card.v1.CalibrationAddData.Record.old_time:type_name -> google.protobuf.Timestamp
	3, // 2: wayplatform.connect.tachograph.card.v1.CalibrationAddData.Record.vehicle_identification_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	4, // 3: wayplatform.connect.tachograph.card.v1.CalibrationAddData.Record.by_default_load_type:type_name -> wayplatform.connect.tachograph.datadictionary.v1.LoadType
	5, // 4: wayplatform.connect.tachograph.card.v1.CalibrationAddData.Record.calibration_country:type_name -> wayplatform.connect.tachograph.datadictionary.v1.NationNumeric
	2, // 5: wayplatform.connect.tachograph.card.v1.CalibrationAddData.Record.calibration_country_timestamp:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_calibration_add_data_proto_depIdxs = nil
}
