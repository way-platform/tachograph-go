// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/driver_card_file.proto

package cardv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the fully parsed content of a driver card file.
//
// This message is the result of the second pass of parsing, where the raw TLV
// records from a `RawCardFile` are interpreted and structured into their
// semantic meaning according to the driver card specification.
// See regulation document Appendix 2, Section 4.2.
type DriverCardFile struct {
	state                                  protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Icc                         *Icc                         `protobuf:"bytes,1,opt,name=icc"`
	xxx_hidden_Ic                          *Ic                          `protobuf:"bytes,2,opt,name=ic"`
	xxx_hidden_ApplicationIdentification   *ApplicationIdentification   `protobuf:"bytes,3,opt,name=application_identification,json=applicationIdentification"`
	xxx_hidden_Identification              *Identification              `protobuf:"bytes,4,opt,name=identification"`
	xxx_hidden_DrivingLicenceInfo          *DrivingLicenceInfo          `protobuf:"bytes,6,opt,name=driving_licence_info,json=drivingLicenceInfo"`
	xxx_hidden_EventsData                  *EventsData                  `protobuf:"bytes,7,opt,name=events_data,json=eventsData"`
	xxx_hidden_FaultsData                  *FaultsData                  `protobuf:"bytes,8,opt,name=faults_data,json=faultsData"`
	xxx_hidden_DriverActivityData          *DriverActivityData          `protobuf:"bytes,9,opt,name=driver_activity_data,json=driverActivityData"`
	xxx_hidden_VehiclesUsed                *VehiclesUsed                `protobuf:"bytes,10,opt,name=vehicles_used,json=vehiclesUsed"`
	xxx_hidden_Places                      *Places                      `protobuf:"bytes,11,opt,name=places"`
	xxx_hidden_CurrentUsage                *CurrentUsage                `protobuf:"bytes,12,opt,name=current_usage,json=currentUsage"`
	xxx_hidden_ControlActivityData         *ControlActivityData         `protobuf:"bytes,13,opt,name=control_activity_data,json=controlActivityData"`
	xxx_hidden_SpecificConditions          *SpecificConditions          `protobuf:"bytes,14,opt,name=specific_conditions,json=specificConditions"`
	xxx_hidden_CardDownloadDriver          *CardDownloadDriver          `protobuf:"bytes,15,opt,name=card_download_driver,json=cardDownloadDriver"`
	xxx_hidden_VehicleUnitsUsed            *VehicleUnitsUsed            `protobuf:"bytes,16,opt,name=vehicle_units_used,json=vehicleUnitsUsed"`
	xxx_hidden_GnssPlaces                  *GnssPlaces                  `protobuf:"bytes,17,opt,name=gnss_places,json=gnssPlaces"`
	xxx_hidden_ApplicationIdentificationV2 *ApplicationIdentificationV2 `protobuf:"bytes,18,opt,name=application_identification_v2,json=applicationIdentificationV2"`
	xxx_hidden_PlacesAuthentication        *PlacesAuthentication        `protobuf:"bytes,19,opt,name=places_authentication,json=placesAuthentication"`
	xxx_hidden_GnssPlacesAuthentication    *GnssPlacesAuthentication    `protobuf:"bytes,20,opt,name=gnss_places_authentication,json=gnssPlacesAuthentication"`
	xxx_hidden_BorderCrossings             *BorderCrossings             `protobuf:"bytes,21,opt,name=border_crossings,json=borderCrossings"`
	xxx_hidden_LoadUnloadOperations        *LoadUnloadOperations        `protobuf:"bytes,22,opt,name=load_unload_operations,json=loadUnloadOperations"`
	xxx_hidden_LoadTypeEntries             *LoadTypeEntries             `protobuf:"bytes,23,opt,name=load_type_entries,json=loadTypeEntries"`
	xxx_hidden_Certificates                *Certificates                `protobuf:"bytes,24,opt,name=certificates"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *DriverCardFile) Reset() {
	*x = DriverCardFile{}
	mi := &file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverCardFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCardFile) ProtoMessage() {}

func (x *DriverCardFile) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DriverCardFile) GetIcc() *Icc {
	if x != nil {
		return x.xxx_hidden_Icc
	}
	return nil
}

func (x *DriverCardFile) GetIc() *Ic {
	if x != nil {
		return x.xxx_hidden_Ic
	}
	return nil
}

func (x *DriverCardFile) GetApplicationIdentification() *ApplicationIdentification {
	if x != nil {
		return x.xxx_hidden_ApplicationIdentification
	}
	return nil
}

func (x *DriverCardFile) GetIdentification() *Identification {
	if x != nil {
		return x.xxx_hidden_Identification
	}
	return nil
}

func (x *DriverCardFile) GetDrivingLicenceInfo() *DrivingLicenceInfo {
	if x != nil {
		return x.xxx_hidden_DrivingLicenceInfo
	}
	return nil
}

func (x *DriverCardFile) GetEventsData() *EventsData {
	if x != nil {
		return x.xxx_hidden_EventsData
	}
	return nil
}

func (x *DriverCardFile) GetFaultsData() *FaultsData {
	if x != nil {
		return x.xxx_hidden_FaultsData
	}
	return nil
}

func (x *DriverCardFile) GetDriverActivityData() *DriverActivityData {
	if x != nil {
		return x.xxx_hidden_DriverActivityData
	}
	return nil
}

func (x *DriverCardFile) GetVehiclesUsed() *VehiclesUsed {
	if x != nil {
		return x.xxx_hidden_VehiclesUsed
	}
	return nil
}

func (x *DriverCardFile) GetPlaces() *Places {
	if x != nil {
		return x.xxx_hidden_Places
	}
	return nil
}

func (x *DriverCardFile) GetCurrentUsage() *CurrentUsage {
	if x != nil {
		return x.xxx_hidden_CurrentUsage
	}
	return nil
}

func (x *DriverCardFile) GetControlActivityData() *ControlActivityData {
	if x != nil {
		return x.xxx_hidden_ControlActivityData
	}
	return nil
}

func (x *DriverCardFile) GetSpecificConditions() *SpecificConditions {
	if x != nil {
		return x.xxx_hidden_SpecificConditions
	}
	return nil
}

func (x *DriverCardFile) GetCardDownloadDriver() *CardDownloadDriver {
	if x != nil {
		return x.xxx_hidden_CardDownloadDriver
	}
	return nil
}

func (x *DriverCardFile) GetVehicleUnitsUsed() *VehicleUnitsUsed {
	if x != nil {
		return x.xxx_hidden_VehicleUnitsUsed
	}
	return nil
}

func (x *DriverCardFile) GetGnssPlaces() *GnssPlaces {
	if x != nil {
		return x.xxx_hidden_GnssPlaces
	}
	return nil
}

func (x *DriverCardFile) GetApplicationIdentificationV2() *ApplicationIdentificationV2 {
	if x != nil {
		return x.xxx_hidden_ApplicationIdentificationV2
	}
	return nil
}

func (x *DriverCardFile) GetPlacesAuthentication() *PlacesAuthentication {
	if x != nil {
		return x.xxx_hidden_PlacesAuthentication
	}
	return nil
}

func (x *DriverCardFile) GetGnssPlacesAuthentication() *GnssPlacesAuthentication {
	if x != nil {
		return x.xxx_hidden_GnssPlacesAuthentication
	}
	return nil
}

func (x *DriverCardFile) GetBorderCrossings() *BorderCrossings {
	if x != nil {
		return x.xxx_hidden_BorderCrossings
	}
	return nil
}

func (x *DriverCardFile) GetLoadUnloadOperations() *LoadUnloadOperations {
	if x != nil {
		return x.xxx_hidden_LoadUnloadOperations
	}
	return nil
}

func (x *DriverCardFile) GetLoadTypeEntries() *LoadTypeEntries {
	if x != nil {
		return x.xxx_hidden_LoadTypeEntries
	}
	return nil
}

func (x *DriverCardFile) GetCertificates() *Certificates {
	if x != nil {
		return x.xxx_hidden_Certificates
	}
	return nil
}

func (x *DriverCardFile) SetIcc(v *Icc) {
	x.xxx_hidden_Icc = v
}

func (x *DriverCardFile) SetIc(v *Ic) {
	x.xxx_hidden_Ic = v
}

func (x *DriverCardFile) SetApplicationIdentification(v *ApplicationIdentification) {
	x.xxx_hidden_ApplicationIdentification = v
}

func (x *DriverCardFile) SetIdentification(v *Identification) {
	x.xxx_hidden_Identification = v
}

func (x *DriverCardFile) SetDrivingLicenceInfo(v *DrivingLicenceInfo) {
	x.xxx_hidden_DrivingLicenceInfo = v
}

func (x *DriverCardFile) SetEventsData(v *EventsData) {
	x.xxx_hidden_EventsData = v
}

func (x *DriverCardFile) SetFaultsData(v *FaultsData) {
	x.xxx_hidden_FaultsData = v
}

func (x *DriverCardFile) SetDriverActivityData(v *DriverActivityData) {
	x.xxx_hidden_DriverActivityData = v
}

func (x *DriverCardFile) SetVehiclesUsed(v *VehiclesUsed) {
	x.xxx_hidden_VehiclesUsed = v
}

func (x *DriverCardFile) SetPlaces(v *Places) {
	x.xxx_hidden_Places = v
}

func (x *DriverCardFile) SetCurrentUsage(v *CurrentUsage) {
	x.xxx_hidden_CurrentUsage = v
}

func (x *DriverCardFile) SetControlActivityData(v *ControlActivityData) {
	x.xxx_hidden_ControlActivityData = v
}

func (x *DriverCardFile) SetSpecificConditions(v *SpecificConditions) {
	x.xxx_hidden_SpecificConditions = v
}

func (x *DriverCardFile) SetCardDownloadDriver(v *CardDownloadDriver) {
	x.xxx_hidden_CardDownloadDriver = v
}

func (x *DriverCardFile) SetVehicleUnitsUsed(v *VehicleUnitsUsed) {
	x.xxx_hidden_VehicleUnitsUsed = v
}

func (x *DriverCardFile) SetGnssPlaces(v *GnssPlaces) {
	x.xxx_hidden_GnssPlaces = v
}

func (x *DriverCardFile) SetApplicationIdentificationV2(v *ApplicationIdentificationV2) {
	x.xxx_hidden_ApplicationIdentificationV2 = v
}

func (x *DriverCardFile) SetPlacesAuthentication(v *PlacesAuthentication) {
	x.xxx_hidden_PlacesAuthentication = v
}

func (x *DriverCardFile) SetGnssPlacesAuthentication(v *GnssPlacesAuthentication) {
	x.xxx_hidden_GnssPlacesAuthentication = v
}

func (x *DriverCardFile) SetBorderCrossings(v *BorderCrossings) {
	x.xxx_hidden_BorderCrossings = v
}

func (x *DriverCardFile) SetLoadUnloadOperations(v *LoadUnloadOperations) {
	x.xxx_hidden_LoadUnloadOperations = v
}

func (x *DriverCardFile) SetLoadTypeEntries(v *LoadTypeEntries) {
	x.xxx_hidden_LoadTypeEntries = v
}

func (x *DriverCardFile) SetCertificates(v *Certificates) {
	x.xxx_hidden_Certificates = v
}

func (x *DriverCardFile) HasIcc() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Icc != nil
}

func (x *DriverCardFile) HasIc() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Ic != nil
}

func (x *DriverCardFile) HasApplicationIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ApplicationIdentification != nil
}

func (x *DriverCardFile) HasIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Identification != nil
}

func (x *DriverCardFile) HasDrivingLicenceInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DrivingLicenceInfo != nil
}

func (x *DriverCardFile) HasEventsData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EventsData != nil
}

func (x *DriverCardFile) HasFaultsData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FaultsData != nil
}

func (x *DriverCardFile) HasDriverActivityData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DriverActivityData != nil
}

func (x *DriverCardFile) HasVehiclesUsed() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VehiclesUsed != nil
}

func (x *DriverCardFile) HasPlaces() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Places != nil
}

func (x *DriverCardFile) HasCurrentUsage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CurrentUsage != nil
}

func (x *DriverCardFile) HasControlActivityData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ControlActivityData != nil
}

func (x *DriverCardFile) HasSpecificConditions() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SpecificConditions != nil
}

func (x *DriverCardFile) HasCardDownloadDriver() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardDownloadDriver != nil
}

func (x *DriverCardFile) HasVehicleUnitsUsed() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VehicleUnitsUsed != nil
}

func (x *DriverCardFile) HasGnssPlaces() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GnssPlaces != nil
}

func (x *DriverCardFile) HasApplicationIdentificationV2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ApplicationIdentificationV2 != nil
}

func (x *DriverCardFile) HasPlacesAuthentication() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PlacesAuthentication != nil
}

func (x *DriverCardFile) HasGnssPlacesAuthentication() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GnssPlacesAuthentication != nil
}

func (x *DriverCardFile) HasBorderCrossings() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_BorderCrossings != nil
}

func (x *DriverCardFile) HasLoadUnloadOperations() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LoadUnloadOperations != nil
}

func (x *DriverCardFile) HasLoadTypeEntries() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LoadTypeEntries != nil
}

func (x *DriverCardFile) HasCertificates() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Certificates != nil
}

func (x *DriverCardFile) ClearIcc() {
	x.xxx_hidden_Icc = nil
}

func (x *DriverCardFile) ClearIc() {
	x.xxx_hidden_Ic = nil
}

func (x *DriverCardFile) ClearApplicationIdentification() {
	x.xxx_hidden_ApplicationIdentification = nil
}

func (x *DriverCardFile) ClearIdentification() {
	x.xxx_hidden_Identification = nil
}

func (x *DriverCardFile) ClearDrivingLicenceInfo() {
	x.xxx_hidden_DrivingLicenceInfo = nil
}

func (x *DriverCardFile) ClearEventsData() {
	x.xxx_hidden_EventsData = nil
}

func (x *DriverCardFile) ClearFaultsData() {
	x.xxx_hidden_FaultsData = nil
}

func (x *DriverCardFile) ClearDriverActivityData() {
	x.xxx_hidden_DriverActivityData = nil
}

func (x *DriverCardFile) ClearVehiclesUsed() {
	x.xxx_hidden_VehiclesUsed = nil
}

func (x *DriverCardFile) ClearPlaces() {
	x.xxx_hidden_Places = nil
}

func (x *DriverCardFile) ClearCurrentUsage() {
	x.xxx_hidden_CurrentUsage = nil
}

func (x *DriverCardFile) ClearControlActivityData() {
	x.xxx_hidden_ControlActivityData = nil
}

func (x *DriverCardFile) ClearSpecificConditions() {
	x.xxx_hidden_SpecificConditions = nil
}

func (x *DriverCardFile) ClearCardDownloadDriver() {
	x.xxx_hidden_CardDownloadDriver = nil
}

func (x *DriverCardFile) ClearVehicleUnitsUsed() {
	x.xxx_hidden_VehicleUnitsUsed = nil
}

func (x *DriverCardFile) ClearGnssPlaces() {
	x.xxx_hidden_GnssPlaces = nil
}

func (x *DriverCardFile) ClearApplicationIdentificationV2() {
	x.xxx_hidden_ApplicationIdentificationV2 = nil
}

func (x *DriverCardFile) ClearPlacesAuthentication() {
	x.xxx_hidden_PlacesAuthentication = nil
}

func (x *DriverCardFile) ClearGnssPlacesAuthentication() {
	x.xxx_hidden_GnssPlacesAuthentication = nil
}

func (x *DriverCardFile) ClearBorderCrossings() {
	x.xxx_hidden_BorderCrossings = nil
}

func (x *DriverCardFile) ClearLoadUnloadOperations() {
	x.xxx_hidden_LoadUnloadOperations = nil
}

func (x *DriverCardFile) ClearLoadTypeEntries() {
	x.xxx_hidden_LoadTypeEntries = nil
}

func (x *DriverCardFile) ClearCertificates() {
	x.xxx_hidden_Certificates = nil
}

type DriverCardFile_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Data from EF_ICC (Integrated Circuit Card Identification). See `icc.proto`.
	Icc *Icc
	// Data from EF_IC (Integrated Circuit Identification). See `ic.proto`.
	Ic *Ic
	// Data from EF_Application_Identification. See `application_identification.proto`.
	ApplicationIdentification *ApplicationIdentification
	// Data from EF_Identification. See `identification.proto`.
	Identification *Identification
	// Data from EF_Driving_Licence_Info. See `driving_licence_info.proto`.
	DrivingLicenceInfo *DrivingLicenceInfo
	// Data from EF_Events_Data. See `events_data.proto`.
	EventsData *EventsData
	// Data from EF_Faults_Data. See `faults_data.proto`.
	FaultsData *FaultsData
	// Data from EF_Driver_Activity_Data. See `driver_activity_data.proto`.
	DriverActivityData *DriverActivityData
	// Data from EF_Vehicles_Used. See `vehicles_used.proto`.
	VehiclesUsed *VehiclesUsed
	// Data from EF_Places. See `places.proto`.
	Places *Places
	// Data from EF_Current_Usage. See `current_usage.proto`.
	CurrentUsage *CurrentUsage
	// Data from EF_Control_Activity_Data. See `control_activity_data.proto`.
	ControlActivityData *ControlActivityData
	// Data from EF_Specific_Conditions. See `specific_conditions.proto`.
	SpecificConditions *SpecificConditions
	// Data from EF_Card_Download. See `card_download_driver.proto`.
	CardDownloadDriver *CardDownloadDriver
	// Data from EF_VehicleUnits_Used. See `vehicle_units_used.proto`.
	VehicleUnitsUsed *VehicleUnitsUsed
	// Data from EF_GNSS_Places. See `gnss_places.proto`.
	GnssPlaces *GnssPlaces
	// Data from EF_Application_Identification_V2 (conditional on Gen2v2 cards). See `application_identification_v2.proto`.
	ApplicationIdentificationV2 *ApplicationIdentificationV2
	// Data from EF_Places_Authentication (conditional on Gen2v2 cards). See `places_authentication.proto`.
	PlacesAuthentication *PlacesAuthentication
	// Data from EF_GNSS_Places_Authentication (conditional on Gen2v2 cards). See `gnss_places_authentication.proto`.
	GnssPlacesAuthentication *GnssPlacesAuthentication
	// Data from EF_Border_Crossings (conditional on Gen2v2 cards). See `border_crossings.proto`.
	BorderCrossings *BorderCrossings
	// Data from EF_Load_Unload_Operations (conditional on Gen2v2 cards). See `load_unload_operations.proto`.
	LoadUnloadOperations *LoadUnloadOperations
	// Data from EF_Load_Type_Entries (conditional on Gen2v2 cards). See `load_type_entries.proto`.
	LoadTypeEntries *LoadTypeEntries
	// Certificate data from various certificate EFs. See `certificates.proto`.
	Certificates *Certificates
}

func (b0 DriverCardFile_builder) Build() *DriverCardFile {
	m0 := &DriverCardFile{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Icc = b.Icc
	x.xxx_hidden_Ic = b.Ic
	x.xxx_hidden_ApplicationIdentification = b.ApplicationIdentification
	x.xxx_hidden_Identification = b.Identification
	x.xxx_hidden_DrivingLicenceInfo = b.DrivingLicenceInfo
	x.xxx_hidden_EventsData = b.EventsData
	x.xxx_hidden_FaultsData = b.FaultsData
	x.xxx_hidden_DriverActivityData = b.DriverActivityData
	x.xxx_hidden_VehiclesUsed = b.VehiclesUsed
	x.xxx_hidden_Places = b.Places
	x.xxx_hidden_CurrentUsage = b.CurrentUsage
	x.xxx_hidden_ControlActivityData = b.ControlActivityData
	x.xxx_hidden_SpecificConditions = b.SpecificConditions
	x.xxx_hidden_CardDownloadDriver = b.CardDownloadDriver
	x.xxx_hidden_VehicleUnitsUsed = b.VehicleUnitsUsed
	x.xxx_hidden_GnssPlaces = b.GnssPlaces
	x.xxx_hidden_ApplicationIdentificationV2 = b.ApplicationIdentificationV2
	x.xxx_hidden_PlacesAuthentication = b.PlacesAuthentication
	x.xxx_hidden_GnssPlacesAuthentication = b.GnssPlacesAuthentication
	x.xxx_hidden_BorderCrossings = b.BorderCrossings
	x.xxx_hidden_LoadUnloadOperations = b.LoadUnloadOperations
	x.xxx_hidden_LoadTypeEntries = b.LoadTypeEntries
	x.xxx_hidden_Certificates = b.Certificates
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_driver_card_file_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_rawDesc = "" +
	"\n" +
	"=wayplatform/connect/tachograph/card/v1/driver_card_file.proto\x12&wayplatform.connect.tachograph.card.v1\x1aJwayplatform/connect/tachograph/card/v1/application_identification_v2.proto\x1a=wayplatform/connect/tachograph/card/v1/border_crossings.proto\x1a0wayplatform/connect/tachograph/card/v1/icc.proto\x1a9wayplatform/connect/tachograph/card/v1/certificates.proto\x1a/wayplatform/connect/tachograph/card/v1/ic.proto\x1aBwayplatform/connect/tachograph/card/v1/control_activity_data.proto\x1a:wayplatform/connect/tachograph/card/v1/current_usage.proto\x1aAwayplatform/connect/tachograph/card/v1/driver_activity_data.proto\x1aGwayplatform/connect/tachograph/card/v1/application_identification.proto\x1aAwayplatform/connect/tachograph/card/v1/driving_licence_info.proto\x1a8wayplatform/connect/tachograph/card/v1/events_data.proto\x1a8wayplatform/connect/tachograph/card/v1/faults_data.proto\x1a8wayplatform/connect/tachograph/card/v1/gnss_places.proto\x1aGwayplatform/connect/tachograph/card/v1/gnss_places_authentication.proto\x1a;wayplatform/connect/tachograph/card/v1/identification.proto\x1aAwayplatform/connect/tachograph/card/v1/card_download_driver.proto\x1a>wayplatform/connect/tachograph/card/v1/load_type_entries.proto\x1aCwayplatform/connect/tachograph/card/v1/load_unload_operations.proto\x1a3wayplatform/connect/tachograph/card/v1/places.proto\x1aBwayplatform/connect/tachograph/card/v1/places_authentication.proto\x1a@wayplatform/connect/tachograph/card/v1/specific_conditions.proto\x1a?wayplatform/connect/tachograph/card/v1/vehicle_units_used.proto\x1a:wayplatform/connect/tachograph/card/v1/vehicles_used.proto\"\x8f\x12\n" +
	"\x0eDriverCardFile\x12=\n" +
	"\x03icc\x18\x01 \x01(\v2+.wayplatform.connect.tachograph.card.v1.IccR\x03icc\x12:\n" +
	"\x02ic\x18\x02 \x01(\v2*.wayplatform.connect.tachograph.card.v1.IcR\x02ic\x12\x80\x01\n" +
	"\x1aapplication_identification\x18\x03 \x01(\v2A.wayplatform.connect.tachograph.card.v1.ApplicationIdentificationR\x19applicationIdentification\x12^\n" +
	"\x0eidentification\x18\x04 \x01(\v26.wayplatform.connect.tachograph.card.v1.IdentificationR\x0eidentification\x12l\n" +
	"\x14driving_licence_info\x18\x06 \x01(\v2:.wayplatform.connect.tachograph.card.v1.DrivingLicenceInfoR\x12drivingLicenceInfo\x12S\n" +
	"\vevents_data\x18\a \x01(\v22.wayplatform.connect.tachograph.card.v1.EventsDataR\n" +
	"eventsData\x12S\n" +
	"\vfaults_data\x18\b \x01(\v22.wayplatform.connect.tachograph.card.v1.FaultsDataR\n" +
	"faultsData\x12l\n" +
	"\x14driver_activity_data\x18\t \x01(\v2:.wayplatform.connect.tachograph.card.v1.DriverActivityDataR\x12driverActivityData\x12Y\n" +
	"\rvehicles_used\x18\n" +
	" \x01(\v24.wayplatform.connect.tachograph.card.v1.VehiclesUsedR\fvehiclesUsed\x12F\n" +
	"\x06places\x18\v \x01(\v2..wayplatform.connect.tachograph.card.v1.PlacesR\x06places\x12Y\n" +
	"\rcurrent_usage\x18\f \x01(\v24.wayplatform.connect.tachograph.card.v1.CurrentUsageR\fcurrentUsage\x12o\n" +
	"\x15control_activity_data\x18\r \x01(\v2;.wayplatform.connect.tachograph.card.v1.ControlActivityDataR\x13controlActivityData\x12k\n" +
	"\x13specific_conditions\x18\x0e \x01(\v2:.wayplatform.connect.tachograph.card.v1.SpecificConditionsR\x12specificConditions\x12l\n" +
	"\x14card_download_driver\x18\x0f \x01(\v2:.wayplatform.connect.tachograph.card.v1.CardDownloadDriverR\x12cardDownloadDriver\x12f\n" +
	"\x12vehicle_units_used\x18\x10 \x01(\v28.wayplatform.connect.tachograph.card.v1.VehicleUnitsUsedR\x10vehicleUnitsUsed\x12S\n" +
	"\vgnss_places\x18\x11 \x01(\v22.wayplatform.connect.tachograph.card.v1.GnssPlacesR\n" +
	"gnssPlaces\x12\x87\x01\n" +
	"\x1dapplication_identification_v2\x18\x12 \x01(\v2C.wayplatform.connect.tachograph.card.v1.ApplicationIdentificationV2R\x1bapplicationIdentificationV2\x12q\n" +
	"\x15places_authentication\x18\x13 \x01(\v2<.wayplatform.connect.tachograph.card.v1.PlacesAuthenticationR\x14placesAuthentication\x12~\n" +
	"\x1agnss_places_authentication\x18\x14 \x01(\v2@.wayplatform.connect.tachograph.card.v1.GnssPlacesAuthenticationR\x18gnssPlacesAuthentication\x12b\n" +
	"\x10border_crossings\x18\x15 \x01(\v27.wayplatform.connect.tachograph.card.v1.BorderCrossingsR\x0fborderCrossings\x12r\n" +
	"\x16load_unload_operations\x18\x16 \x01(\v2<.wayplatform.connect.tachograph.card.v1.LoadUnloadOperationsR\x14loadUnloadOperations\x12c\n" +
	"\x11load_type_entries\x18\x17 \x01(\v27.wayplatform.connect.tachograph.card.v1.LoadTypeEntriesR\x0floadTypeEntries\x12X\n" +
	"\fcertificates\x18\x18 \x01(\v24.wayplatform.connect.tachograph.card.v1.CertificatesR\fcertificatesB\xe0\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x13DriverCardFileProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_goTypes = []any{
	(*DriverCardFile)(nil),              // 0: wayplatform.connect.tachograph.card.v1.DriverCardFile
	(*Icc)(nil),                         // 1: wayplatform.connect.tachograph.card.v1.Icc
	(*Ic)(nil),                          // 2: wayplatform.connect.tachograph.card.v1.Ic
	(*ApplicationIdentification)(nil),   // 3: wayplatform.connect.tachograph.card.v1.ApplicationIdentification
	(*Identification)(nil),              // 4: wayplatform.connect.tachograph.card.v1.Identification
	(*DrivingLicenceInfo)(nil),          // 5: wayplatform.connect.tachograph.card.v1.DrivingLicenceInfo
	(*EventsData)(nil),                  // 6: wayplatform.connect.tachograph.card.v1.EventsData
	(*FaultsData)(nil),                  // 7: wayplatform.connect.tachograph.card.v1.FaultsData
	(*DriverActivityData)(nil),          // 8: wayplatform.connect.tachograph.card.v1.DriverActivityData
	(*VehiclesUsed)(nil),                // 9: wayplatform.connect.tachograph.card.v1.VehiclesUsed
	(*Places)(nil),                      // 10: wayplatform.connect.tachograph.card.v1.Places
	(*CurrentUsage)(nil),                // 11: wayplatform.connect.tachograph.card.v1.CurrentUsage
	(*ControlActivityData)(nil),         // 12: wayplatform.connect.tachograph.card.v1.ControlActivityData
	(*SpecificConditions)(nil),          // 13: wayplatform.connect.tachograph.card.v1.SpecificConditions
	(*CardDownloadDriver)(nil),          // 14: wayplatform.connect.tachograph.card.v1.CardDownloadDriver
	(*VehicleUnitsUsed)(nil),            // 15: wayplatform.connect.tachograph.card.v1.VehicleUnitsUsed
	(*GnssPlaces)(nil),                  // 16: wayplatform.connect.tachograph.card.v1.GnssPlaces
	(*ApplicationIdentificationV2)(nil), // 17: wayplatform.connect.tachograph.card.v1.ApplicationIdentificationV2
	(*PlacesAuthentication)(nil),        // 18: wayplatform.connect.tachograph.card.v1.PlacesAuthentication
	(*GnssPlacesAuthentication)(nil),    // 19: wayplatform.connect.tachograph.card.v1.GnssPlacesAuthentication
	(*BorderCrossings)(nil),             // 20: wayplatform.connect.tachograph.card.v1.BorderCrossings
	(*LoadUnloadOperations)(nil),        // 21: wayplatform.connect.tachograph.card.v1.LoadUnloadOperations
	(*LoadTypeEntries)(nil),             // 22: wayplatform.connect.tachograph.card.v1.LoadTypeEntries
	(*Certificates)(nil),                // 23: wayplatform.connect.tachograph.card.v1.Certificates
}
var file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_depIdxs = []int32{
	1,  // 0: wayplatform.connect.tachograph.card.v1.DriverCardFile.icc:type_name -> wayplatform.connect.tachograph.card.v1.Icc
	2,  // 1: wayplatform.connect.tachograph.card.v1.DriverCardFile.ic:type_name -> wayplatform.connect.tachograph.card.v1.Ic
	3,  // 2: wayplatform.connect.tachograph.card.v1.DriverCardFile.application_identification:type_name -> wayplatform.connect.tachograph.card.v1.ApplicationIdentification
	4,  // 3: wayplatform.connect.tachograph.card.v1.DriverCardFile.identification:type_name -> wayplatform.connect.tachograph.card.v1.Identification
	5,  // 4: wayplatform.connect.tachograph.card.v1.DriverCardFile.driving_licence_info:type_name -> wayplatform.connect.tachograph.card.v1.DrivingLicenceInfo
	6,  // 5: wayplatform.connect.tachograph.card.v1.DriverCardFile.events_data:type_name -> wayplatform.connect.tachograph.card.v1.EventsData
	7,  // 6: wayplatform.connect.tachograph.card.v1.DriverCardFile.faults_data:type_name -> wayplatform.connect.tachograph.card.v1.FaultsData
	8,  // 7: wayplatform.connect.tachograph.card.v1.DriverCardFile.driver_activity_data:type_name -> wayplatform.connect.tachograph.card.v1.DriverActivityData
	9,  // 8: wayplatform.connect.tachograph.card.v1.DriverCardFile.vehicles_used:type_name -> wayplatform.connect.tachograph.card.v1.VehiclesUsed
	10, // 9: wayplatform.connect.tachograph.card.v1.DriverCardFile.places:type_name -> wayplatform.connect.tachograph.card.v1.Places
	11, // 10: wayplatform.connect.tachograph.card.v1.DriverCardFile.current_usage:type_name -> wayplatform.connect.tachograph.card.v1.CurrentUsage
	12, // 11: wayplatform.connect.tachograph.card.v1.DriverCardFile.control_activity_data:type_name -> wayplatform.connect.tachograph.card.v1.ControlActivityData
	13, // 12: wayplatform.connect.tachograph.card.v1.DriverCardFile.specific_conditions:type_name -> wayplatform.connect.tachograph.card.v1.SpecificConditions
	14, // 13: wayplatform.connect.tachograph.card.v1.DriverCardFile.card_download_driver:type_name -> wayplatform.connect.tachograph.card.v1.CardDownloadDriver
	15, // 14: wayplatform.connect.tachograph.card.v1.DriverCardFile.vehicle_units_used:type_name -> wayplatform.connect.tachograph.card.v1.VehicleUnitsUsed
	16, // 15: wayplatform.connect.tachograph.card.v1.DriverCardFile.gnss_places:type_name -> wayplatform.connect.tachograph.card.v1.GnssPlaces
	17, // 16: wayplatform.connect.tachograph.card.v1.DriverCardFile.application_identification_v2:type_name -> wayplatform.connect.tachograph.card.v1.ApplicationIdentificationV2
	18, // 17: wayplatform.connect.tachograph.card.v1.DriverCardFile.places_authentication:type_name -> wayplatform.connect.tachograph.card.v1.PlacesAuthentication
	19, // 18: wayplatform.connect.tachograph.card.v1.DriverCardFile.gnss_places_authentication:type_name -> wayplatform.connect.tachograph.card.v1.GnssPlacesAuthentication
	20, // 19: wayplatform.connect.tachograph.card.v1.DriverCardFile.border_crossings:type_name -> wayplatform.connect.tachograph.card.v1.BorderCrossings
	21, // 20: wayplatform.connect.tachograph.card.v1.DriverCardFile.load_unload_operations:type_name -> wayplatform.connect.tachograph.card.v1.LoadUnloadOperations
	22, // 21: wayplatform.connect.tachograph.card.v1.DriverCardFile.load_type_entries:type_name -> wayplatform.connect.tachograph.card.v1.LoadTypeEntries
	23, // 22: wayplatform.connect.tachograph.card.v1.DriverCardFile.certificates:type_name -> wayplatform.connect.tachograph.card.v1.Certificates
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_driver_card_file_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_card_v1_application_identification_v2_proto_init()
	file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_init()
	file_wayplatform_connect_tachograph_card_v1_icc_proto_init()
	file_wayplatform_connect_tachograph_card_v1_certificates_proto_init()
	file_wayplatform_connect_tachograph_card_v1_ic_proto_init()
	file_wayplatform_connect_tachograph_card_v1_control_activity_data_proto_init()
	file_wayplatform_connect_tachograph_card_v1_current_usage_proto_init()
	file_wayplatform_connect_tachograph_card_v1_driver_activity_data_proto_init()
	file_wayplatform_connect_tachograph_card_v1_application_identification_proto_init()
	file_wayplatform_connect_tachograph_card_v1_driving_licence_info_proto_init()
	file_wayplatform_connect_tachograph_card_v1_events_data_proto_init()
	file_wayplatform_connect_tachograph_card_v1_faults_data_proto_init()
	file_wayplatform_connect_tachograph_card_v1_gnss_places_proto_init()
	file_wayplatform_connect_tachograph_card_v1_gnss_places_authentication_proto_init()
	file_wayplatform_connect_tachograph_card_v1_identification_proto_init()
	file_wayplatform_connect_tachograph_card_v1_card_download_driver_proto_init()
	file_wayplatform_connect_tachograph_card_v1_load_type_entries_proto_init()
	file_wayplatform_connect_tachograph_card_v1_load_unload_operations_proto_init()
	file_wayplatform_connect_tachograph_card_v1_places_proto_init()
	file_wayplatform_connect_tachograph_card_v1_places_authentication_proto_init()
	file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_init()
	file_wayplatform_connect_tachograph_card_v1_vehicle_units_used_proto_init()
	file_wayplatform_connect_tachograph_card_v1_vehicles_used_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_driver_card_file_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_driver_card_file_proto_depIdxs = nil
}
