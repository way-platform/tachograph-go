// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/calibration.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_Calibration file.
//
// The file structure is specified in Appendix 2, Section 4.3.1.
//
//	EF Calibration
//	└─WorkshopCardCalibrationData
//
// The data type `WorkshopCardCalibrationData` is specified in the Data Dictionary, Section 2.235.
//
// ASN.1 Specification:
//
//	WorkshopCardCalibrationData ::= SEQUENCE {
//	    calibrationTotalNumber INTEGER(0..NoOfCalibrationRecords),
//	    calibrationPointerNewestRecord INTEGER(0..NoOfCalibrationRecords-1),
//	    calibrationRecords SET SIZE(NoOfCalibrationRecords) OF WorkshopCardCalibrationRecord
//	}
type Calibration struct {
	state                            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CalibrationTotalCount int32                  `protobuf:"varint,1,opt,name=calibration_total_count,json=calibrationTotalCount"`
	xxx_hidden_NewestRecordIndex     int32                  `protobuf:"varint,2,opt,name=newest_record_index,json=newestRecordIndex"`
	xxx_hidden_Records               *[]*Calibration_Record `protobuf:"bytes,3,rep,name=records"`
	XXX_raceDetectHookData           protoimpl.RaceDetectHookData
	XXX_presence                     [1]uint32
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *Calibration) Reset() {
	*x = Calibration{}
	mi := &file_wayplatform_connect_tachograph_card_v1_calibration_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Calibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calibration) ProtoMessage() {}

func (x *Calibration) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_calibration_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Calibration) GetCalibrationTotalCount() int32 {
	if x != nil {
		return x.xxx_hidden_CalibrationTotalCount
	}
	return 0
}

func (x *Calibration) GetNewestRecordIndex() int32 {
	if x != nil {
		return x.xxx_hidden_NewestRecordIndex
	}
	return 0
}

func (x *Calibration) GetRecords() []*Calibration_Record {
	if x != nil {
		if x.xxx_hidden_Records != nil {
			return *x.xxx_hidden_Records
		}
	}
	return nil
}

func (x *Calibration) SetCalibrationTotalCount(v int32) {
	x.xxx_hidden_CalibrationTotalCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *Calibration) SetNewestRecordIndex(v int32) {
	x.xxx_hidden_NewestRecordIndex = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *Calibration) SetRecords(v []*Calibration_Record) {
	x.xxx_hidden_Records = &v
}

func (x *Calibration) HasCalibrationTotalCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Calibration) HasNewestRecordIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Calibration) ClearCalibrationTotalCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CalibrationTotalCount = 0
}

func (x *Calibration) ClearNewestRecordIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_NewestRecordIndex = 0
}

type Calibration_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Total number of calibrations performed with the card.
	// Corresponds to `calibrationTotalNumber`.
	//
	// See Data Dictionary, Section 2.235.
	// ASN.1 Specification:
	//
	//	INTEGER(0..NoOfCalibrationRecords)
	CalibrationTotalCount *int32
	// Index of the last updated record.
	// Corresponds to `calibrationPointerNewestRecord`.
	//
	// See Data Dictionary, Section 2.235.
	// ASN.1 Specification:
	//
	//	INTEGER(0..NoOfCalibrationRecords-1)
	NewestRecordIndex *int32
	// The set of calibration records.
	// Corresponds to `calibrationRecords`.
	Records []*Calibration_Record
}

func (b0 Calibration_builder) Build() *Calibration {
	m0 := &Calibration{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CalibrationTotalCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_CalibrationTotalCount = *b.CalibrationTotalCount
	}
	if b.NewestRecordIndex != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_NewestRecordIndex = *b.NewestRecordIndex
	}
	x.xxx_hidden_Records = &b.Records
	return m0
}

// Represents a single calibration record.
//
// The data type `WorkshopCardCalibrationRecord` is specified in the Data Dictionary, Section 2.236.
//
// ASN.1 Specification:
//
//	WorkshopCardCalibrationRecord ::= SEQUENCE {
//	    calibrationPurpose CalibrationPurpose,
//	    vehicleIdentificationNumber VehicleIdentificationNumber,
//	    vehicleRegistration VehicleRegistrationIdentification,
//	    wVehicleCharacteristicConstant W-VehicleCharacteristicConstant,
//	    kConstantOfRecordingEquipment K-ConstantOfRecordingEquipment,
//	    lTyreCircumference L-TyreCircumference,
//	    tyreSize TyreSize,
//	    authorisedSpeed SpeedAuthorised,
//	    oldOdometerValue OdometerShort,
//	    newOdometerValue OdometerShort,
//	    oldTimeValue TimeReal,
//	    newTimeValue TimeReal,
//	    nextCalibrationDate TimeReal,
//	    vuPartNumber VuPartNumber,
//	    vuSerialNumber ExtendedSerialNumber,
//	    sensorSerialNumber SensorSerialNumber
//	}
type Calibration_Record struct {
	state                                     protoimpl.MessageState                `protogen:"opaque.v1"`
	xxx_hidden_CalibrationPurpose             v1.CalibrationPurpose                 `protobuf:"varint,1,opt,name=calibration_purpose,json=calibrationPurpose,enum=wayplatform.connect.tachograph.datadictionary.v1.CalibrationPurpose"`
	xxx_hidden_VehicleIdentificationNumber    *v1.StringValue                       `protobuf:"bytes,3,opt,name=vehicle_identification_number,json=vehicleIdentificationNumber"`
	xxx_hidden_VehicleRegistration            *v1.VehicleRegistrationIdentification `protobuf:"bytes,4,opt,name=vehicle_registration,json=vehicleRegistration"`
	xxx_hidden_WVehicleCharacteristicConstant int32                                 `protobuf:"varint,5,opt,name=w_vehicle_characteristic_constant,json=wVehicleCharacteristicConstant"`
	xxx_hidden_KConstantOfRecordingEquipment  int32                                 `protobuf:"varint,6,opt,name=k_constant_of_recording_equipment,json=kConstantOfRecordingEquipment"`
	xxx_hidden_LTyreCircumferenceMm           int32                                 `protobuf:"varint,7,opt,name=l_tyre_circumference_mm,json=lTyreCircumferenceMm"`
	xxx_hidden_TyreSize                       *v1.StringValue                       `protobuf:"bytes,8,opt,name=tyre_size,json=tyreSize"`
	xxx_hidden_AuthorisedSpeedKmh             int32                                 `protobuf:"varint,9,opt,name=authorised_speed_kmh,json=authorisedSpeedKmh"`
	xxx_hidden_OldOdometerKm                  int32                                 `protobuf:"varint,10,opt,name=old_odometer_km,json=oldOdometerKm"`
	xxx_hidden_NewOdometerKm                  int32                                 `protobuf:"varint,11,opt,name=new_odometer_km,json=newOdometerKm"`
	xxx_hidden_OldTime                        *timestamppb.Timestamp                `protobuf:"bytes,12,opt,name=old_time,json=oldTime"`
	xxx_hidden_NewTime                        *timestamppb.Timestamp                `protobuf:"bytes,13,opt,name=new_time,json=newTime"`
	xxx_hidden_NextCalibrationDate            *timestamppb.Timestamp                `protobuf:"bytes,14,opt,name=next_calibration_date,json=nextCalibrationDate"`
	xxx_hidden_VuPartNumber                   *v1.StringValue                       `protobuf:"bytes,15,opt,name=vu_part_number,json=vuPartNumber"`
	xxx_hidden_VuSerialNumber                 *v1.ExtendedSerialNumber              `protobuf:"bytes,16,opt,name=vu_serial_number,json=vuSerialNumber"`
	xxx_hidden_SensorSerialNumber             *v1.ExtendedSerialNumber              `protobuf:"bytes,17,opt,name=sensor_serial_number,json=sensorSerialNumber"`
	XXX_raceDetectHookData                    protoimpl.RaceDetectHookData
	XXX_presence                              [1]uint32
	unknownFields                             protoimpl.UnknownFields
	sizeCache                                 protoimpl.SizeCache
}

func (x *Calibration_Record) Reset() {
	*x = Calibration_Record{}
	mi := &file_wayplatform_connect_tachograph_card_v1_calibration_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Calibration_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calibration_Record) ProtoMessage() {}

func (x *Calibration_Record) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_calibration_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Calibration_Record) GetCalibrationPurpose() v1.CalibrationPurpose {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_CalibrationPurpose
		}
	}
	return v1.CalibrationPurpose(0)
}

func (x *Calibration_Record) GetVehicleIdentificationNumber() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_VehicleIdentificationNumber
	}
	return nil
}

func (x *Calibration_Record) GetVehicleRegistration() *v1.VehicleRegistrationIdentification {
	if x != nil {
		return x.xxx_hidden_VehicleRegistration
	}
	return nil
}

func (x *Calibration_Record) GetWVehicleCharacteristicConstant() int32 {
	if x != nil {
		return x.xxx_hidden_WVehicleCharacteristicConstant
	}
	return 0
}

func (x *Calibration_Record) GetKConstantOfRecordingEquipment() int32 {
	if x != nil {
		return x.xxx_hidden_KConstantOfRecordingEquipment
	}
	return 0
}

func (x *Calibration_Record) GetLTyreCircumferenceMm() int32 {
	if x != nil {
		return x.xxx_hidden_LTyreCircumferenceMm
	}
	return 0
}

func (x *Calibration_Record) GetTyreSize() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_TyreSize
	}
	return nil
}

func (x *Calibration_Record) GetAuthorisedSpeedKmh() int32 {
	if x != nil {
		return x.xxx_hidden_AuthorisedSpeedKmh
	}
	return 0
}

func (x *Calibration_Record) GetOldOdometerKm() int32 {
	if x != nil {
		return x.xxx_hidden_OldOdometerKm
	}
	return 0
}

func (x *Calibration_Record) GetNewOdometerKm() int32 {
	if x != nil {
		return x.xxx_hidden_NewOdometerKm
	}
	return 0
}

func (x *Calibration_Record) GetOldTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_OldTime
	}
	return nil
}

func (x *Calibration_Record) GetNewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_NewTime
	}
	return nil
}

func (x *Calibration_Record) GetNextCalibrationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_NextCalibrationDate
	}
	return nil
}

func (x *Calibration_Record) GetVuPartNumber() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_VuPartNumber
	}
	return nil
}

func (x *Calibration_Record) GetVuSerialNumber() *v1.ExtendedSerialNumber {
	if x != nil {
		return x.xxx_hidden_VuSerialNumber
	}
	return nil
}

func (x *Calibration_Record) GetSensorSerialNumber() *v1.ExtendedSerialNumber {
	if x != nil {
		return x.xxx_hidden_SensorSerialNumber
	}
	return nil
}

func (x *Calibration_Record) SetCalibrationPurpose(v v1.CalibrationPurpose) {
	x.xxx_hidden_CalibrationPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 16)
}

func (x *Calibration_Record) SetVehicleIdentificationNumber(v *v1.StringValue) {
	x.xxx_hidden_VehicleIdentificationNumber = v
}

func (x *Calibration_Record) SetVehicleRegistration(v *v1.VehicleRegistrationIdentification) {
	x.xxx_hidden_VehicleRegistration = v
}

func (x *Calibration_Record) SetWVehicleCharacteristicConstant(v int32) {
	x.xxx_hidden_WVehicleCharacteristicConstant = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 16)
}

func (x *Calibration_Record) SetKConstantOfRecordingEquipment(v int32) {
	x.xxx_hidden_KConstantOfRecordingEquipment = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 16)
}

func (x *Calibration_Record) SetLTyreCircumferenceMm(v int32) {
	x.xxx_hidden_LTyreCircumferenceMm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 16)
}

func (x *Calibration_Record) SetTyreSize(v *v1.StringValue) {
	x.xxx_hidden_TyreSize = v
}

func (x *Calibration_Record) SetAuthorisedSpeedKmh(v int32) {
	x.xxx_hidden_AuthorisedSpeedKmh = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 16)
}

func (x *Calibration_Record) SetOldOdometerKm(v int32) {
	x.xxx_hidden_OldOdometerKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 16)
}

func (x *Calibration_Record) SetNewOdometerKm(v int32) {
	x.xxx_hidden_NewOdometerKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 16)
}

func (x *Calibration_Record) SetOldTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_OldTime = v
}

func (x *Calibration_Record) SetNewTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_NewTime = v
}

func (x *Calibration_Record) SetNextCalibrationDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_NextCalibrationDate = v
}

func (x *Calibration_Record) SetVuPartNumber(v *v1.StringValue) {
	x.xxx_hidden_VuPartNumber = v
}

func (x *Calibration_Record) SetVuSerialNumber(v *v1.ExtendedSerialNumber) {
	x.xxx_hidden_VuSerialNumber = v
}

func (x *Calibration_Record) SetSensorSerialNumber(v *v1.ExtendedSerialNumber) {
	x.xxx_hidden_SensorSerialNumber = v
}

func (x *Calibration_Record) HasCalibrationPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Calibration_Record) HasVehicleIdentificationNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VehicleIdentificationNumber != nil
}

func (x *Calibration_Record) HasVehicleRegistration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VehicleRegistration != nil
}

func (x *Calibration_Record) HasWVehicleCharacteristicConstant() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Calibration_Record) HasKConstantOfRecordingEquipment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Calibration_Record) HasLTyreCircumferenceMm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Calibration_Record) HasTyreSize() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TyreSize != nil
}

func (x *Calibration_Record) HasAuthorisedSpeedKmh() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *Calibration_Record) HasOldOdometerKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *Calibration_Record) HasNewOdometerKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *Calibration_Record) HasOldTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OldTime != nil
}

func (x *Calibration_Record) HasNewTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NewTime != nil
}

func (x *Calibration_Record) HasNextCalibrationDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NextCalibrationDate != nil
}

func (x *Calibration_Record) HasVuPartNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VuPartNumber != nil
}

func (x *Calibration_Record) HasVuSerialNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VuSerialNumber != nil
}

func (x *Calibration_Record) HasSensorSerialNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SensorSerialNumber != nil
}

func (x *Calibration_Record) ClearCalibrationPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CalibrationPurpose = v1.CalibrationPurpose_CALIBRATION_PURPOSE_UNSPECIFIED
}

func (x *Calibration_Record) ClearVehicleIdentificationNumber() {
	x.xxx_hidden_VehicleIdentificationNumber = nil
}

func (x *Calibration_Record) ClearVehicleRegistration() {
	x.xxx_hidden_VehicleRegistration = nil
}

func (x *Calibration_Record) ClearWVehicleCharacteristicConstant() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_WVehicleCharacteristicConstant = 0
}

func (x *Calibration_Record) ClearKConstantOfRecordingEquipment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_KConstantOfRecordingEquipment = 0
}

func (x *Calibration_Record) ClearLTyreCircumferenceMm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_LTyreCircumferenceMm = 0
}

func (x *Calibration_Record) ClearTyreSize() {
	x.xxx_hidden_TyreSize = nil
}

func (x *Calibration_Record) ClearAuthorisedSpeedKmh() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_AuthorisedSpeedKmh = 0
}

func (x *Calibration_Record) ClearOldOdometerKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_OldOdometerKm = 0
}

func (x *Calibration_Record) ClearNewOdometerKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_NewOdometerKm = 0
}

func (x *Calibration_Record) ClearOldTime() {
	x.xxx_hidden_OldTime = nil
}

func (x *Calibration_Record) ClearNewTime() {
	x.xxx_hidden_NewTime = nil
}

func (x *Calibration_Record) ClearNextCalibrationDate() {
	x.xxx_hidden_NextCalibrationDate = nil
}

func (x *Calibration_Record) ClearVuPartNumber() {
	x.xxx_hidden_VuPartNumber = nil
}

func (x *Calibration_Record) ClearVuSerialNumber() {
	x.xxx_hidden_VuSerialNumber = nil
}

func (x *Calibration_Record) ClearSensorSerialNumber() {
	x.xxx_hidden_SensorSerialNumber = nil
}

type Calibration_Record_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The purpose of the calibration.
	//
	// See Data Dictionary, Section 2.8, `CalibrationPurpose`.
	// ASN.1 Specification:
	//
	//	CalibrationPurpose ::= OCTET STRING (SIZE(1))
	CalibrationPurpose *v1.CalibrationPurpose
	// The Vehicle Identification Number.
	//
	// See Data Dictionary, Section 2.164, `VehicleIdentificationNumber`.
	// ASN.1 Definition:
	//
	//	VehicleIdentificationNumber ::= IA5String(SIZE(17))
	VehicleIdentificationNumber *v1.StringValue
	// The vehicle registration identifier.
	//
	// See Data Dictionary, Section 2.166, `VehicleRegistrationIdentification`.
	// ASN.1 Definition:
	//
	//	VehicleRegistrationIdentification ::= SEQUENCE { ... }
	VehicleRegistration *v1.VehicleRegistrationIdentification
	// The vehicle characteristic constant.
	//
	// See Data Dictionary, Section 2.239, `W-VehicleCharacteristicConstant`.
	// ASN.1 Definition:
	//
	//	W-VehicleCharacteristicConstant ::= INTEGER(0..65535)
	WVehicleCharacteristicConstant *int32
	// The constant of the recording equipment.
	//
	// See Data Dictionary, Section 2.85, `K-ConstantOfRecordingEquipment`.
	// ASN.1 Definition:
	//
	//	K-ConstantOfRecordingEquipment ::= INTEGER(0..65535)
	KConstantOfRecordingEquipment *int32
	// The tyre circumference in mm.
	//
	// See Data Dictionary, Section 2.91, `L-TyreCircumference`.
	// ASN.1 Definition:
	//
	//	L-TyreCircumference ::= INTEGER(0..65535)
	LTyreCircumferenceMm *int32
	// The tyre size designation.
	//
	// See Data Dictionary, Section 2.163, `TyreSize`.
	// ASN.1 Definition:
	//
	//	TyreSize ::= IA5String(SIZE(15))
	TyreSize *v1.StringValue
	// The authorised speed in km/h.
	//
	// See Data Dictionary, Section 2.156, `SpeedAuthorised`.
	// ASN.1 Definition:
	//
	//	SpeedAuthorised ::= INTEGER(0..255)
	AuthorisedSpeedKmh *int32
	// The odometer value before calibration in km.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	// ASN.1 Definition:
	//
	//	OdometerShort ::= INTEGER(0..999999)
	OldOdometerKm *int32
	// The odometer value after calibration in km.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	// ASN.1 Definition:
	//
	//	OdometerShort ::= INTEGER(0..999999)
	NewOdometerKm *int32
	// The time value before calibration.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	OldTime *timestamppb.Timestamp
	// The time value after calibration.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	NewTime *timestamppb.Timestamp
	// The date of the next calibration.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	NextCalibrationDate *timestamppb.Timestamp
	// The part number of the Vehicle Unit.
	//
	// See Data Dictionary, Section 2.217, `VuPartNumber`.
	// ASN.1 Definition:
	//
	//	VuPartNumber ::= IA5String(SIZE(16))
	VuPartNumber *v1.StringValue
	// The serial number of the Vehicle Unit.
	//
	// See Data Dictionary, Section 2.72, `ExtendedSerialNumber`.
	// ASN.1 Specification:
	//
	//	ExtendedSerialNumber ::= SEQUENCE { ... }
	VuSerialNumber *v1.ExtendedSerialNumber
	// The serial number of the motion sensor.
	//
	// See Data Dictionary, Section 2.148, `SensorSerialNumber`.
	// ASN.1 Specification:
	//
	//	SensorSerialNumber ::= ExtendedSerialNumber
	SensorSerialNumber *v1.ExtendedSerialNumber
}

func (b0 Calibration_Record_builder) Build() *Calibration_Record {
	m0 := &Calibration_Record{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CalibrationPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 16)
		x.xxx_hidden_CalibrationPurpose = *b.CalibrationPurpose
	}
	x.xxx_hidden_VehicleIdentificationNumber = b.VehicleIdentificationNumber
	x.xxx_hidden_VehicleRegistration = b.VehicleRegistration
	if b.WVehicleCharacteristicConstant != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 16)
		x.xxx_hidden_WVehicleCharacteristicConstant = *b.WVehicleCharacteristicConstant
	}
	if b.KConstantOfRecordingEquipment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 16)
		x.xxx_hidden_KConstantOfRecordingEquipment = *b.KConstantOfRecordingEquipment
	}
	if b.LTyreCircumferenceMm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 16)
		x.xxx_hidden_LTyreCircumferenceMm = *b.LTyreCircumferenceMm
	}
	x.xxx_hidden_TyreSize = b.TyreSize
	if b.AuthorisedSpeedKmh != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 16)
		x.xxx_hidden_AuthorisedSpeedKmh = *b.AuthorisedSpeedKmh
	}
	if b.OldOdometerKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 16)
		x.xxx_hidden_OldOdometerKm = *b.OldOdometerKm
	}
	if b.NewOdometerKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 16)
		x.xxx_hidden_NewOdometerKm = *b.NewOdometerKm
	}
	x.xxx_hidden_OldTime = b.OldTime
	x.xxx_hidden_NewTime = b.NewTime
	x.xxx_hidden_NextCalibrationDate = b.NextCalibrationDate
	x.xxx_hidden_VuPartNumber = b.VuPartNumber
	x.xxx_hidden_VuSerialNumber = b.VuSerialNumber
	x.xxx_hidden_SensorSerialNumber = b.SensorSerialNumber
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_calibration_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_calibration_proto_rawDesc = "" +
	"\n" +
	"8wayplatform/connect/tachograph/card/v1/calibration.proto\x12&wayplatform.connect.tachograph.card.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1aJwayplatform/connect/tachograph/datadictionary/v1/calibration_purpose.proto\x1aMwayplatform/connect/tachograph/datadictionary/v1/extended_serial_number.proto\x1aCwayplatform/connect/tachograph/datadictionary/v1/string_value.proto\x1aZwayplatform/connect/tachograph/datadictionary/v1/vehicle_registration_identification.proto\"\x93\f\n" +
	"\vCalibration\x126\n" +
	"\x17calibration_total_count\x18\x01 \x01(\x05R\x15calibrationTotalCount\x12.\n" +
	"\x13newest_record_index\x18\x02 \x01(\x05R\x11newestRecordIndex\x12T\n" +
	"\arecords\x18\x03 \x03(\v2:.wayplatform.connect.tachograph.card.v1.Calibration.RecordR\arecords\x1a\xc5\n" +
	"\n" +
	"\x06Record\x12u\n" +
	"\x13calibration_purpose\x18\x01 \x01(\x0e2D.wayplatform.connect.tachograph.datadictionary.v1.CalibrationPurposeR\x12calibrationPurpose\x12\x81\x01\n" +
	"\x1dvehicle_identification_number\x18\x03 \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\x1bvehicleIdentificationNumber\x12\x86\x01\n" +
	"\x14vehicle_registration\x18\x04 \x01(\v2S.wayplatform.connect.tachograph.datadictionary.v1.VehicleRegistrationIdentificationR\x13vehicleRegistration\x12I\n" +
	"!w_vehicle_characteristic_constant\x18\x05 \x01(\x05R\x1ewVehicleCharacteristicConstant\x12H\n" +
	"!k_constant_of_recording_equipment\x18\x06 \x01(\x05R\x1dkConstantOfRecordingEquipment\x125\n" +
	"\x17l_tyre_circumference_mm\x18\a \x01(\x05R\x14lTyreCircumferenceMm\x12Z\n" +
	"\ttyre_size\x18\b \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\btyreSize\x120\n" +
	"\x14authorised_speed_kmh\x18\t \x01(\x05R\x12authorisedSpeedKmh\x12&\n" +
	"\x0fold_odometer_km\x18\n" +
	" \x01(\x05R\roldOdometerKm\x12&\n" +
	"\x0fnew_odometer_km\x18\v \x01(\x05R\rnewOdometerKm\x125\n" +
	"\bold_time\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\aoldTime\x125\n" +
	"\bnew_time\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\anewTime\x12N\n" +
	"\x15next_calibration_date\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\x13nextCalibrationDate\x12c\n" +
	"\x0evu_part_number\x18\x0f \x01(\v2=.wayplatform.connect.tachograph.datadictionary.v1.StringValueR\fvuPartNumber\x12p\n" +
	"\x10vu_serial_number\x18\x10 \x01(\v2F.wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumberR\x0evuSerialNumber\x12x\n" +
	"\x14sensor_serial_number\x18\x11 \x01(\v2F.wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumberR\x12sensorSerialNumberB\xdd\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x10CalibrationProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_calibration_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_wayplatform_connect_tachograph_card_v1_calibration_proto_goTypes = []any{
	(*Calibration)(nil),                          // 0: wayplatform.connect.tachograph.card.v1.Calibration
	(*Calibration_Record)(nil),                   // 1: wayplatform.connect.tachograph.card.v1.Calibration.Record
	(v1.CalibrationPurpose)(0),                   // 2: wayplatform.connect.tachograph.datadictionary.v1.CalibrationPurpose
	(*v1.StringValue)(nil),                       // 3: wayplatform.connect.tachograph.datadictionary.v1.StringValue
	(*v1.VehicleRegistrationIdentification)(nil), // 4: wayplatform.connect.tachograph.datadictionary.v1.VehicleRegistrationIdentification
	(*timestamppb.Timestamp)(nil),                // 5: google.protobuf.Timestamp
	(*v1.ExtendedSerialNumber)(nil),              // 6: wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumber
}
var file_wayplatform_connect_tachograph_card_v1_calibration_proto_depIdxs = []int32{
	1,  // 0: wayplatform.connect.tachograph.card.v1.Calibration.records:type_name -> wayplatform.connect.tachograph.card.v1.Calibration.Record
	2,  // 1: wayplatform.connect.tachograph.card.v1.Calibration.Record.calibration_purpose:type_name -> wayplatform.connect.tachograph.datadictionary.v1.CalibrationPurpose
	3,  // 2: wayplatform.connect.tachograph.card.v1.Calibration.Record.vehicle_identification_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	4,  // 3: wayplatform.connect.tachograph.card.v1.Calibration.Record.vehicle_registration:type_name -> wayplatform.connect.tachograph.datadictionary.v1.VehicleRegistrationIdentification
	3,  // 4: wayplatform.connect.tachograph.card.v1.Calibration.Record.tyre_size:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	5,  // 5: wayplatform.connect.tachograph.card.v1.Calibration.Record.old_time:type_name -> google.protobuf.Timestamp
	5,  // 6: wayplatform.connect.tachograph.card.v1.Calibration.Record.new_time:type_name -> google.protobuf.Timestamp
	5,  // 7: wayplatform.connect.tachograph.card.v1.Calibration.Record.next_calibration_date:type_name -> google.protobuf.Timestamp
	3,  // 8: wayplatform.connect.tachograph.card.v1.Calibration.Record.vu_part_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.StringValue
	6,  // 9: wayplatform.connect.tachograph.card.v1.Calibration.Record.vu_serial_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumber
	6,  // 10: wayplatform.connect.tachograph.card.v1.Calibration.Record.sensor_serial_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumber
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_calibration_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_calibration_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_calibration_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_calibration_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_calibration_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_calibration_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_calibration_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_calibration_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_calibration_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_calibration_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_calibration_proto_depIdxs = nil
}
