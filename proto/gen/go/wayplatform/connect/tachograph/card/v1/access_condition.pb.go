// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/access_condition.proto

package cardv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccessCondition defines the security conditions required to perform an operation (e.g., read, update) on a file.
// The conditions determine whether an operation is allowed and what level of security (e.g., secure messaging) is required.
type AccessCondition int32

const (
	// Unspecified access condition.
	AccessCondition_ACCESS_CONDITION_UNSPECIFIED AccessCondition = 0
	// ALW (Always): The action is always possible without any security restrictions.
	AccessCondition_ALW AccessCondition = 1
	// NEV (Never): The action is never possible.
	AccessCondition_NEV AccessCondition = 2
	// SC1 (Security Condition 1): Always possible, or with Gen2 secure messaging (authentication-only).
	AccessCondition_SC1 AccessCondition = 3
	// SC2 (Security Condition 2): Always possible, or with Gen1 or Gen2 secure messaging (authentication-only).
	AccessCondition_SC2 AccessCondition = 4
	// SC3 (Security Condition 3): Requires Gen1 or Gen2 secure messaging (authentication-only).
	AccessCondition_SC3 AccessCondition = 5
	// SC4 (Security Condition 4): Requires Gen1 or Gen2 secure messaging (encrypt-then-authenticate for response).
	AccessCondition_SC4 AccessCondition = 6
	// SC5 (Security Condition 5): Requires Gen2 secure messaging (encrypt-then-authenticate for response).
	AccessCondition_SC5 AccessCondition = 7
	// SC6 (Security Condition 6): Requires Gen1 external authentication or Gen1/Gen2 secure messaging.
	AccessCondition_SC6 AccessCondition = 8
	// SM_MAC_G1: Secure Messaging with MAC (Generation 1)
	AccessCondition_SM_MAC_G1 AccessCondition = 9
	// SM_MAC_G2: Secure Messaging with MAC (Generation 2)
	AccessCondition_SM_MAC_G2 AccessCondition = 10
	// SM_C_MAC_G1: Secure Messaging Command MAC (Generation 1)
	AccessCondition_SM_C_MAC_G1 AccessCondition = 11
	// SM_C_MAC_G2: Secure Messaging Command MAC (Generation 2)
	AccessCondition_SM_C_MAC_G2 AccessCondition = 12
	// SM_R_ENC_MAC_G1: Secure Messaging Response Encryption MAC (Generation 1)
	AccessCondition_SM_R_ENC_MAC_G1 AccessCondition = 13
	// SM_R_ENC_MAC_G2: Secure Messaging Response Encryption MAC (Generation 2)
	AccessCondition_SM_R_ENC_MAC_G2 AccessCondition = 14
	// EXT_AUT_G1: External Authentication (Generation 1)
	AccessCondition_EXT_AUT_G1 AccessCondition = 15
)

// Enum value maps for AccessCondition.
var (
	AccessCondition_name = map[int32]string{
		0:  "ACCESS_CONDITION_UNSPECIFIED",
		1:  "ALW",
		2:  "NEV",
		3:  "SC1",
		4:  "SC2",
		5:  "SC3",
		6:  "SC4",
		7:  "SC5",
		8:  "SC6",
		9:  "SM_MAC_G1",
		10: "SM_MAC_G2",
		11: "SM_C_MAC_G1",
		12: "SM_C_MAC_G2",
		13: "SM_R_ENC_MAC_G1",
		14: "SM_R_ENC_MAC_G2",
		15: "EXT_AUT_G1",
	}
	AccessCondition_value = map[string]int32{
		"ACCESS_CONDITION_UNSPECIFIED": 0,
		"ALW":                          1,
		"NEV":                          2,
		"SC1":                          3,
		"SC2":                          4,
		"SC3":                          5,
		"SC4":                          6,
		"SC5":                          7,
		"SC6":                          8,
		"SM_MAC_G1":                    9,
		"SM_MAC_G2":                    10,
		"SM_C_MAC_G1":                  11,
		"SM_C_MAC_G2":                  12,
		"SM_R_ENC_MAC_G1":              13,
		"SM_R_ENC_MAC_G2":              14,
		"EXT_AUT_G1":                   15,
	}
)

func (x AccessCondition) Enum() *AccessCondition {
	p := new(AccessCondition)
	*p = x
	return p
}

func (x AccessCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_wayplatform_connect_tachograph_card_v1_access_condition_proto_enumTypes[0].Descriptor()
}

func (AccessCondition) Type() protoreflect.EnumType {
	return &file_wayplatform_connect_tachograph_card_v1_access_condition_proto_enumTypes[0]
}

func (x AccessCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

var File_wayplatform_connect_tachograph_card_v1_access_condition_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_access_condition_proto_rawDesc = "" +
	"\n" +
	"=wayplatform/connect/tachograph/card/v1/access_condition.proto\x12&wayplatform.connect.tachograph.card.v1*\xf5\x01\n" +
	"\x0fAccessCondition\x12 \n" +
	"\x1cACCESS_CONDITION_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03ALW\x10\x01\x12\a\n" +
	"\x03NEV\x10\x02\x12\a\n" +
	"\x03SC1\x10\x03\x12\a\n" +
	"\x03SC2\x10\x04\x12\a\n" +
	"\x03SC3\x10\x05\x12\a\n" +
	"\x03SC4\x10\x06\x12\a\n" +
	"\x03SC5\x10\a\x12\a\n" +
	"\x03SC6\x10\b\x12\r\n" +
	"\tSM_MAC_G1\x10\t\x12\r\n" +
	"\tSM_MAC_G2\x10\n" +
	"\x12\x0f\n" +
	"\vSM_C_MAC_G1\x10\v\x12\x0f\n" +
	"\vSM_C_MAC_G2\x10\f\x12\x13\n" +
	"\x0fSM_R_ENC_MAC_G1\x10\r\x12\x13\n" +
	"\x0fSM_R_ENC_MAC_G2\x10\x0e\x12\x0e\n" +
	"\n" +
	"EXT_AUT_G1\x10\x0fB\xe1\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x14AccessConditionProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_access_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_access_condition_proto_goTypes = []any{
	(AccessCondition)(0), // 0: wayplatform.connect.tachograph.card.v1.AccessCondition
}
var file_wayplatform_connect_tachograph_card_v1_access_condition_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_access_condition_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_access_condition_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_access_condition_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_access_condition_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_access_condition_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_access_condition_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_access_condition_proto_depIdxs,
		EnumInfos:         file_wayplatform_connect_tachograph_card_v1_access_condition_proto_enumTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_access_condition_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_access_condition_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_access_condition_proto_depIdxs = nil
}
