// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/certificates.proto

package cardv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Certificates holds the raw data of all certificate Elementary Files
// downloaded from a tachograph card.
type Certificates struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CardCertificate     []byte                 `protobuf:"bytes,1,opt,name=card_certificate,json=cardCertificate"`
	xxx_hidden_CaCertificate       []byte                 `protobuf:"bytes,2,opt,name=ca_certificate,json=caCertificate"`
	xxx_hidden_CardSignCertificate []byte                 `protobuf:"bytes,3,opt,name=card_sign_certificate,json=cardSignCertificate"`
	xxx_hidden_LinkCertificate     []byte                 `protobuf:"bytes,4,opt,name=link_certificate,json=linkCertificate"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Certificates) Reset() {
	*x = Certificates{}
	mi := &file_wayplatform_connect_tachograph_card_v1_certificates_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificates) ProtoMessage() {}

func (x *Certificates) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_certificates_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Certificates) GetCardCertificate() []byte {
	if x != nil {
		return x.xxx_hidden_CardCertificate
	}
	return nil
}

func (x *Certificates) GetCaCertificate() []byte {
	if x != nil {
		return x.xxx_hidden_CaCertificate
	}
	return nil
}

func (x *Certificates) GetCardSignCertificate() []byte {
	if x != nil {
		return x.xxx_hidden_CardSignCertificate
	}
	return nil
}

func (x *Certificates) GetLinkCertificate() []byte {
	if x != nil {
		return x.xxx_hidden_LinkCertificate
	}
	return nil
}

func (x *Certificates) SetCardCertificate(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_CardCertificate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *Certificates) SetCaCertificate(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_CaCertificate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *Certificates) SetCardSignCertificate(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_CardSignCertificate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *Certificates) SetLinkCertificate(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_LinkCertificate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *Certificates) HasCardCertificate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Certificates) HasCaCertificate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Certificates) HasCardSignCertificate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Certificates) HasLinkCertificate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Certificates) ClearCardCertificate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CardCertificate = nil
}

func (x *Certificates) ClearCaCertificate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CaCertificate = nil
}

func (x *Certificates) ClearCardSignCertificate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_CardSignCertificate = nil
}

func (x *Certificates) ClearLinkCertificate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_LinkCertificate = nil
}

type Certificates_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Raw data of the card's public key certificate for mutual authentication.
	//
	// Corresponds to:
	//   - Gen1: EF_Card_Certificate (FID 0xC100), DD 2.12 `CardCertificate`
	//   - Gen2: EF_CardMA_Certificate (FID 0xC100), DD 2.25 `CardMACertificate`
	//
	// ASN.1 Specification (see DD 2.41, `Certificate`):
	//
	//	Gen1: Certificate ::= OCTET STRING (SIZE(194))
	//	Gen2: Certificate ::= OCTET STRING (SIZE (204..341))
	CardCertificate []byte
	// Raw data of the Certification Authority's public key certificate.
	//
	// Corresponds to EF_CA_Certificate (FID 0xC108).
	// See Data Dictionary, Section 2.96, `MemberStateCertificate`.
	//
	// ASN.1 Specification (see DD 2.41, `Certificate`):
	//
	//	Gen1: Certificate ::= OCTET STRING (SIZE(194))
	//	Gen2: Certificate ::= OCTET STRING (SIZE (204..341))
	CaCertificate []byte
	// Raw data of the card's public key certificate for digital signatures (Gen2+).
	//
	// Corresponds to EF_CardSignCertificate (FID 0xC101).
	// See Data Dictionary, Section 2.32, `CardSignCertificate`.
	//
	// ASN.1 Specification (see DD 2.41, `Certificate`):
	//
	//	Certificate ::= OCTET STRING (SIZE (204..341))
	CardSignCertificate []byte
	// Raw data of the link certificate for chaining root CAs (Gen2+).
	//
	// Corresponds to EF_Link_Certificate (FID 0xC109).
	// See Data Dictionary, Section 2.90b, `LinkCertificate`.
	//
	// ASN.1 Specification (see DD 2.41, `Certificate`):
	//
	//	Certificate ::= OCTET STRING (SIZE (204..341))
	LinkCertificate []byte
}

func (b0 Certificates_builder) Build() *Certificates {
	m0 := &Certificates{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CardCertificate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_CardCertificate = b.CardCertificate
	}
	if b.CaCertificate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_CaCertificate = b.CaCertificate
	}
	if b.CardSignCertificate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_CardSignCertificate = b.CardSignCertificate
	}
	if b.LinkCertificate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_LinkCertificate = b.LinkCertificate
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_certificates_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_certificates_proto_rawDesc = "" +
	"\n" +
	"9wayplatform/connect/tachograph/card/v1/certificates.proto\x12&wayplatform.connect.tachograph.card.v1\"\xbf\x01\n" +
	"\fCertificates\x12)\n" +
	"\x10card_certificate\x18\x01 \x01(\fR\x0fcardCertificate\x12%\n" +
	"\x0eca_certificate\x18\x02 \x01(\fR\rcaCertificate\x122\n" +
	"\x15card_sign_certificate\x18\x03 \x01(\fR\x13cardSignCertificate\x12)\n" +
	"\x10link_certificate\x18\x04 \x01(\fR\x0flinkCertificateB\xde\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x11CertificatesProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_certificates_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_certificates_proto_goTypes = []any{
	(*Certificates)(nil), // 0: wayplatform.connect.tachograph.card.v1.Certificates
}
var file_wayplatform_connect_tachograph_card_v1_certificates_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_certificates_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_certificates_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_certificates_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_certificates_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_certificates_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_certificates_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_certificates_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_certificates_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_certificates_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_certificates_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_certificates_proto_depIdxs = nil
}
