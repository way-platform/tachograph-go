// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/border_crossings.proto

package cardv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents border crossing data from EF_Border_Crossings.
//
// Corresponds to the `CardBorderCrossings` data type.
// See Data Dictionary, Section 2.11a.
type BorderCrossings struct {
	state                        protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_NewestRecordIndex int32                      `protobuf:"varint,1,opt,name=newest_record_index,json=newestRecordIndex"`
	xxx_hidden_Records           *[]*BorderCrossings_Record `protobuf:"bytes,2,rep,name=records"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *BorderCrossings) Reset() {
	*x = BorderCrossings{}
	mi := &file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BorderCrossings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BorderCrossings) ProtoMessage() {}

func (x *BorderCrossings) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BorderCrossings) GetNewestRecordIndex() int32 {
	if x != nil {
		return x.xxx_hidden_NewestRecordIndex
	}
	return 0
}

func (x *BorderCrossings) GetRecords() []*BorderCrossings_Record {
	if x != nil {
		if x.xxx_hidden_Records != nil {
			return *x.xxx_hidden_Records
		}
	}
	return nil
}

func (x *BorderCrossings) SetNewestRecordIndex(v int32) {
	x.xxx_hidden_NewestRecordIndex = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *BorderCrossings) SetRecords(v []*BorderCrossings_Record) {
	x.xxx_hidden_Records = &v
}

func (x *BorderCrossings) HasNewestRecordIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BorderCrossings) ClearNewestRecordIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_NewestRecordIndex = 0
}

type BorderCrossings_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Index of the last updated record.
	NewestRecordIndex *int32
	// The set of border crossing records.
	Records []*BorderCrossings_Record
}

func (b0 BorderCrossings_builder) Build() *BorderCrossings {
	m0 := &BorderCrossings{}
	b, x := &b0, m0
	_, _ = b, x
	if b.NewestRecordIndex != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_NewestRecordIndex = *b.NewestRecordIndex
	}
	x.xxx_hidden_Records = &b.Records
	return m0
}

// Represents a single border crossing record.
//
// Corresponds to the `CardBorderCrossingRecord` data type.
// See Data Dictionary, Section 2.11b.
type BorderCrossings_Record struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CountryLeft         int32                  `protobuf:"varint,1,opt,name=country_left,json=countryLeft"`
	xxx_hidden_CountryEntered      int32                  `protobuf:"varint,2,opt,name=country_entered,json=countryEntered"`
	xxx_hidden_GnssPlaceAuthRecord *GnssPlaceAuthRecord   `protobuf:"bytes,3,opt,name=gnss_place_auth_record,json=gnssPlaceAuthRecord"`
	xxx_hidden_VehicleOdometerKm   int32                  `protobuf:"varint,4,opt,name=vehicle_odometer_km,json=vehicleOdometerKm"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *BorderCrossings_Record) Reset() {
	*x = BorderCrossings_Record{}
	mi := &file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BorderCrossings_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BorderCrossings_Record) ProtoMessage() {}

func (x *BorderCrossings_Record) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BorderCrossings_Record) GetCountryLeft() int32 {
	if x != nil {
		return x.xxx_hidden_CountryLeft
	}
	return 0
}

func (x *BorderCrossings_Record) GetCountryEntered() int32 {
	if x != nil {
		return x.xxx_hidden_CountryEntered
	}
	return 0
}

func (x *BorderCrossings_Record) GetGnssPlaceAuthRecord() *GnssPlaceAuthRecord {
	if x != nil {
		return x.xxx_hidden_GnssPlaceAuthRecord
	}
	return nil
}

func (x *BorderCrossings_Record) GetVehicleOdometerKm() int32 {
	if x != nil {
		return x.xxx_hidden_VehicleOdometerKm
	}
	return 0
}

func (x *BorderCrossings_Record) SetCountryLeft(v int32) {
	x.xxx_hidden_CountryLeft = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *BorderCrossings_Record) SetCountryEntered(v int32) {
	x.xxx_hidden_CountryEntered = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *BorderCrossings_Record) SetGnssPlaceAuthRecord(v *GnssPlaceAuthRecord) {
	x.xxx_hidden_GnssPlaceAuthRecord = v
}

func (x *BorderCrossings_Record) SetVehicleOdometerKm(v int32) {
	x.xxx_hidden_VehicleOdometerKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *BorderCrossings_Record) HasCountryLeft() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BorderCrossings_Record) HasCountryEntered() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BorderCrossings_Record) HasGnssPlaceAuthRecord() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GnssPlaceAuthRecord != nil
}

func (x *BorderCrossings_Record) HasVehicleOdometerKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *BorderCrossings_Record) ClearCountryLeft() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CountryLeft = 0
}

func (x *BorderCrossings_Record) ClearCountryEntered() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CountryEntered = 0
}

func (x *BorderCrossings_Record) ClearGnssPlaceAuthRecord() {
	x.xxx_hidden_GnssPlaceAuthRecord = nil
}

func (x *BorderCrossings_Record) ClearVehicleOdometerKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_VehicleOdometerKm = 0
}

type BorderCrossings_Record_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Country the vehicle is leaving. See DD Section 2.101 for `NationNumeric`.
	CountryLeft *int32
	// Country the vehicle is entering. See DD Section 2.101 for `NationNumeric`.
	CountryEntered *int32
	// Authenticated position of the vehicle at the time of crossing.
	GnssPlaceAuthRecord *GnssPlaceAuthRecord
	// Odometer at the time of crossing. See DD Section 2.113 for `OdometerShort`.
	VehicleOdometerKm *int32
}

func (b0 BorderCrossings_Record_builder) Build() *BorderCrossings_Record {
	m0 := &BorderCrossings_Record{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CountryLeft != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_CountryLeft = *b.CountryLeft
	}
	if b.CountryEntered != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_CountryEntered = *b.CountryEntered
	}
	x.xxx_hidden_GnssPlaceAuthRecord = b.GnssPlaceAuthRecord
	if b.VehicleOdometerKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_VehicleOdometerKm = *b.VehicleOdometerKm
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_border_crossings_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_rawDesc = "" +
	"\n" +
	"=wayplatform/connect/tachograph/card/v1/border_crossings.proto\x12&wayplatform.connect.tachograph.card.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1aCwayplatform/connect/tachograph/card/v1/gnss_place_auth_record.proto\"\x94\x03\n" +
	"\x0fBorderCrossings\x12.\n" +
	"\x13newest_record_index\x18\x01 \x01(\x05R\x11newestRecordIndex\x12X\n" +
	"\arecords\x18\x02 \x03(\v2>.wayplatform.connect.tachograph.card.v1.BorderCrossings.RecordR\arecords\x1a\xf6\x01\n" +
	"\x06Record\x12!\n" +
	"\fcountry_left\x18\x01 \x01(\x05R\vcountryLeft\x12'\n" +
	"\x0fcountry_entered\x18\x02 \x01(\x05R\x0ecountryEntered\x12p\n" +
	"\x16gnss_place_auth_record\x18\x03 \x01(\v2;.wayplatform.connect.tachograph.card.v1.GnssPlaceAuthRecordR\x13gnssPlaceAuthRecord\x12.\n" +
	"\x13vehicle_odometer_km\x18\x04 \x01(\x05R\x11vehicleOdometerKmB\xe1\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x14BorderCrossingsProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_goTypes = []any{
	(*BorderCrossings)(nil),        // 0: wayplatform.connect.tachograph.card.v1.BorderCrossings
	(*BorderCrossings_Record)(nil), // 1: wayplatform.connect.tachograph.card.v1.BorderCrossings.Record
	(*GnssPlaceAuthRecord)(nil),    // 2: wayplatform.connect.tachograph.card.v1.GnssPlaceAuthRecord
}
var file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.BorderCrossings.records:type_name -> wayplatform.connect.tachograph.card.v1.BorderCrossings.Record
	2, // 1: wayplatform.connect.tachograph.card.v1.BorderCrossings.Record.gnss_place_auth_record:type_name -> wayplatform.connect.tachograph.card.v1.GnssPlaceAuthRecord
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_border_crossings_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_card_v1_gnss_place_auth_record_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_border_crossings_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_border_crossings_proto_depIdxs = nil
}
