// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/specific_conditions_g2.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_Specific_Conditions file for Generation 2.
//
// This is a circular buffer that may contain corrupted records due to overwrites.
// Records store specific conditions such as Ferry/Train crossings.
//
// Gen2: Variable size with newest record pointer (circular buffer structure).
//
// The file structure is specified in Appendix 2, Section 4.2.2 (TCS_152):
//
//	EF Specific_Conditions
//	└─SpecificConditions
//
// The data type `SpecificConditions` is specified in the Data Dictionary, Section 2.153.
//
// ASN.1 Definition (Gen2):
//
//	SpecificConditions ::= SEQUENCE {
//	    conditionPointerNewestRecord NoOfSpecificConditionRecords,
//	    specificConditionRecords SET SIZE(NoOfSpecificConditionRecords) OF SpecificConditionRecord
//	}
type SpecificConditionsG2 struct {
	state                        protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_NewestRecordIndex int32                          `protobuf:"varint,1,opt,name=newest_record_index,json=newestRecordIndex"`
	xxx_hidden_Records           *[]*v1.SpecificConditionRecord `protobuf:"bytes,2,rep,name=records"`
	xxx_hidden_TrailingBytes     []byte                         `protobuf:"bytes,3,opt,name=trailing_bytes,json=trailingBytes"`
	xxx_hidden_Signature         []byte                         `protobuf:"bytes,4,opt,name=signature"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *SpecificConditionsG2) Reset() {
	*x = SpecificConditionsG2{}
	mi := &file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecificConditionsG2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificConditionsG2) ProtoMessage() {}

func (x *SpecificConditionsG2) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SpecificConditionsG2) GetNewestRecordIndex() int32 {
	if x != nil {
		return x.xxx_hidden_NewestRecordIndex
	}
	return 0
}

func (x *SpecificConditionsG2) GetRecords() []*v1.SpecificConditionRecord {
	if x != nil {
		if x.xxx_hidden_Records != nil {
			return *x.xxx_hidden_Records
		}
	}
	return nil
}

func (x *SpecificConditionsG2) GetTrailingBytes() []byte {
	if x != nil {
		return x.xxx_hidden_TrailingBytes
	}
	return nil
}

func (x *SpecificConditionsG2) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *SpecificConditionsG2) SetNewestRecordIndex(v int32) {
	x.xxx_hidden_NewestRecordIndex = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *SpecificConditionsG2) SetRecords(v []*v1.SpecificConditionRecord) {
	x.xxx_hidden_Records = &v
}

func (x *SpecificConditionsG2) SetTrailingBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_TrailingBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *SpecificConditionsG2) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *SpecificConditionsG2) HasNewestRecordIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SpecificConditionsG2) HasTrailingBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SpecificConditionsG2) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SpecificConditionsG2) ClearNewestRecordIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_NewestRecordIndex = 0
}

func (x *SpecificConditionsG2) ClearTrailingBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_TrailingBytes = nil
}

func (x *SpecificConditionsG2) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Signature = nil
}

type SpecificConditionsG2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Index of the newest record in the circular buffer.
	//
	// Corresponds to `conditionPointerNewestRecord` in DD Section 2.153.
	// Valid range: 0 to (number of records - 1).
	NewestRecordIndex *int32
	// Specific condition records from the circular buffer (Generation 2 format).
	//
	// Each record is 5 bytes. Records may be valid (successfully parsed) or
	// corrupted (from buffer overwrites).
	//
	// Corresponds to `specificConditionRecords` in DD Section 2.153.
	Records []*v1.SpecificConditionRecord
	// Trailing bytes that don't form complete records (for roundtrip fidelity).
	TrailingBytes []byte
	// Signature data from the following file block, if tagged as a signature for
	// this EF according to the card file format specification (Appendix 2).
	//
	// Gen2: ECDSA signature, variable size based on elliptic curve
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	Signature []byte
}

func (b0 SpecificConditionsG2_builder) Build() *SpecificConditionsG2 {
	m0 := &SpecificConditionsG2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.NewestRecordIndex != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_NewestRecordIndex = *b.NewestRecordIndex
	}
	x.xxx_hidden_Records = &b.Records
	if b.TrailingBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_TrailingBytes = b.TrailingBytes
	}
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Signature = b.Signature
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_rawDesc = "" +
	"\n" +
	"Cwayplatform/connect/tachograph/card/v1/specific_conditions_g2.proto\x12&wayplatform.connect.tachograph.card.v1\x1aDwayplatform/connect/tachograph/dd/v1/specific_condition_record.proto\"\xe4\x01\n" +
	"\x14SpecificConditionsG2\x12.\n" +
	"\x13newest_record_index\x18\x01 \x01(\x05R\x11newestRecordIndex\x12W\n" +
	"\arecords\x18\x02 \x03(\v2=.wayplatform.connect.tachograph.dd.v1.SpecificConditionRecordR\arecords\x12%\n" +
	"\x0etrailing_bytes\x18\x03 \x01(\fR\rtrailingBytes\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignatureB\xe6\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x19SpecificConditionsG2ProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_goTypes = []any{
	(*SpecificConditionsG2)(nil),       // 0: wayplatform.connect.tachograph.card.v1.SpecificConditionsG2
	(*v1.SpecificConditionRecord)(nil), // 1: wayplatform.connect.tachograph.dd.v1.SpecificConditionRecord
}
var file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.SpecificConditionsG2.records:type_name -> wayplatform.connect.tachograph.dd.v1.SpecificConditionRecord
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_specific_conditions_g2_proto_depIdxs = nil
}
