// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/company_application_identification.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the application identification data for a company card.
//
// See Data Dictionary, Section 2.48, `CompanyCardApplicationIdentification`.
//
// ASN.1 Specification:
//
//	CompanyCardApplicationIdentification ::= SEQUENCE {
//	    typeOfTachographCardId EquipmentType,
//	    cardStructureVersion CardStructureVersion,
//	    noOfCompanyActivityRecords NoOfCompanyActivityRecords
//	}
type CompanyApplicationIdentification struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TypeOfTachographCardId      v1.EquipmentType       `protobuf:"varint,1,opt,name=type_of_tachograph_card_id,json=typeOfTachographCardId,enum=wayplatform.connect.tachograph.datadictionary.v1.EquipmentType"`
	xxx_hidden_CardStructureVersion        []byte                 `protobuf:"bytes,3,opt,name=card_structure_version,json=cardStructureVersion"`
	xxx_hidden_CompanyActivityRecordsCount int32                  `protobuf:"varint,4,opt,name=company_activity_records_count,json=companyActivityRecordsCount"`
	XXX_raceDetectHookData                 protoimpl.RaceDetectHookData
	XXX_presence                           [1]uint32
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *CompanyApplicationIdentification) Reset() {
	*x = CompanyApplicationIdentification{}
	mi := &file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyApplicationIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyApplicationIdentification) ProtoMessage() {}

func (x *CompanyApplicationIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CompanyApplicationIdentification) GetTypeOfTachographCardId() v1.EquipmentType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_TypeOfTachographCardId
		}
	}
	return v1.EquipmentType(0)
}

func (x *CompanyApplicationIdentification) GetCardStructureVersion() []byte {
	if x != nil {
		return x.xxx_hidden_CardStructureVersion
	}
	return nil
}

func (x *CompanyApplicationIdentification) GetCompanyActivityRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CompanyActivityRecordsCount
	}
	return 0
}

func (x *CompanyApplicationIdentification) SetTypeOfTachographCardId(v v1.EquipmentType) {
	x.xxx_hidden_TypeOfTachographCardId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *CompanyApplicationIdentification) SetCardStructureVersion(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_CardStructureVersion = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *CompanyApplicationIdentification) SetCompanyActivityRecordsCount(v int32) {
	x.xxx_hidden_CompanyActivityRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *CompanyApplicationIdentification) HasTypeOfTachographCardId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CompanyApplicationIdentification) HasCardStructureVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CompanyApplicationIdentification) HasCompanyActivityRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CompanyApplicationIdentification) ClearTypeOfTachographCardId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_TypeOfTachographCardId = v1.EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED
}

func (x *CompanyApplicationIdentification) ClearCardStructureVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardStructureVersion = nil
}

func (x *CompanyApplicationIdentification) ClearCompanyActivityRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_CompanyActivityRecordsCount = 0
}

type CompanyApplicationIdentification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The type of tachograph card.
	//
	// See Data Dictionary, Section 2.67, `EquipmentType`.
	// ASN.1 Specification:
	//
	//	EquipmentType ::= INTEGER (0..255)
	TypeOfTachographCardId *v1.EquipmentType
	// The version of the card structure.
	//
	// See Data Dictionary, Section 2.36, `CardStructureVersion`.
	// ASN.1 Specification:
	//
	//	CardStructureVersion ::= OCTET STRING (SIZE (2))
	CardStructureVersion []byte
	// The number of company activity records the card can store.
	//
	// See Data Dictionary, Section 2.107, `NoOfCompanyActivityRecords`.
	// ASN.1 Specification:
	//
	//	NoOfCompanyActivityRecords ::= INTEGER(0..65535)
	CompanyActivityRecordsCount *int32
}

func (b0 CompanyApplicationIdentification_builder) Build() *CompanyApplicationIdentification {
	m0 := &CompanyApplicationIdentification{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TypeOfTachographCardId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_TypeOfTachographCardId = *b.TypeOfTachographCardId
	}
	if b.CardStructureVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_CardStructureVersion = b.CardStructureVersion
	}
	if b.CompanyActivityRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_CompanyActivityRecordsCount = *b.CompanyActivityRecordsCount
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_company_application_identification_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_rawDesc = "" +
	"\n" +
	"Owayplatform/connect/tachograph/card/v1/company_application_identification.proto\x12&wayplatform.connect.tachograph.card.v1\x1aEwayplatform/connect/tachograph/datadictionary/v1/equipment_type.proto\"\x9a\x02\n" +
	" CompanyApplicationIdentification\x12{\n" +
	"\x1atype_of_tachograph_card_id\x18\x01 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.EquipmentTypeR\x16typeOfTachographCardId\x124\n" +
	"\x16card_structure_version\x18\x03 \x01(\fR\x14cardStructureVersion\x12C\n" +
	"\x1ecompany_activity_records_count\x18\x04 \x01(\x05R\x1bcompanyActivityRecordsCountB\xf2\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B%CompanyApplicationIdentificationProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_goTypes = []any{
	(*CompanyApplicationIdentification)(nil), // 0: wayplatform.connect.tachograph.card.v1.CompanyApplicationIdentification
	(v1.EquipmentType)(0),                    // 1: wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
}
var file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.CompanyApplicationIdentification.type_of_tachograph_card_id:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() {
	file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_init()
}
func file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_company_application_identification_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_company_application_identification_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_company_application_identification_proto_depIdxs = nil
}
