// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/specific_conditions.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_Specific_Conditions file for Generation 1.
//
// Gen1 uses a fixed-size array of 56 records with no circular buffer pointer.
// This provides 280 bytes total storage (56 records × 5 bytes each).
//
// Gen1: Fixed 56 records, no pointer.
//
// The file structure is specified in Appendix 2, Section 4.2.1 (TCS_150):
//
//	EF Specific_Conditions
//	└─SpecificConditions
//
// The data type `SpecificConditions` is specified in the Data Dictionary, Section 2.153.
//
// ASN.1 Definition (Gen1):
//
//	SpecificConditions ::= SET SIZE(56) OF SpecificConditionRecord
type SpecificConditions struct {
	state                        protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_Records           *[]*v1.SpecificConditionRecord `protobuf:"bytes,1,rep,name=records"`
	xxx_hidden_RawData           []byte                         `protobuf:"bytes,2,opt,name=raw_data,json=rawData"`
	xxx_hidden_Signature         []byte                         `protobuf:"bytes,3,opt,name=signature"`
	xxx_hidden_SignatureVerified bool                           `protobuf:"varint,4,opt,name=signature_verified,json=signatureVerified"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *SpecificConditions) Reset() {
	*x = SpecificConditions{}
	mi := &file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecificConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificConditions) ProtoMessage() {}

func (x *SpecificConditions) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SpecificConditions) GetRecords() []*v1.SpecificConditionRecord {
	if x != nil {
		if x.xxx_hidden_Records != nil {
			return *x.xxx_hidden_Records
		}
	}
	return nil
}

func (x *SpecificConditions) GetRawData() []byte {
	if x != nil {
		return x.xxx_hidden_RawData
	}
	return nil
}

func (x *SpecificConditions) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *SpecificConditions) GetSignatureVerified() bool {
	if x != nil {
		return x.xxx_hidden_SignatureVerified
	}
	return false
}

func (x *SpecificConditions) SetRecords(v []*v1.SpecificConditionRecord) {
	x.xxx_hidden_Records = &v
}

func (x *SpecificConditions) SetRawData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RawData = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *SpecificConditions) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *SpecificConditions) SetSignatureVerified(v bool) {
	x.xxx_hidden_SignatureVerified = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *SpecificConditions) HasRawData() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SpecificConditions) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SpecificConditions) HasSignatureVerified() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SpecificConditions) ClearRawData() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_RawData = nil
}

func (x *SpecificConditions) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Signature = nil
}

func (x *SpecificConditions) ClearSignatureVerified() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_SignatureVerified = false
}

type SpecificConditions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The fixed array of 56 specific condition records.
	//
	// Each record is 5 bytes (entryTime + specificConditionType).
	//
	// See Data Dictionary, Section 2.152, `SpecificConditionRecord`.
	Records []*v1.SpecificConditionRecord
	// Complete raw binary data (all 56 records).
	//
	// Used as canvas for raw data painting during marshalling to preserve
	// unknown bits and ensure perfect round-trip fidelity.
	//
	// Length: 56 records × 5 bytes = 280 bytes (fixed)
	RawData []byte
	// Signature data from the following file block, if tagged as a signature for
	// this EF according to the card file format specification (Appendix 2).
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	//
	// ASN.1 Definition (Gen1):
	//
	//	Signature ::= OCTET STRING (SIZE(128))
	//
	// ASN.1 Definition (Gen2):
	//
	//	Signature ::= OCTET STRING (variable size, depends on elliptic curve)
	//
	// Gen2 uses ECDSA signatures with variable lengths based on the curve:
	// - 256-bit curves: ~64 bytes
	// - 384-bit curves: ~96 bytes
	// - 512/521-bit curves: ~128-132 bytes
	Signature []byte
	// Indicates if the signature has been successfully verified.
	SignatureVerified *bool
}

func (b0 SpecificConditions_builder) Build() *SpecificConditions {
	m0 := &SpecificConditions{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Records = &b.Records
	if b.RawData != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_RawData = b.RawData
	}
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Signature = b.Signature
	}
	if b.SignatureVerified != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_SignatureVerified = *b.SignatureVerified
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_specific_conditions_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_rawDesc = "" +
	"\n" +
	"@wayplatform/connect/tachograph/card/v1/specific_conditions.proto\x12&wayplatform.connect.tachograph.card.v1\x1aDwayplatform/connect/tachograph/dd/v1/specific_condition_record.proto\"\xd5\x01\n" +
	"\x12SpecificConditions\x12W\n" +
	"\arecords\x18\x01 \x03(\v2=.wayplatform.connect.tachograph.dd.v1.SpecificConditionRecordR\arecords\x12\x19\n" +
	"\braw_data\x18\x02 \x01(\fR\arawData\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\x12-\n" +
	"\x12signature_verified\x18\x04 \x01(\bR\x11signatureVerifiedB\xe4\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\x17SpecificConditionsProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_goTypes = []any{
	(*SpecificConditions)(nil),         // 0: wayplatform.connect.tachograph.card.v1.SpecificConditions
	(*v1.SpecificConditionRecord)(nil), // 1: wayplatform.connect.tachograph.dd.v1.SpecificConditionRecord
}
var file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.SpecificConditions.records:type_name -> wayplatform.connect.tachograph.dd.v1.SpecificConditionRecord
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_specific_conditions_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_specific_conditions_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_specific_conditions_proto_depIdxs = nil
}
