// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/driver_card_application_identification.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the application identification data for a driver card.
//
// See Data Dictionary, Section 2.61, `DriverCardApplicationIdentification`.
//
// ASN.1 Specification (Gen1):
//
//	DriverCardApplicationIdentification ::= SEQUENCE {
//	    typeOfTachographCardId EquipmentType,
//	    cardStructureVersion CardStructureVersion,
//	    noOfEventsPerType NoOfEventsPerType,
//	    noOfFaultsPerType NoOfFaultsPerType,
//	    activityStructureLength CardActivityLengthRange,
//	    noOfCardVehicleRecords NoOfCardVehicleRecords,
//	    noOfCardPlaceRecords NoOfCardPlaceRecords
//	}
//
// ASN.1 Specification (Gen2 adds):
//
//	...
//	noOfGNSSADRecords NoOfGNSSADRecords,
//	noOfSpecificConditionRecords NoOfSpecificConditionRecords,
//	noOfCardVehicleUnitRecords NoOfCardVehicleUnitRecords
type DriverCardApplicationIdentification struct {
	state                                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TypeOfTachographCardId        v1.EquipmentType       `protobuf:"varint,1,opt,name=type_of_tachograph_card_id,json=typeOfTachographCardId,enum=wayplatform.connect.tachograph.datadictionary.v1.EquipmentType"`
	xxx_hidden_CardStructureVersion          []byte                 `protobuf:"bytes,3,opt,name=card_structure_version,json=cardStructureVersion"`
	xxx_hidden_EventsPerTypeCount            int32                  `protobuf:"varint,4,opt,name=events_per_type_count,json=eventsPerTypeCount"`
	xxx_hidden_FaultsPerTypeCount            int32                  `protobuf:"varint,5,opt,name=faults_per_type_count,json=faultsPerTypeCount"`
	xxx_hidden_ActivityStructureLength       int32                  `protobuf:"varint,6,opt,name=activity_structure_length,json=activityStructureLength"`
	xxx_hidden_CardVehicleRecordsCount       int32                  `protobuf:"varint,7,opt,name=card_vehicle_records_count,json=cardVehicleRecordsCount"`
	xxx_hidden_CardPlaceRecordsCount         int32                  `protobuf:"varint,8,opt,name=card_place_records_count,json=cardPlaceRecordsCount"`
	xxx_hidden_GnssAdRecordsCount            int32                  `protobuf:"varint,9,opt,name=gnss_ad_records_count,json=gnssAdRecordsCount"`
	xxx_hidden_SpecificConditionRecordsCount int32                  `protobuf:"varint,10,opt,name=specific_condition_records_count,json=specificConditionRecordsCount"`
	xxx_hidden_CardVehicleUnitRecordsCount   int32                  `protobuf:"varint,11,opt,name=card_vehicle_unit_records_count,json=cardVehicleUnitRecordsCount"`
	xxx_hidden_Signature                     []byte                 `protobuf:"bytes,12,opt,name=signature"`
	XXX_raceDetectHookData                   protoimpl.RaceDetectHookData
	XXX_presence                             [1]uint32
	unknownFields                            protoimpl.UnknownFields
	sizeCache                                protoimpl.SizeCache
}

func (x *DriverCardApplicationIdentification) Reset() {
	*x = DriverCardApplicationIdentification{}
	mi := &file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverCardApplicationIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCardApplicationIdentification) ProtoMessage() {}

func (x *DriverCardApplicationIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DriverCardApplicationIdentification) GetTypeOfTachographCardId() v1.EquipmentType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_TypeOfTachographCardId
		}
	}
	return v1.EquipmentType(0)
}

func (x *DriverCardApplicationIdentification) GetCardStructureVersion() []byte {
	if x != nil {
		return x.xxx_hidden_CardStructureVersion
	}
	return nil
}

func (x *DriverCardApplicationIdentification) GetEventsPerTypeCount() int32 {
	if x != nil {
		return x.xxx_hidden_EventsPerTypeCount
	}
	return 0
}

func (x *DriverCardApplicationIdentification) GetFaultsPerTypeCount() int32 {
	if x != nil {
		return x.xxx_hidden_FaultsPerTypeCount
	}
	return 0
}

func (x *DriverCardApplicationIdentification) GetActivityStructureLength() int32 {
	if x != nil {
		return x.xxx_hidden_ActivityStructureLength
	}
	return 0
}

func (x *DriverCardApplicationIdentification) GetCardVehicleRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CardVehicleRecordsCount
	}
	return 0
}

func (x *DriverCardApplicationIdentification) GetCardPlaceRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CardPlaceRecordsCount
	}
	return 0
}

func (x *DriverCardApplicationIdentification) GetGnssAdRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_GnssAdRecordsCount
	}
	return 0
}

func (x *DriverCardApplicationIdentification) GetSpecificConditionRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_SpecificConditionRecordsCount
	}
	return 0
}

func (x *DriverCardApplicationIdentification) GetCardVehicleUnitRecordsCount() int32 {
	if x != nil {
		return x.xxx_hidden_CardVehicleUnitRecordsCount
	}
	return 0
}

func (x *DriverCardApplicationIdentification) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *DriverCardApplicationIdentification) SetTypeOfTachographCardId(v v1.EquipmentType) {
	x.xxx_hidden_TypeOfTachographCardId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 11)
}

func (x *DriverCardApplicationIdentification) SetCardStructureVersion(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_CardStructureVersion = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 11)
}

func (x *DriverCardApplicationIdentification) SetEventsPerTypeCount(v int32) {
	x.xxx_hidden_EventsPerTypeCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 11)
}

func (x *DriverCardApplicationIdentification) SetFaultsPerTypeCount(v int32) {
	x.xxx_hidden_FaultsPerTypeCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 11)
}

func (x *DriverCardApplicationIdentification) SetActivityStructureLength(v int32) {
	x.xxx_hidden_ActivityStructureLength = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 11)
}

func (x *DriverCardApplicationIdentification) SetCardVehicleRecordsCount(v int32) {
	x.xxx_hidden_CardVehicleRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 11)
}

func (x *DriverCardApplicationIdentification) SetCardPlaceRecordsCount(v int32) {
	x.xxx_hidden_CardPlaceRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 11)
}

func (x *DriverCardApplicationIdentification) SetGnssAdRecordsCount(v int32) {
	x.xxx_hidden_GnssAdRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 11)
}

func (x *DriverCardApplicationIdentification) SetSpecificConditionRecordsCount(v int32) {
	x.xxx_hidden_SpecificConditionRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 11)
}

func (x *DriverCardApplicationIdentification) SetCardVehicleUnitRecordsCount(v int32) {
	x.xxx_hidden_CardVehicleUnitRecordsCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 11)
}

func (x *DriverCardApplicationIdentification) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 11)
}

func (x *DriverCardApplicationIdentification) HasTypeOfTachographCardId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DriverCardApplicationIdentification) HasCardStructureVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DriverCardApplicationIdentification) HasEventsPerTypeCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *DriverCardApplicationIdentification) HasFaultsPerTypeCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *DriverCardApplicationIdentification) HasActivityStructureLength() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *DriverCardApplicationIdentification) HasCardVehicleRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *DriverCardApplicationIdentification) HasCardPlaceRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *DriverCardApplicationIdentification) HasGnssAdRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *DriverCardApplicationIdentification) HasSpecificConditionRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *DriverCardApplicationIdentification) HasCardVehicleUnitRecordsCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *DriverCardApplicationIdentification) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *DriverCardApplicationIdentification) ClearTypeOfTachographCardId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_TypeOfTachographCardId = v1.EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED
}

func (x *DriverCardApplicationIdentification) ClearCardStructureVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardStructureVersion = nil
}

func (x *DriverCardApplicationIdentification) ClearEventsPerTypeCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_EventsPerTypeCount = 0
}

func (x *DriverCardApplicationIdentification) ClearFaultsPerTypeCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_FaultsPerTypeCount = 0
}

func (x *DriverCardApplicationIdentification) ClearActivityStructureLength() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ActivityStructureLength = 0
}

func (x *DriverCardApplicationIdentification) ClearCardVehicleRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_CardVehicleRecordsCount = 0
}

func (x *DriverCardApplicationIdentification) ClearCardPlaceRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_CardPlaceRecordsCount = 0
}

func (x *DriverCardApplicationIdentification) ClearGnssAdRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_GnssAdRecordsCount = 0
}

func (x *DriverCardApplicationIdentification) ClearSpecificConditionRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_SpecificConditionRecordsCount = 0
}

func (x *DriverCardApplicationIdentification) ClearCardVehicleUnitRecordsCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_CardVehicleUnitRecordsCount = 0
}

func (x *DriverCardApplicationIdentification) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_Signature = nil
}

type DriverCardApplicationIdentification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The type of tachograph card.
	//
	// See Data Dictionary, Section 2.67, `EquipmentType`.
	// ASN.1 Specification:
	//
	//	EquipmentType ::= INTEGER (0..255)
	TypeOfTachographCardId *v1.EquipmentType
	// The version of the card structure.
	//
	// See Data Dictionary, Section 2.36, `CardStructureVersion`.
	// ASN.1 Specification:
	//
	//	CardStructureVersion ::= OCTET STRING (SIZE (2))
	CardStructureVersion []byte
	// The number of events per type the card can record.
	//
	// See Data Dictionary, Section 2.109, `NoOfEventsPerType`.
	// ASN.1 Specification:
	//
	//	NoOfEventsPerType ::= INTEGER(0..255)
	EventsPerTypeCount *int32
	// The number of faults per type the card can record.
	//
	// See Data Dictionary, Section 2.110, `NoOfFaultsPerType`.
	// ASN.1 Specification:
	//
	//	NoOfFaultsPerType ::= INTEGER(0..255)
	FaultsPerTypeCount *int32
	// The number of bytes available for storing activity records.
	//
	// See Data Dictionary, Section 2.10, `CardActivityLengthRange`.
	// ASN.1 Specification:
	//
	//	CardActivityLengthRange ::= INTEGER(0..2^16-1)
	ActivityStructureLength *int32
	// The number of vehicle records the card can contain.
	//
	// See Data Dictionary, Section 2.105, `NoOfCardVehicleRecords`.
	// ASN.1 Specification:
	//
	//	NoOfCardVehicleRecords ::= INTEGER(0..65535)
	CardVehicleRecordsCount *int32
	// The number of place records the card can store.
	//
	// See Data Dictionary, Section 2.104, `NoOfCardPlaceRecords`.
	// ASN.1 Specification:
	//
	//	NoOfCardPlaceRecords ::= INTEGER(0..65535)
	CardPlaceRecordsCount *int32
	// The number of GNSS accumulated driving records the card can store.
	//
	// See Data Dictionary, Section 2.111, `NoOfGNSSADRecords`.
	// ASN.1 Specification:
	//
	//	NoOfGNSSADRecords ::= INTEGER(0..65535)
	GnssAdRecordsCount *int32
	// The number of specific condition records the card can store.
	//
	// See Data Dictionary, Section 2.112, `NoOfSpecificConditionRecords`.
	// ASN.1 Specification:
	//
	//	NoOfSpecificConditionRecords ::= INTEGER(0..255)
	SpecificConditionRecordsCount *int32
	// The number of vehicle units used records the card can store.
	//
	// See Data Dictionary, Section 2.106, `NoOfCardVehicleUnitRecords`.
	// ASN.1 Specification:
	//
	//	NoOfCardVehicleUnitRecords ::= INTEGER(0..65535)
	CardVehicleUnitRecordsCount *int32
	// Digital signature for the EF_Application_Identification file content.
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	// ASN.1 Specification:
	//
	//	Signature ::= OCTET STRING (SIZE(128 for Gen1))
	Signature []byte
}

func (b0 DriverCardApplicationIdentification_builder) Build() *DriverCardApplicationIdentification {
	m0 := &DriverCardApplicationIdentification{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TypeOfTachographCardId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 11)
		x.xxx_hidden_TypeOfTachographCardId = *b.TypeOfTachographCardId
	}
	if b.CardStructureVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 11)
		x.xxx_hidden_CardStructureVersion = b.CardStructureVersion
	}
	if b.EventsPerTypeCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 11)
		x.xxx_hidden_EventsPerTypeCount = *b.EventsPerTypeCount
	}
	if b.FaultsPerTypeCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 11)
		x.xxx_hidden_FaultsPerTypeCount = *b.FaultsPerTypeCount
	}
	if b.ActivityStructureLength != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 11)
		x.xxx_hidden_ActivityStructureLength = *b.ActivityStructureLength
	}
	if b.CardVehicleRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 11)
		x.xxx_hidden_CardVehicleRecordsCount = *b.CardVehicleRecordsCount
	}
	if b.CardPlaceRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 11)
		x.xxx_hidden_CardPlaceRecordsCount = *b.CardPlaceRecordsCount
	}
	if b.GnssAdRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 11)
		x.xxx_hidden_GnssAdRecordsCount = *b.GnssAdRecordsCount
	}
	if b.SpecificConditionRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 11)
		x.xxx_hidden_SpecificConditionRecordsCount = *b.SpecificConditionRecordsCount
	}
	if b.CardVehicleUnitRecordsCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 11)
		x.xxx_hidden_CardVehicleUnitRecordsCount = *b.CardVehicleUnitRecordsCount
	}
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 11)
		x.xxx_hidden_Signature = b.Signature
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_rawDesc = "" +
	"\n" +
	"Swayplatform/connect/tachograph/card/v1/driver_card_application_identification.proto\x12&wayplatform.connect.tachograph.card.v1\x1aEwayplatform/connect/tachograph/datadictionary/v1/equipment_type.proto\"\xd0\x05\n" +
	"#DriverCardApplicationIdentification\x12{\n" +
	"\x1atype_of_tachograph_card_id\x18\x01 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.EquipmentTypeR\x16typeOfTachographCardId\x124\n" +
	"\x16card_structure_version\x18\x03 \x01(\fR\x14cardStructureVersion\x121\n" +
	"\x15events_per_type_count\x18\x04 \x01(\x05R\x12eventsPerTypeCount\x121\n" +
	"\x15faults_per_type_count\x18\x05 \x01(\x05R\x12faultsPerTypeCount\x12:\n" +
	"\x19activity_structure_length\x18\x06 \x01(\x05R\x17activityStructureLength\x12;\n" +
	"\x1acard_vehicle_records_count\x18\a \x01(\x05R\x17cardVehicleRecordsCount\x127\n" +
	"\x18card_place_records_count\x18\b \x01(\x05R\x15cardPlaceRecordsCount\x121\n" +
	"\x15gnss_ad_records_count\x18\t \x01(\x05R\x12gnssAdRecordsCount\x12G\n" +
	" specific_condition_records_count\x18\n" +
	" \x01(\x05R\x1dspecificConditionRecordsCount\x12D\n" +
	"\x1fcard_vehicle_unit_records_count\x18\v \x01(\x05R\x1bcardVehicleUnitRecordsCount\x12\x1c\n" +
	"\tsignature\x18\f \x01(\fR\tsignatureB\xf5\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B(DriverCardApplicationIdentificationProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_goTypes = []any{
	(*DriverCardApplicationIdentification)(nil), // 0: wayplatform.connect.tachograph.card.v1.DriverCardApplicationIdentification
	(v1.EquipmentType)(0),                       // 1: wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
}
var file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.DriverCardApplicationIdentification.type_of_tachograph_card_id:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() {
	file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_init()
}
func file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_driver_card_application_identification_proto_depIdxs = nil
}
