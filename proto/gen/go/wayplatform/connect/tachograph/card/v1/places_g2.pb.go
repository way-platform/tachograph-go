// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/card/v1/places_g2.proto

package cardv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the content of the EF_Places file for Generation 2 cards.
//
// This is the Gen2-specific version with 21-byte place records (includes GNSS).
// For Gen1 format (10-byte records), see Places.
//
// The file structure is specified in Appendix 2, Section 4.2.1.
//
//	EF Places
//	└─CardPlaceDailyWorkPeriod
//
// The data type `CardPlaceDailyWorkPeriod` is specified in the Data Dictionary, Section 2.28.
//
// ASN.1 Definition:
//
//	CardPlaceDailyWorkPeriod ::= SEQUENCE {
//	    placePointerNewestRecord INTEGER(0..NoOfCardPlaceRecords-1),
//	    placeRecords SET SIZE(NoOfCardPlaceRecords) OF PlaceRecord
//	}
//
// Note: PlaceRecord is 21 bytes in Gen2 (includes 11-byte GNSS data).
// This is stored as a circular buffer where placePointerNewestRecord indicates
// the index of the most recently written record.
type PlacesG2 struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NewestRecordIndex int32                  `protobuf:"varint,1,opt,name=newest_record_index,json=newestRecordIndex"`
	xxx_hidden_Records           *[]*v1.PlaceRecordG2   `protobuf:"bytes,2,rep,name=records"`
	xxx_hidden_RawData           []byte                 `protobuf:"bytes,3,opt,name=raw_data,json=rawData"`
	xxx_hidden_Signature         []byte                 `protobuf:"bytes,4,opt,name=signature"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *PlacesG2) Reset() {
	*x = PlacesG2{}
	mi := &file_wayplatform_connect_tachograph_card_v1_places_g2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlacesG2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacesG2) ProtoMessage() {}

func (x *PlacesG2) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_card_v1_places_g2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PlacesG2) GetNewestRecordIndex() int32 {
	if x != nil {
		return x.xxx_hidden_NewestRecordIndex
	}
	return 0
}

func (x *PlacesG2) GetRecords() []*v1.PlaceRecordG2 {
	if x != nil {
		if x.xxx_hidden_Records != nil {
			return *x.xxx_hidden_Records
		}
	}
	return nil
}

func (x *PlacesG2) GetRawData() []byte {
	if x != nil {
		return x.xxx_hidden_RawData
	}
	return nil
}

func (x *PlacesG2) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *PlacesG2) SetNewestRecordIndex(v int32) {
	x.xxx_hidden_NewestRecordIndex = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *PlacesG2) SetRecords(v []*v1.PlaceRecordG2) {
	x.xxx_hidden_Records = &v
}

func (x *PlacesG2) SetRawData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RawData = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *PlacesG2) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *PlacesG2) HasNewestRecordIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *PlacesG2) HasRawData() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *PlacesG2) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *PlacesG2) ClearNewestRecordIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_NewestRecordIndex = 0
}

func (x *PlacesG2) ClearRawData() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_RawData = nil
}

func (x *PlacesG2) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Signature = nil
}

type PlacesG2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Index of the most recently written place record.
	// Corresponds to `placePointerNewestRecord`.
	//
	// This is used to determine the chronological order of records in the circular buffer.
	//
	// See Data Dictionary, Section 2.28.
	// ASN.1 Definition:
	//
	//	INTEGER(0..NoOfCardPlaceRecords-1)
	NewestRecordIndex *int32
	// The set of Generation 2 place records (21 bytes each, includes GNSS).
	//
	// This is a circular buffer. The newest record is at index `newest_record_index`.
	// To read in chronological order, start from (newest_record_index + 1) and wrap around.
	//
	// See Data Dictionary, Section 2.117, `PlaceRecord` (Gen2).
	Records []*v1.PlaceRecordG2
	// Complete raw binary data (pointer + all records).
	//
	// Used as canvas for raw data painting during marshalling to preserve
	// unknown bits and ensure perfect round-trip fidelity.
	//
	// Length: 2 bytes (pointer) + (N × 21 bytes per record)
	RawData []byte
	// Digital signature for the EF_Places file content.
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	// ASN.1 Definition:
	//
	//	Signature ::= OCTET STRING (SIZE(128))
	Signature []byte
}

func (b0 PlacesG2_builder) Build() *PlacesG2 {
	m0 := &PlacesG2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.NewestRecordIndex != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_NewestRecordIndex = *b.NewestRecordIndex
	}
	x.xxx_hidden_Records = &b.Records
	if b.RawData != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_RawData = b.RawData
	}
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Signature = b.Signature
	}
	return m0
}

var File_wayplatform_connect_tachograph_card_v1_places_g2_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_card_v1_places_g2_proto_rawDesc = "" +
	"\n" +
	"6wayplatform/connect/tachograph/card/v1/places_g2.proto\x12&wayplatform.connect.tachograph.card.v1\x1a:wayplatform/connect/tachograph/dd/v1/place_record_g2.proto\"\xc2\x01\n" +
	"\bPlacesG2\x12.\n" +
	"\x13newest_record_index\x18\x01 \x01(\x05R\x11newestRecordIndex\x12M\n" +
	"\arecords\x18\x02 \x03(\v23.wayplatform.connect.tachograph.dd.v1.PlaceRecordG2R\arecords\x12\x19\n" +
	"\braw_data\x18\x03 \x01(\fR\arawData\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignatureB\xda\x02\n" +
	"*com.wayplatform.connect.tachograph.card.v1B\rPlacesG2ProtoP\x01Z`github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1;cardv1\xa2\x02\x04WCTC\xaa\x02&Wayplatform.Connect.Tachograph.Card.V1\xca\x02&Wayplatform\\Connect\\Tachograph\\Card\\V1\xe2\x022Wayplatform\\Connect\\Tachograph\\Card\\V1\\GPBMetadata\xea\x02*Wayplatform::Connect::Tachograph::Card::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_card_v1_places_g2_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_card_v1_places_g2_proto_goTypes = []any{
	(*PlacesG2)(nil),         // 0: wayplatform.connect.tachograph.card.v1.PlacesG2
	(*v1.PlaceRecordG2)(nil), // 1: wayplatform.connect.tachograph.dd.v1.PlaceRecordG2
}
var file_wayplatform_connect_tachograph_card_v1_places_g2_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.card.v1.PlacesG2.records:type_name -> wayplatform.connect.tachograph.dd.v1.PlaceRecordG2
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_card_v1_places_g2_proto_init() }
func file_wayplatform_connect_tachograph_card_v1_places_g2_proto_init() {
	if File_wayplatform_connect_tachograph_card_v1_places_g2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_card_v1_places_g2_proto_rawDesc), len(file_wayplatform_connect_tachograph_card_v1_places_g2_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_card_v1_places_g2_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_card_v1_places_g2_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_card_v1_places_g2_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_card_v1_places_g2_proto = out.File
	file_wayplatform_connect_tachograph_card_v1_places_g2_proto_goTypes = nil
	file_wayplatform_connect_tachograph_card_v1_places_g2_proto_depIdxs = nil
}
