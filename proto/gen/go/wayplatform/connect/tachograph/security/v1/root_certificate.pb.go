// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/security/v1/root_certificate.proto

package securityv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RootCertificate represents the European Root CA (ERCA) public key.
//
// The ERCA public key is distributed in a special 144-byte format that contains
// the public key components directly, without a signature. This root certificate
// is trusted a priori and serves as the trust anchor for all Member State
// certificates.
//
// See Appendix 11, Section 2.1 "European Root Public Key".
//
// Binary Structure (144 bytes):
//
//	Bytes 0-7:     Key Identifier (serves as both CAR and CHR)
//	Bytes 8-135:   RSA Modulus (128 bytes)
//	Bytes 136-143: RSA Public Exponent (8 bytes)
//
// The Key Identifier uniquely identifies this root public key. For the European
// Root CA, the CAR and CHR are identical as the certificate is self-signed.
//
// The RSA public key components (modulus and exponent) are provided directly
// without encryption or signature, as this is the root of trust for the entire
// tachograph PKI hierarchy.
type RootCertificate struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_KeyId       *string                `protobuf:"bytes,1,opt,name=key_id,json=keyId"`
	xxx_hidden_RsaModulus  []byte                 `protobuf:"bytes,2,opt,name=rsa_modulus,json=rsaModulus"`
	xxx_hidden_RsaExponent []byte                 `protobuf:"bytes,3,opt,name=rsa_exponent,json=rsaExponent"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RootCertificate) Reset() {
	*x = RootCertificate{}
	mi := &file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RootCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootCertificate) ProtoMessage() {}

func (x *RootCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RootCertificate) GetKeyId() string {
	if x != nil {
		if x.xxx_hidden_KeyId != nil {
			return *x.xxx_hidden_KeyId
		}
		return ""
	}
	return ""
}

func (x *RootCertificate) GetRsaModulus() []byte {
	if x != nil {
		return x.xxx_hidden_RsaModulus
	}
	return nil
}

func (x *RootCertificate) GetRsaExponent() []byte {
	if x != nil {
		return x.xxx_hidden_RsaExponent
	}
	return nil
}

func (x *RootCertificate) SetKeyId(v string) {
	x.xxx_hidden_KeyId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *RootCertificate) SetRsaModulus(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RsaModulus = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *RootCertificate) SetRsaExponent(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RsaExponent = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *RootCertificate) HasKeyId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *RootCertificate) HasRsaModulus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *RootCertificate) HasRsaExponent() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *RootCertificate) ClearKeyId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_KeyId = nil
}

func (x *RootCertificate) ClearRsaModulus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_RsaModulus = nil
}

func (x *RootCertificate) ClearRsaExponent() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_RsaExponent = nil
}

type RootCertificate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Key identifier that serves as both the Certificate Authority Reference (CAR)
	// and Certificate Holder Reference (CHR) for the self-signed root.
	//
	// Stored as a decimal string representation of the 64-bit key identifier value.
	// For example, "18250066869723594497" for the ERCA key.
	KeyId *string
	// RSA modulus (n) of the root public key.
	//
	// This is the modulus component of the RSA public key pair, encoded as a
	// 128-byte (1024-bit) big-endian integer.
	RsaModulus []byte
	// RSA public exponent (e) of the root public key.
	//
	// This is the exponent component of the RSA public key pair, encoded as an
	// 8-byte (64-bit) big-endian integer. The most common value is 65537 (0x010001).
	RsaExponent []byte
}

func (b0 RootCertificate_builder) Build() *RootCertificate {
	m0 := &RootCertificate{}
	b, x := &b0, m0
	_, _ = b, x
	if b.KeyId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_KeyId = b.KeyId
	}
	if b.RsaModulus != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_RsaModulus = b.RsaModulus
	}
	if b.RsaExponent != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_RsaExponent = b.RsaExponent
	}
	return m0
}

var File_wayplatform_connect_tachograph_security_v1_root_certificate_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_rawDesc = "" +
	"\n" +
	"Awayplatform/connect/tachograph/security/v1/root_certificate.proto\x12*wayplatform.connect.tachograph.security.v1\"l\n" +
	"\x0fRootCertificate\x12\x15\n" +
	"\x06key_id\x18\x01 \x01(\tR\x05keyId\x12\x1f\n" +
	"\vrsa_modulus\x18\x02 \x01(\fR\n" +
	"rsaModulus\x12!\n" +
	"\frsa_exponent\x18\x03 \x01(\fR\vrsaExponentB\xfd\x02\n" +
	".com.wayplatform.connect.tachograph.security.v1B\x14RootCertificateProtoP\x01Zhgithub.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/security/v1;securityv1\xa2\x02\x04WCTS\xaa\x02*Wayplatform.Connect.Tachograph.Security.V1\xca\x02*Wayplatform\\Connect\\Tachograph\\Security\\V1\xe2\x026Wayplatform\\Connect\\Tachograph\\Security\\V1\\GPBMetadata\xea\x02.Wayplatform::Connect::Tachograph::Security::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_goTypes = []any{
	(*RootCertificate)(nil), // 0: wayplatform.connect.tachograph.security.v1.RootCertificate
}
var file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_init() }
func file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_init() {
	if File_wayplatform_connect_tachograph_security_v1_root_certificate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_rawDesc), len(file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_security_v1_root_certificate_proto = out.File
	file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_goTypes = nil
	file_wayplatform_connect_tachograph_security_v1_root_certificate_proto_depIdxs = nil
}
