// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/datadictionary/v1/nation_numeric.proto

package datadictionaryv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NationNumeric represents a country.
// See Data Dictionary, Section 2.101 and ISO 3166. This is a partial list.
type NationNumeric int32

const (
	NationNumeric_NATION_NUMERIC_UNSPECIFIED  NationNumeric = 0
	NationNumeric_NATION_NUMERIC_UNRECOGNIZED NationNumeric = 1
	NationNumeric_NO_INFORMATION_AVAILABLE    NationNumeric = 2
	NationNumeric_AUSTRIA                     NationNumeric = 3
	NationNumeric_ALBANIA                     NationNumeric = 4
	NationNumeric_ANDORRA                     NationNumeric = 5
	NationNumeric_ARMENIA                     NationNumeric = 6
	NationNumeric_AZERBAIJAN                  NationNumeric = 7
	NationNumeric_BELGIUM                     NationNumeric = 8
	NationNumeric_BULGARIA                    NationNumeric = 9
	NationNumeric_BOSNIA_HERZEGOVINA          NationNumeric = 10
	NationNumeric_BELARUS                     NationNumeric = 11 // 9
	NationNumeric_SWITZERLAND                 NationNumeric = 12 // 10
	NationNumeric_CYPRUS                      NationNumeric = 13 // 11
	NationNumeric_CZECH_REPUBLIC              NationNumeric = 14 // 12
	NationNumeric_GERMANY                     NationNumeric = 15 // 13
	NationNumeric_DENMARK                     NationNumeric = 16 // 14
	NationNumeric_SPAIN                       NationNumeric = 17 // 15
	NationNumeric_ESTONIA                     NationNumeric = 18 // 16
	NationNumeric_FRANCE                      NationNumeric = 19 // 17
	NationNumeric_FINLAND                     NationNumeric = 20 // 18
	NationNumeric_LIECHTENSTEIN               NationNumeric = 21 // 19
	NationNumeric_FAROE_ISLANDS               NationNumeric = 22 // 20
	NationNumeric_UNITED_KINGDOM              NationNumeric = 23 // 21
	NationNumeric_GEORGIA                     NationNumeric = 24 // 22
	NationNumeric_GREECE                      NationNumeric = 25 // 23
	NationNumeric_HUNGARY                     NationNumeric = 26 // 24
	NationNumeric_CROATIA                     NationNumeric = 27 // 25
	NationNumeric_ITALY                       NationNumeric = 28 // 26
	NationNumeric_IRELAND                     NationNumeric = 29 // 27
	NationNumeric_ICELAND                     NationNumeric = 30 // 28
	NationNumeric_KAZAKHSTAN                  NationNumeric = 31 // 29
	NationNumeric_LUXEMBOURG                  NationNumeric = 32 // 30
	NationNumeric_LITHUANIA                   NationNumeric = 33 // 31
	NationNumeric_LATVIA                      NationNumeric = 34 // 32
	NationNumeric_MALTA                       NationNumeric = 35 // 33
	NationNumeric_MONACO                      NationNumeric = 36 // 34
	NationNumeric_REPUBLIC_OF_MOLDOVA         NationNumeric = 37 // 35
	NationNumeric_NORTH_MACEDONIA             NationNumeric = 38 // 36
	NationNumeric_NORWAY                      NationNumeric = 39 // 37
	NationNumeric_NETHERLANDS                 NationNumeric = 40 // 38
	NationNumeric_PORTUGAL                    NationNumeric = 41 // 39
	NationNumeric_POLAND                      NationNumeric = 42 // 40
	NationNumeric_ROMANIA                     NationNumeric = 43 // 41
	NationNumeric_RUSSIAN_FEDERATION          NationNumeric = 44 // 42
	NationNumeric_SAN_MARINO                  NationNumeric = 45 // 43
	NationNumeric_SWEDEN                      NationNumeric = 46 // 44
	NationNumeric_SLOVAKIA                    NationNumeric = 47 // 45
	NationNumeric_SLOVENIA                    NationNumeric = 48 // 46
	NationNumeric_TURKMENISTAN                NationNumeric = 49 // 47
	NationNumeric_TURKEY                      NationNumeric = 50 // 48
	NationNumeric_UKRAINE                     NationNumeric = 51 // 49
	NationNumeric_VATICAN_CITY                NationNumeric = 52 // 50
	NationNumeric_REST_OF_EUROPE              NationNumeric = 53 // 250
	NationNumeric_REST_OF_THE_WORLD           NationNumeric = 54 // 251
)

// Enum value maps for NationNumeric.
var (
	NationNumeric_name = map[int32]string{
		0:  "NATION_NUMERIC_UNSPECIFIED",
		1:  "NATION_NUMERIC_UNRECOGNIZED",
		2:  "NO_INFORMATION_AVAILABLE",
		3:  "AUSTRIA",
		4:  "ALBANIA",
		5:  "ANDORRA",
		6:  "ARMENIA",
		7:  "AZERBAIJAN",
		8:  "BELGIUM",
		9:  "BULGARIA",
		10: "BOSNIA_HERZEGOVINA",
		11: "BELARUS",
		12: "SWITZERLAND",
		13: "CYPRUS",
		14: "CZECH_REPUBLIC",
		15: "GERMANY",
		16: "DENMARK",
		17: "SPAIN",
		18: "ESTONIA",
		19: "FRANCE",
		20: "FINLAND",
		21: "LIECHTENSTEIN",
		22: "FAROE_ISLANDS",
		23: "UNITED_KINGDOM",
		24: "GEORGIA",
		25: "GREECE",
		26: "HUNGARY",
		27: "CROATIA",
		28: "ITALY",
		29: "IRELAND",
		30: "ICELAND",
		31: "KAZAKHSTAN",
		32: "LUXEMBOURG",
		33: "LITHUANIA",
		34: "LATVIA",
		35: "MALTA",
		36: "MONACO",
		37: "REPUBLIC_OF_MOLDOVA",
		38: "NORTH_MACEDONIA",
		39: "NORWAY",
		40: "NETHERLANDS",
		41: "PORTUGAL",
		42: "POLAND",
		43: "ROMANIA",
		44: "RUSSIAN_FEDERATION",
		45: "SAN_MARINO",
		46: "SWEDEN",
		47: "SLOVAKIA",
		48: "SLOVENIA",
		49: "TURKMENISTAN",
		50: "TURKEY",
		51: "UKRAINE",
		52: "VATICAN_CITY",
		53: "REST_OF_EUROPE",
		54: "REST_OF_THE_WORLD",
	}
	NationNumeric_value = map[string]int32{
		"NATION_NUMERIC_UNSPECIFIED":  0,
		"NATION_NUMERIC_UNRECOGNIZED": 1,
		"NO_INFORMATION_AVAILABLE":    2,
		"AUSTRIA":                     3,
		"ALBANIA":                     4,
		"ANDORRA":                     5,
		"ARMENIA":                     6,
		"AZERBAIJAN":                  7,
		"BELGIUM":                     8,
		"BULGARIA":                    9,
		"BOSNIA_HERZEGOVINA":          10,
		"BELARUS":                     11,
		"SWITZERLAND":                 12,
		"CYPRUS":                      13,
		"CZECH_REPUBLIC":              14,
		"GERMANY":                     15,
		"DENMARK":                     16,
		"SPAIN":                       17,
		"ESTONIA":                     18,
		"FRANCE":                      19,
		"FINLAND":                     20,
		"LIECHTENSTEIN":               21,
		"FAROE_ISLANDS":               22,
		"UNITED_KINGDOM":              23,
		"GEORGIA":                     24,
		"GREECE":                      25,
		"HUNGARY":                     26,
		"CROATIA":                     27,
		"ITALY":                       28,
		"IRELAND":                     29,
		"ICELAND":                     30,
		"KAZAKHSTAN":                  31,
		"LUXEMBOURG":                  32,
		"LITHUANIA":                   33,
		"LATVIA":                      34,
		"MALTA":                       35,
		"MONACO":                      36,
		"REPUBLIC_OF_MOLDOVA":         37,
		"NORTH_MACEDONIA":             38,
		"NORWAY":                      39,
		"NETHERLANDS":                 40,
		"PORTUGAL":                    41,
		"POLAND":                      42,
		"ROMANIA":                     43,
		"RUSSIAN_FEDERATION":          44,
		"SAN_MARINO":                  45,
		"SWEDEN":                      46,
		"SLOVAKIA":                    47,
		"SLOVENIA":                    48,
		"TURKMENISTAN":                49,
		"TURKEY":                      50,
		"UKRAINE":                     51,
		"VATICAN_CITY":                52,
		"REST_OF_EUROPE":              53,
		"REST_OF_THE_WORLD":           54,
	}
)

func (x NationNumeric) Enum() *NationNumeric {
	p := new(NationNumeric)
	*p = x
	return p
}

func (x NationNumeric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NationNumeric) Descriptor() protoreflect.EnumDescriptor {
	return file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_enumTypes[0].Descriptor()
}

func (NationNumeric) Type() protoreflect.EnumType {
	return &file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_enumTypes[0]
}

func (x NationNumeric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

var File_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_rawDesc = "" +
	"\n" +
	"Ewayplatform/connect/tachograph/datadictionary/v1/nation_numeric.proto\x120wayplatform.connect.tachograph.datadictionary.v1\x1aBwayplatform/connect/tachograph/datadictionary/v1/annotations.proto*\xbb\a\n" +
	"\rNationNumeric\x12\x1e\n" +
	"\x1aNATION_NUMERIC_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bNATION_NUMERIC_UNRECOGNIZED\x10\x01\x12#\n" +
	"\x18NO_INFORMATION_AVAILABLE\x10\x02\x1a\x05\x98\xaf\x9c\x02\x00\x12\x12\n" +
	"\aAUSTRIA\x10\x03\x1a\x05\x98\xaf\x9c\x02\x01\x12\x12\n" +
	"\aALBANIA\x10\x04\x1a\x05\x98\xaf\x9c\x02\x02\x12\x12\n" +
	"\aANDORRA\x10\x05\x1a\x05\x98\xaf\x9c\x02\x03\x12\x12\n" +
	"\aARMENIA\x10\x06\x1a\x05\x98\xaf\x9c\x02\x04\x12\x15\n" +
	"\n" +
	"AZERBAIJAN\x10\a\x1a\x05\x98\xaf\x9c\x02\x05\x12\x12\n" +
	"\aBELGIUM\x10\b\x1a\x05\x98\xaf\x9c\x02\x06\x12\x13\n" +
	"\bBULGARIA\x10\t\x1a\x05\x98\xaf\x9c\x02\a\x12\x1d\n" +
	"\x12BOSNIA_HERZEGOVINA\x10\n" +
	"\x1a\x05\x98\xaf\x9c\x02\b\x12\v\n" +
	"\aBELARUS\x10\v\x12\x0f\n" +
	"\vSWITZERLAND\x10\f\x12\n" +
	"\n" +
	"\x06CYPRUS\x10\r\x12\x12\n" +
	"\x0eCZECH_REPUBLIC\x10\x0e\x12\v\n" +
	"\aGERMANY\x10\x0f\x12\v\n" +
	"\aDENMARK\x10\x10\x12\t\n" +
	"\x05SPAIN\x10\x11\x12\v\n" +
	"\aESTONIA\x10\x12\x12\n" +
	"\n" +
	"\x06FRANCE\x10\x13\x12\v\n" +
	"\aFINLAND\x10\x14\x12\x11\n" +
	"\rLIECHTENSTEIN\x10\x15\x12\x11\n" +
	"\rFAROE_ISLANDS\x10\x16\x12\x12\n" +
	"\x0eUNITED_KINGDOM\x10\x17\x12\v\n" +
	"\aGEORGIA\x10\x18\x12\n" +
	"\n" +
	"\x06GREECE\x10\x19\x12\v\n" +
	"\aHUNGARY\x10\x1a\x12\v\n" +
	"\aCROATIA\x10\x1b\x12\t\n" +
	"\x05ITALY\x10\x1c\x12\v\n" +
	"\aIRELAND\x10\x1d\x12\v\n" +
	"\aICELAND\x10\x1e\x12\x0e\n" +
	"\n" +
	"KAZAKHSTAN\x10\x1f\x12\x0e\n" +
	"\n" +
	"LUXEMBOURG\x10 \x12\r\n" +
	"\tLITHUANIA\x10!\x12\n" +
	"\n" +
	"\x06LATVIA\x10\"\x12\t\n" +
	"\x05MALTA\x10#\x12\n" +
	"\n" +
	"\x06MONACO\x10$\x12\x17\n" +
	"\x13REPUBLIC_OF_MOLDOVA\x10%\x12\x13\n" +
	"\x0fNORTH_MACEDONIA\x10&\x12\n" +
	"\n" +
	"\x06NORWAY\x10'\x12\x0f\n" +
	"\vNETHERLANDS\x10(\x12\f\n" +
	"\bPORTUGAL\x10)\x12\n" +
	"\n" +
	"\x06POLAND\x10*\x12\v\n" +
	"\aROMANIA\x10+\x12\x16\n" +
	"\x12RUSSIAN_FEDERATION\x10,\x12\x0e\n" +
	"\n" +
	"SAN_MARINO\x10-\x12\n" +
	"\n" +
	"\x06SWEDEN\x10.\x12\f\n" +
	"\bSLOVAKIA\x10/\x12\f\n" +
	"\bSLOVENIA\x100\x12\x10\n" +
	"\fTURKMENISTAN\x101\x12\n" +
	"\n" +
	"\x06TURKEY\x102\x12\v\n" +
	"\aUKRAINE\x103\x12\x10\n" +
	"\fVATICAN_CITY\x104\x12\x12\n" +
	"\x0eREST_OF_EUROPE\x105\x12\x15\n" +
	"\x11REST_OF_THE_WORLD\x106B\xa5\x03\n" +
	"4com.wayplatform.connect.tachograph.datadictionary.v1B\x12NationNumericProtoP\x01Ztgithub.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1;datadictionaryv1\xa2\x02\x04WCTD\xaa\x020Wayplatform.Connect.Tachograph.Datadictionary.V1\xca\x020Wayplatform\\Connect\\Tachograph\\Datadictionary\\V1\xe2\x02<Wayplatform\\Connect\\Tachograph\\Datadictionary\\V1\\GPBMetadata\xea\x024Wayplatform::Connect::Tachograph::Datadictionary::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_goTypes = []any{
	(NationNumeric)(0), // 0: wayplatform.connect.tachograph.datadictionary.v1.NationNumeric
}
var file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_init() }
func file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_init() {
	if File_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_datadictionary_v1_annotations_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_rawDesc), len(file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_depIdxs,
		EnumInfos:         file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_enumTypes,
	}.Build()
	File_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto = out.File
	file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_goTypes = nil
	file_wayplatform_connect_tachograph_datadictionary_v1_nation_numeric_proto_depIdxs = nil
}
