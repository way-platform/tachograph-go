// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/datadictionary/v1/extended_serial_number.proto

package datadictionaryv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Corresponds to the `ExtendedSerialNumber` data type in the Data Dictionary, Section 2.72.
//
// ASN.1 Specification:
//
//	ExtendedSerialNumber ::= SEQUENCE {
//	    serialNumber INTEGER(0..2^32-1),
//	    monthYear BCDString(SIZE(2)),
//	    type EquipmentType,
//	    manufacturerCode ManufacturerCode
//	}
type ExtendedSerialNumber struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SerialNumber     int64                  `protobuf:"varint,1,opt,name=serial_number,json=serialNumber"`
	xxx_hidden_Month            int32                  `protobuf:"varint,2,opt,name=month"`
	xxx_hidden_Year             int32                  `protobuf:"varint,3,opt,name=year"`
	xxx_hidden_Type             EquipmentType          `protobuf:"varint,4,opt,name=type,enum=wayplatform.connect.tachograph.datadictionary.v1.EquipmentType"`
	xxx_hidden_ManufacturerCode int32                  `protobuf:"varint,5,opt,name=manufacturer_code,json=manufacturerCode"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *ExtendedSerialNumber) Reset() {
	*x = ExtendedSerialNumber{}
	mi := &file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtendedSerialNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedSerialNumber) ProtoMessage() {}

func (x *ExtendedSerialNumber) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExtendedSerialNumber) GetSerialNumber() int64 {
	if x != nil {
		return x.xxx_hidden_SerialNumber
	}
	return 0
}

func (x *ExtendedSerialNumber) GetMonth() int32 {
	if x != nil {
		return x.xxx_hidden_Month
	}
	return 0
}

func (x *ExtendedSerialNumber) GetYear() int32 {
	if x != nil {
		return x.xxx_hidden_Year
	}
	return 0
}

func (x *ExtendedSerialNumber) GetType() EquipmentType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_Type
		}
	}
	return EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED
}

func (x *ExtendedSerialNumber) GetManufacturerCode() int32 {
	if x != nil {
		return x.xxx_hidden_ManufacturerCode
	}
	return 0
}

func (x *ExtendedSerialNumber) SetSerialNumber(v int64) {
	x.xxx_hidden_SerialNumber = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *ExtendedSerialNumber) SetMonth(v int32) {
	x.xxx_hidden_Month = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *ExtendedSerialNumber) SetYear(v int32) {
	x.xxx_hidden_Year = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *ExtendedSerialNumber) SetType(v EquipmentType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *ExtendedSerialNumber) SetManufacturerCode(v int32) {
	x.xxx_hidden_ManufacturerCode = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *ExtendedSerialNumber) HasSerialNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ExtendedSerialNumber) HasMonth() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ExtendedSerialNumber) HasYear() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ExtendedSerialNumber) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ExtendedSerialNumber) HasManufacturerCode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ExtendedSerialNumber) ClearSerialNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SerialNumber = 0
}

func (x *ExtendedSerialNumber) ClearMonth() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Month = 0
}

func (x *ExtendedSerialNumber) ClearYear() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Year = 0
}

func (x *ExtendedSerialNumber) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Type = EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED
}

func (x *ExtendedSerialNumber) ClearManufacturerCode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ManufacturerCode = 0
}

type ExtendedSerialNumber_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A serial number for the equipment, unique for the manufacturer, type, and date.
	//
	// ASN.1 Specification:
	//
	//	serialNumber INTEGER(0..2^32-1)
	SerialNumber *int64
	// The month of manufacturing (1-12).
	// Parsed from the BCD-encoded `monthYear` field.
	//
	// Source ASN.1 Specification:
	//
	//	monthYear BCDString(SIZE(2))
	Month *int32
	// The year of manufacturing (e.g., 2023).
	// Parsed from the BCD-encoded `monthYear` field.
	//
	// Source ASN.1 Specification:
	//
	//	monthYear BCDString(SIZE(2))
	Year *int32
	// The type of equipment.
	//
	// ASN.1 Specification:
	//
	//	type EquipmentType,
	//	EquipmentType ::= INTEGER (0..255)
	Type *EquipmentType
	// The numerical code of the manufacturer.
	//
	// ASN.1 Specification:
	//
	//	manufacturerCode ManufacturerCode,
	//	ManufacturerCode ::= INTEGER (0..255)
	ManufacturerCode *int32
}

func (b0 ExtendedSerialNumber_builder) Build() *ExtendedSerialNumber {
	m0 := &ExtendedSerialNumber{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SerialNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_SerialNumber = *b.SerialNumber
	}
	if b.Month != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Month = *b.Month
	}
	if b.Year != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Year = *b.Year
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Type = *b.Type
	}
	if b.ManufacturerCode != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_ManufacturerCode = *b.ManufacturerCode
	}
	return m0
}

var File_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_rawDesc = "" +
	"\n" +
	"Mwayplatform/connect/tachograph/datadictionary/v1/extended_serial_number.proto\x120wayplatform.connect.tachograph.datadictionary.v1\x1aEwayplatform/connect/tachograph/datadictionary/v1/equipment_type.proto\"\xe7\x01\n" +
	"\x14ExtendedSerialNumber\x12#\n" +
	"\rserial_number\x18\x01 \x01(\x03R\fserialNumber\x12\x14\n" +
	"\x05month\x18\x02 \x01(\x05R\x05month\x12\x12\n" +
	"\x04year\x18\x03 \x01(\x05R\x04year\x12S\n" +
	"\x04type\x18\x04 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.EquipmentTypeR\x04type\x12+\n" +
	"\x11manufacturer_code\x18\x05 \x01(\x05R\x10manufacturerCodeB\xac\x03\n" +
	"4com.wayplatform.connect.tachograph.datadictionary.v1B\x19ExtendedSerialNumberProtoP\x01Ztgithub.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1;datadictionaryv1\xa2\x02\x04WCTD\xaa\x020Wayplatform.Connect.Tachograph.Datadictionary.V1\xca\x020Wayplatform\\Connect\\Tachograph\\Datadictionary\\V1\xe2\x02<Wayplatform\\Connect\\Tachograph\\Datadictionary\\V1\\GPBMetadata\xea\x024Wayplatform::Connect::Tachograph::Datadictionary::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_goTypes = []any{
	(*ExtendedSerialNumber)(nil), // 0: wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumber
	(EquipmentType)(0),           // 1: wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
}
var file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumber.type:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() {
	file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_init()
}
func file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_init() {
	if File_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_datadictionary_v1_equipment_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_rawDesc), len(file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto = out.File
	file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_goTypes = nil
	file_wayplatform_connect_tachograph_datadictionary_v1_extended_serial_number_proto_depIdxs = nil
}
