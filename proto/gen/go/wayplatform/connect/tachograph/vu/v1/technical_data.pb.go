// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/vu/v1/technical_data.proto

package vuv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the consolidated data structure for a Technical Data transfer.
//
// This message corresponds to the data defined in the regulation document:
// Appendix 7, Section 2.2.6.6: "Positive Response Transfer Data Technical Data".
type TechnicalData struct {
	state                               protoimpl.MessageState                          `protogen:"opaque.v1"`
	xxx_hidden_Generation               v1.Generation                                   `protobuf:"varint,1,opt,name=generation,enum=wayplatform.connect.tachograph.datadictionary.v1.Generation"`
	xxx_hidden_VuIdentification         *TechnicalData_VuIdentification                 `protobuf:"bytes,2,opt,name=vu_identification,json=vuIdentification"`
	xxx_hidden_CalibrationRecords       *[]*TechnicalData_CalibrationRecord             `protobuf:"bytes,3,rep,name=calibration_records,json=calibrationRecords"`
	xxx_hidden_PairedSensor             *TechnicalData_PairedSensor                     `protobuf:"bytes,4,opt,name=paired_sensor,json=pairedSensor"`
	xxx_hidden_PairedSensors            *[]*TechnicalData_PairedSensor                  `protobuf:"bytes,5,rep,name=paired_sensors,json=pairedSensors"`
	xxx_hidden_CoupledGnssFacilities    *[]*TechnicalData_CoupledGnss                   `protobuf:"bytes,6,rep,name=coupled_gnss_facilities,json=coupledGnssFacilities"`
	xxx_hidden_CardRecords              *[]*TechnicalData_CardRecord                    `protobuf:"bytes,7,rep,name=card_records,json=cardRecords"`
	xxx_hidden_ItsConsentRecords        *[]*TechnicalData_ItsConsentRecord              `protobuf:"bytes,8,rep,name=its_consent_records,json=itsConsentRecords"`
	xxx_hidden_PowerSupplyInterruptions *[]*TechnicalData_PowerSupplyInterruptionRecord `protobuf:"bytes,9,rep,name=power_supply_interruptions,json=powerSupplyInterruptions"`
	xxx_hidden_SignatureGen1            []byte                                          `protobuf:"bytes,10,opt,name=signature_gen1,json=signatureGen1"`
	xxx_hidden_SignatureGen2            []byte                                          `protobuf:"bytes,11,opt,name=signature_gen2,json=signatureGen2"`
	XXX_raceDetectHookData              protoimpl.RaceDetectHookData
	XXX_presence                        [1]uint32
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *TechnicalData) Reset() {
	*x = TechnicalData{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalData) ProtoMessage() {}

func (x *TechnicalData) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalData) GetGeneration() v1.Generation {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Generation
		}
	}
	return v1.Generation(0)
}

func (x *TechnicalData) GetVuIdentification() *TechnicalData_VuIdentification {
	if x != nil {
		return x.xxx_hidden_VuIdentification
	}
	return nil
}

func (x *TechnicalData) GetCalibrationRecords() []*TechnicalData_CalibrationRecord {
	if x != nil {
		if x.xxx_hidden_CalibrationRecords != nil {
			return *x.xxx_hidden_CalibrationRecords
		}
	}
	return nil
}

func (x *TechnicalData) GetPairedSensor() *TechnicalData_PairedSensor {
	if x != nil {
		return x.xxx_hidden_PairedSensor
	}
	return nil
}

func (x *TechnicalData) GetPairedSensors() []*TechnicalData_PairedSensor {
	if x != nil {
		if x.xxx_hidden_PairedSensors != nil {
			return *x.xxx_hidden_PairedSensors
		}
	}
	return nil
}

func (x *TechnicalData) GetCoupledGnssFacilities() []*TechnicalData_CoupledGnss {
	if x != nil {
		if x.xxx_hidden_CoupledGnssFacilities != nil {
			return *x.xxx_hidden_CoupledGnssFacilities
		}
	}
	return nil
}

func (x *TechnicalData) GetCardRecords() []*TechnicalData_CardRecord {
	if x != nil {
		if x.xxx_hidden_CardRecords != nil {
			return *x.xxx_hidden_CardRecords
		}
	}
	return nil
}

func (x *TechnicalData) GetItsConsentRecords() []*TechnicalData_ItsConsentRecord {
	if x != nil {
		if x.xxx_hidden_ItsConsentRecords != nil {
			return *x.xxx_hidden_ItsConsentRecords
		}
	}
	return nil
}

func (x *TechnicalData) GetPowerSupplyInterruptions() []*TechnicalData_PowerSupplyInterruptionRecord {
	if x != nil {
		if x.xxx_hidden_PowerSupplyInterruptions != nil {
			return *x.xxx_hidden_PowerSupplyInterruptions
		}
	}
	return nil
}

func (x *TechnicalData) GetSignatureGen1() []byte {
	if x != nil {
		return x.xxx_hidden_SignatureGen1
	}
	return nil
}

func (x *TechnicalData) GetSignatureGen2() []byte {
	if x != nil {
		return x.xxx_hidden_SignatureGen2
	}
	return nil
}

func (x *TechnicalData) SetGeneration(v v1.Generation) {
	x.xxx_hidden_Generation = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 11)
}

func (x *TechnicalData) SetVuIdentification(v *TechnicalData_VuIdentification) {
	x.xxx_hidden_VuIdentification = v
}

func (x *TechnicalData) SetCalibrationRecords(v []*TechnicalData_CalibrationRecord) {
	x.xxx_hidden_CalibrationRecords = &v
}

func (x *TechnicalData) SetPairedSensor(v *TechnicalData_PairedSensor) {
	x.xxx_hidden_PairedSensor = v
}

func (x *TechnicalData) SetPairedSensors(v []*TechnicalData_PairedSensor) {
	x.xxx_hidden_PairedSensors = &v
}

func (x *TechnicalData) SetCoupledGnssFacilities(v []*TechnicalData_CoupledGnss) {
	x.xxx_hidden_CoupledGnssFacilities = &v
}

func (x *TechnicalData) SetCardRecords(v []*TechnicalData_CardRecord) {
	x.xxx_hidden_CardRecords = &v
}

func (x *TechnicalData) SetItsConsentRecords(v []*TechnicalData_ItsConsentRecord) {
	x.xxx_hidden_ItsConsentRecords = &v
}

func (x *TechnicalData) SetPowerSupplyInterruptions(v []*TechnicalData_PowerSupplyInterruptionRecord) {
	x.xxx_hidden_PowerSupplyInterruptions = &v
}

func (x *TechnicalData) SetSignatureGen1(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_SignatureGen1 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 11)
}

func (x *TechnicalData) SetSignatureGen2(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_SignatureGen2 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 11)
}

func (x *TechnicalData) HasGeneration() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TechnicalData) HasVuIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VuIdentification != nil
}

func (x *TechnicalData) HasPairedSensor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PairedSensor != nil
}

func (x *TechnicalData) HasSignatureGen1() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *TechnicalData) HasSignatureGen2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *TechnicalData) ClearGeneration() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Generation = v1.Generation_GENERATION_UNSPECIFIED
}

func (x *TechnicalData) ClearVuIdentification() {
	x.xxx_hidden_VuIdentification = nil
}

func (x *TechnicalData) ClearPairedSensor() {
	x.xxx_hidden_PairedSensor = nil
}

func (x *TechnicalData) ClearSignatureGen1() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_SignatureGen1 = nil
}

func (x *TechnicalData) ClearSignatureGen2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_SignatureGen2 = nil
}

type TechnicalData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The generation of the vehicle unit, parsed from the raw transfer data.
	//
	// Discriminator field.
	Generation *v1.Generation
	// Vehicle unit identification data.
	VuIdentification *TechnicalData_VuIdentification
	// All calibration records stored in the VU.
	CalibrationRecords []*TechnicalData_CalibrationRecord
	// For Gen1, the single paired sensor.
	PairedSensor *TechnicalData_PairedSensor
	// For Gen2, the list of paired sensors.
	PairedSensors []*TechnicalData_PairedSensor
	// For Gen2, the list of coupled external GNSS facilities.
	CoupledGnssFacilities []*TechnicalData_CoupledGnss
	// For Gen2, the list of cards that have been used in the VU.
	CardRecords []*TechnicalData_CardRecord
	// For Gen2, the list of ITS consent records.
	ItsConsentRecords []*TechnicalData_ItsConsentRecord
	// For Gen2, the list of power supply interruptions.
	PowerSupplyInterruptions []*TechnicalData_PowerSupplyInterruptionRecord
	// Signature for Gen1 data (RSA, 128 bytes).
	SignatureGen1 []byte
	// Signature for Gen2 data (ECC).
	SignatureGen2 []byte
}

func (b0 TechnicalData_builder) Build() *TechnicalData {
	m0 := &TechnicalData{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Generation != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 11)
		x.xxx_hidden_Generation = *b.Generation
	}
	x.xxx_hidden_VuIdentification = b.VuIdentification
	x.xxx_hidden_CalibrationRecords = &b.CalibrationRecords
	x.xxx_hidden_PairedSensor = b.PairedSensor
	x.xxx_hidden_PairedSensors = &b.PairedSensors
	x.xxx_hidden_CoupledGnssFacilities = &b.CoupledGnssFacilities
	x.xxx_hidden_CardRecords = &b.CardRecords
	x.xxx_hidden_ItsConsentRecords = &b.ItsConsentRecords
	x.xxx_hidden_PowerSupplyInterruptions = &b.PowerSupplyInterruptions
	if b.SignatureGen1 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 11)
		x.xxx_hidden_SignatureGen1 = b.SignatureGen1
	}
	if b.SignatureGen2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 11)
		x.xxx_hidden_SignatureGen2 = b.SignatureGen2
	}
	return m0
}

// Represents the identification data of the vehicle unit.
//
// Corresponds to the `VuIdentification` data type.
// See Data Dictionary, Section 2.205.
type TechnicalData_VuIdentification struct {
	state                             protoimpl.MessageState                                   `protogen:"opaque.v1"`
	xxx_hidden_ManufacturerName       *string                                                  `protobuf:"bytes,1,opt,name=manufacturer_name,json=manufacturerName"`
	xxx_hidden_ManufacturerAddress    *string                                                  `protobuf:"bytes,2,opt,name=manufacturer_address,json=manufacturerAddress"`
	xxx_hidden_PartNumber             *string                                                  `protobuf:"bytes,3,opt,name=part_number,json=partNumber"`
	xxx_hidden_SerialNumber           *v1.ExtendedSerialNumber                                 `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber"`
	xxx_hidden_SoftwareIdentification *TechnicalData_VuIdentification_VuSoftwareIdentification `protobuf:"bytes,5,opt,name=software_identification,json=softwareIdentification"`
	xxx_hidden_ManufacturingDate      *timestamppb.Timestamp                                   `protobuf:"bytes,6,opt,name=manufacturing_date,json=manufacturingDate"`
	xxx_hidden_ApprovalNumber         *string                                                  `protobuf:"bytes,7,opt,name=approval_number,json=approvalNumber"`
	XXX_raceDetectHookData            protoimpl.RaceDetectHookData
	XXX_presence                      [1]uint32
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *TechnicalData_VuIdentification) Reset() {
	*x = TechnicalData_VuIdentification{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalData_VuIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalData_VuIdentification) ProtoMessage() {}

func (x *TechnicalData_VuIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalData_VuIdentification) GetManufacturerName() string {
	if x != nil {
		if x.xxx_hidden_ManufacturerName != nil {
			return *x.xxx_hidden_ManufacturerName
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_VuIdentification) GetManufacturerAddress() string {
	if x != nil {
		if x.xxx_hidden_ManufacturerAddress != nil {
			return *x.xxx_hidden_ManufacturerAddress
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_VuIdentification) GetPartNumber() string {
	if x != nil {
		if x.xxx_hidden_PartNumber != nil {
			return *x.xxx_hidden_PartNumber
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_VuIdentification) GetSerialNumber() *v1.ExtendedSerialNumber {
	if x != nil {
		return x.xxx_hidden_SerialNumber
	}
	return nil
}

func (x *TechnicalData_VuIdentification) GetSoftwareIdentification() *TechnicalData_VuIdentification_VuSoftwareIdentification {
	if x != nil {
		return x.xxx_hidden_SoftwareIdentification
	}
	return nil
}

func (x *TechnicalData_VuIdentification) GetManufacturingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ManufacturingDate
	}
	return nil
}

func (x *TechnicalData_VuIdentification) GetApprovalNumber() string {
	if x != nil {
		if x.xxx_hidden_ApprovalNumber != nil {
			return *x.xxx_hidden_ApprovalNumber
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_VuIdentification) SetManufacturerName(v string) {
	x.xxx_hidden_ManufacturerName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *TechnicalData_VuIdentification) SetManufacturerAddress(v string) {
	x.xxx_hidden_ManufacturerAddress = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *TechnicalData_VuIdentification) SetPartNumber(v string) {
	x.xxx_hidden_PartNumber = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *TechnicalData_VuIdentification) SetSerialNumber(v *v1.ExtendedSerialNumber) {
	x.xxx_hidden_SerialNumber = v
}

func (x *TechnicalData_VuIdentification) SetSoftwareIdentification(v *TechnicalData_VuIdentification_VuSoftwareIdentification) {
	x.xxx_hidden_SoftwareIdentification = v
}

func (x *TechnicalData_VuIdentification) SetManufacturingDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_ManufacturingDate = v
}

func (x *TechnicalData_VuIdentification) SetApprovalNumber(v string) {
	x.xxx_hidden_ApprovalNumber = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *TechnicalData_VuIdentification) HasManufacturerName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TechnicalData_VuIdentification) HasManufacturerAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalData_VuIdentification) HasPartNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TechnicalData_VuIdentification) HasSerialNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SerialNumber != nil
}

func (x *TechnicalData_VuIdentification) HasSoftwareIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SoftwareIdentification != nil
}

func (x *TechnicalData_VuIdentification) HasManufacturingDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ManufacturingDate != nil
}

func (x *TechnicalData_VuIdentification) HasApprovalNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TechnicalData_VuIdentification) ClearManufacturerName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ManufacturerName = nil
}

func (x *TechnicalData_VuIdentification) ClearManufacturerAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ManufacturerAddress = nil
}

func (x *TechnicalData_VuIdentification) ClearPartNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_PartNumber = nil
}

func (x *TechnicalData_VuIdentification) ClearSerialNumber() {
	x.xxx_hidden_SerialNumber = nil
}

func (x *TechnicalData_VuIdentification) ClearSoftwareIdentification() {
	x.xxx_hidden_SoftwareIdentification = nil
}

func (x *TechnicalData_VuIdentification) ClearManufacturingDate() {
	x.xxx_hidden_ManufacturingDate = nil
}

func (x *TechnicalData_VuIdentification) ClearApprovalNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_ApprovalNumber = nil
}

type TechnicalData_VuIdentification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the VU manufacturer.
	ManufacturerName *string
	// The address of the VU manufacturer.
	ManufacturerAddress *string
	// The part number of the VU.
	PartNumber *string
	// The serial number of the VU.
	SerialNumber *v1.ExtendedSerialNumber
	// The software identification of the VU.
	SoftwareIdentification *TechnicalData_VuIdentification_VuSoftwareIdentification
	// The manufacturing date of the VU.
	ManufacturingDate *timestamppb.Timestamp
	// The approval number of the VU.
	ApprovalNumber *string
}

func (b0 TechnicalData_VuIdentification_builder) Build() *TechnicalData_VuIdentification {
	m0 := &TechnicalData_VuIdentification{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ManufacturerName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_ManufacturerName = b.ManufacturerName
	}
	if b.ManufacturerAddress != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_ManufacturerAddress = b.ManufacturerAddress
	}
	if b.PartNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_PartNumber = b.PartNumber
	}
	x.xxx_hidden_SerialNumber = b.SerialNumber
	x.xxx_hidden_SoftwareIdentification = b.SoftwareIdentification
	x.xxx_hidden_ManufacturingDate = b.ManufacturingDate
	if b.ApprovalNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_ApprovalNumber = b.ApprovalNumber
	}
	return m0
}

// Represents a paired motion sensor record.
//
// Corresponds to the `SensorPairedRecord` data type.
// See Data Dictionary, Section 2.145.
type TechnicalData_PairedSensor struct {
	state                     protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_SerialNumber   *v1.ExtendedSerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber"`
	xxx_hidden_ApprovalNumber *string                  `protobuf:"bytes,2,opt,name=approval_number,json=approvalNumber"`
	xxx_hidden_PairingDate    *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=pairing_date,json=pairingDate"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TechnicalData_PairedSensor) Reset() {
	*x = TechnicalData_PairedSensor{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalData_PairedSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalData_PairedSensor) ProtoMessage() {}

func (x *TechnicalData_PairedSensor) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalData_PairedSensor) GetSerialNumber() *v1.ExtendedSerialNumber {
	if x != nil {
		return x.xxx_hidden_SerialNumber
	}
	return nil
}

func (x *TechnicalData_PairedSensor) GetApprovalNumber() string {
	if x != nil {
		if x.xxx_hidden_ApprovalNumber != nil {
			return *x.xxx_hidden_ApprovalNumber
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_PairedSensor) GetPairingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_PairingDate
	}
	return nil
}

func (x *TechnicalData_PairedSensor) SetSerialNumber(v *v1.ExtendedSerialNumber) {
	x.xxx_hidden_SerialNumber = v
}

func (x *TechnicalData_PairedSensor) SetApprovalNumber(v string) {
	x.xxx_hidden_ApprovalNumber = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TechnicalData_PairedSensor) SetPairingDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_PairingDate = v
}

func (x *TechnicalData_PairedSensor) HasSerialNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SerialNumber != nil
}

func (x *TechnicalData_PairedSensor) HasApprovalNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalData_PairedSensor) HasPairingDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PairingDate != nil
}

func (x *TechnicalData_PairedSensor) ClearSerialNumber() {
	x.xxx_hidden_SerialNumber = nil
}

func (x *TechnicalData_PairedSensor) ClearApprovalNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ApprovalNumber = nil
}

func (x *TechnicalData_PairedSensor) ClearPairingDate() {
	x.xxx_hidden_PairingDate = nil
}

type TechnicalData_PairedSensor_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The serial number of the motion sensor.
	SerialNumber *v1.ExtendedSerialNumber
	// The approval number of the motion sensor.
	ApprovalNumber *string
	// The date the sensor was paired.
	PairingDate *timestamppb.Timestamp
}

func (b0 TechnicalData_PairedSensor_builder) Build() *TechnicalData_PairedSensor {
	m0 := &TechnicalData_PairedSensor{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_SerialNumber = b.SerialNumber
	if b.ApprovalNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ApprovalNumber = b.ApprovalNumber
	}
	x.xxx_hidden_PairingDate = b.PairingDate
	return m0
}

// Represents a coupled external GNSS facility record.
//
// Corresponds to the `SensorExternalGNSSCoupledRecord` data type.
// See Data Dictionary, Section 2.133.
type TechnicalData_CoupledGnss struct {
	state                     protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_SerialNumber   *v1.ExtendedSerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber"`
	xxx_hidden_ApprovalNumber *string                  `protobuf:"bytes,2,opt,name=approval_number,json=approvalNumber"`
	xxx_hidden_CouplingDate   *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=coupling_date,json=couplingDate"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TechnicalData_CoupledGnss) Reset() {
	*x = TechnicalData_CoupledGnss{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalData_CoupledGnss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalData_CoupledGnss) ProtoMessage() {}

func (x *TechnicalData_CoupledGnss) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalData_CoupledGnss) GetSerialNumber() *v1.ExtendedSerialNumber {
	if x != nil {
		return x.xxx_hidden_SerialNumber
	}
	return nil
}

func (x *TechnicalData_CoupledGnss) GetApprovalNumber() string {
	if x != nil {
		if x.xxx_hidden_ApprovalNumber != nil {
			return *x.xxx_hidden_ApprovalNumber
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_CoupledGnss) GetCouplingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CouplingDate
	}
	return nil
}

func (x *TechnicalData_CoupledGnss) SetSerialNumber(v *v1.ExtendedSerialNumber) {
	x.xxx_hidden_SerialNumber = v
}

func (x *TechnicalData_CoupledGnss) SetApprovalNumber(v string) {
	x.xxx_hidden_ApprovalNumber = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TechnicalData_CoupledGnss) SetCouplingDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_CouplingDate = v
}

func (x *TechnicalData_CoupledGnss) HasSerialNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SerialNumber != nil
}

func (x *TechnicalData_CoupledGnss) HasApprovalNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalData_CoupledGnss) HasCouplingDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CouplingDate != nil
}

func (x *TechnicalData_CoupledGnss) ClearSerialNumber() {
	x.xxx_hidden_SerialNumber = nil
}

func (x *TechnicalData_CoupledGnss) ClearApprovalNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ApprovalNumber = nil
}

func (x *TechnicalData_CoupledGnss) ClearCouplingDate() {
	x.xxx_hidden_CouplingDate = nil
}

type TechnicalData_CoupledGnss_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The serial number of the external GNSS.
	SerialNumber *v1.ExtendedSerialNumber
	// The approval number of the external GNSS.
	ApprovalNumber *string
	// The date the GNSS was coupled.
	CouplingDate *timestamppb.Timestamp
}

func (b0 TechnicalData_CoupledGnss_builder) Build() *TechnicalData_CoupledGnss {
	m0 := &TechnicalData_CoupledGnss{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_SerialNumber = b.SerialNumber
	if b.ApprovalNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ApprovalNumber = b.ApprovalNumber
	}
	x.xxx_hidden_CouplingDate = b.CouplingDate
	return m0
}

// Represents a calibration record.
//
// Corresponds to the `VuCalibrationRecord` data type.
// See Data Dictionary, Section 2.174.
type TechnicalData_CalibrationRecord struct {
	state                                     protoimpl.MessageState                `protogen:"opaque.v1"`
	xxx_hidden_Purpose                        v1.CalibrationPurpose                 `protobuf:"varint,1,opt,name=purpose,enum=wayplatform.connect.tachograph.datadictionary.v1.CalibrationPurpose"`
	xxx_hidden_UnrecognizedPurpose            int32                                 `protobuf:"varint,2,opt,name=unrecognized_purpose,json=unrecognizedPurpose"`
	xxx_hidden_WorkshopName                   *string                               `protobuf:"bytes,3,opt,name=workshop_name,json=workshopName"`
	xxx_hidden_WorkshopAddress                *string                               `protobuf:"bytes,4,opt,name=workshop_address,json=workshopAddress"`
	xxx_hidden_WorkshopCardNumber             *v1.FullCardNumber                    `protobuf:"bytes,5,opt,name=workshop_card_number,json=workshopCardNumber"`
	xxx_hidden_WorkshopCardExpiryDate         *timestamppb.Timestamp                `protobuf:"bytes,6,opt,name=workshop_card_expiry_date,json=workshopCardExpiryDate"`
	xxx_hidden_Vin                            *string                               `protobuf:"bytes,7,opt,name=vin"`
	xxx_hidden_VehicleRegistration            *v1.VehicleRegistrationIdentification `protobuf:"bytes,8,opt,name=vehicle_registration,json=vehicleRegistration"`
	xxx_hidden_WVehicleCharacteristicConstant int32                                 `protobuf:"varint,9,opt,name=w_vehicle_characteristic_constant,json=wVehicleCharacteristicConstant"`
	xxx_hidden_KConstantOfRecordingEquipment  int32                                 `protobuf:"varint,10,opt,name=k_constant_of_recording_equipment,json=kConstantOfRecordingEquipment"`
	xxx_hidden_LTyreCircumferenceMm           int32                                 `protobuf:"varint,11,opt,name=l_tyre_circumference_mm,json=lTyreCircumferenceMm"`
	xxx_hidden_TyreSize                       *string                               `protobuf:"bytes,12,opt,name=tyre_size,json=tyreSize"`
	xxx_hidden_AuthorisedSpeedKmh             int32                                 `protobuf:"varint,13,opt,name=authorised_speed_kmh,json=authorisedSpeedKmh"`
	xxx_hidden_OldOdometerValueKm             int32                                 `protobuf:"varint,14,opt,name=old_odometer_value_km,json=oldOdometerValueKm"`
	xxx_hidden_NewOdometerValueKm             int32                                 `protobuf:"varint,15,opt,name=new_odometer_value_km,json=newOdometerValueKm"`
	xxx_hidden_OldTimeValue                   *timestamppb.Timestamp                `protobuf:"bytes,16,opt,name=old_time_value,json=oldTimeValue"`
	xxx_hidden_NewTimeValue                   *timestamppb.Timestamp                `protobuf:"bytes,17,opt,name=new_time_value,json=newTimeValue"`
	xxx_hidden_NextCalibrationDate            *timestamppb.Timestamp                `protobuf:"bytes,18,opt,name=next_calibration_date,json=nextCalibrationDate"`
	XXX_raceDetectHookData                    protoimpl.RaceDetectHookData
	XXX_presence                              [1]uint32
	unknownFields                             protoimpl.UnknownFields
	sizeCache                                 protoimpl.SizeCache
}

func (x *TechnicalData_CalibrationRecord) Reset() {
	*x = TechnicalData_CalibrationRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalData_CalibrationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalData_CalibrationRecord) ProtoMessage() {}

func (x *TechnicalData_CalibrationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalData_CalibrationRecord) GetPurpose() v1.CalibrationPurpose {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Purpose
		}
	}
	return v1.CalibrationPurpose(0)
}

func (x *TechnicalData_CalibrationRecord) GetUnrecognizedPurpose() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedPurpose
	}
	return 0
}

func (x *TechnicalData_CalibrationRecord) GetWorkshopName() string {
	if x != nil {
		if x.xxx_hidden_WorkshopName != nil {
			return *x.xxx_hidden_WorkshopName
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_CalibrationRecord) GetWorkshopAddress() string {
	if x != nil {
		if x.xxx_hidden_WorkshopAddress != nil {
			return *x.xxx_hidden_WorkshopAddress
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_CalibrationRecord) GetWorkshopCardNumber() *v1.FullCardNumber {
	if x != nil {
		return x.xxx_hidden_WorkshopCardNumber
	}
	return nil
}

func (x *TechnicalData_CalibrationRecord) GetWorkshopCardExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_WorkshopCardExpiryDate
	}
	return nil
}

func (x *TechnicalData_CalibrationRecord) GetVin() string {
	if x != nil {
		if x.xxx_hidden_Vin != nil {
			return *x.xxx_hidden_Vin
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_CalibrationRecord) GetVehicleRegistration() *v1.VehicleRegistrationIdentification {
	if x != nil {
		return x.xxx_hidden_VehicleRegistration
	}
	return nil
}

func (x *TechnicalData_CalibrationRecord) GetWVehicleCharacteristicConstant() int32 {
	if x != nil {
		return x.xxx_hidden_WVehicleCharacteristicConstant
	}
	return 0
}

func (x *TechnicalData_CalibrationRecord) GetKConstantOfRecordingEquipment() int32 {
	if x != nil {
		return x.xxx_hidden_KConstantOfRecordingEquipment
	}
	return 0
}

func (x *TechnicalData_CalibrationRecord) GetLTyreCircumferenceMm() int32 {
	if x != nil {
		return x.xxx_hidden_LTyreCircumferenceMm
	}
	return 0
}

func (x *TechnicalData_CalibrationRecord) GetTyreSize() string {
	if x != nil {
		if x.xxx_hidden_TyreSize != nil {
			return *x.xxx_hidden_TyreSize
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_CalibrationRecord) GetAuthorisedSpeedKmh() int32 {
	if x != nil {
		return x.xxx_hidden_AuthorisedSpeedKmh
	}
	return 0
}

func (x *TechnicalData_CalibrationRecord) GetOldOdometerValueKm() int32 {
	if x != nil {
		return x.xxx_hidden_OldOdometerValueKm
	}
	return 0
}

func (x *TechnicalData_CalibrationRecord) GetNewOdometerValueKm() int32 {
	if x != nil {
		return x.xxx_hidden_NewOdometerValueKm
	}
	return 0
}

func (x *TechnicalData_CalibrationRecord) GetOldTimeValue() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_OldTimeValue
	}
	return nil
}

func (x *TechnicalData_CalibrationRecord) GetNewTimeValue() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_NewTimeValue
	}
	return nil
}

func (x *TechnicalData_CalibrationRecord) GetNextCalibrationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_NextCalibrationDate
	}
	return nil
}

func (x *TechnicalData_CalibrationRecord) SetPurpose(v v1.CalibrationPurpose) {
	x.xxx_hidden_Purpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 18)
}

func (x *TechnicalData_CalibrationRecord) SetUnrecognizedPurpose(v int32) {
	x.xxx_hidden_UnrecognizedPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 18)
}

func (x *TechnicalData_CalibrationRecord) SetWorkshopName(v string) {
	x.xxx_hidden_WorkshopName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 18)
}

func (x *TechnicalData_CalibrationRecord) SetWorkshopAddress(v string) {
	x.xxx_hidden_WorkshopAddress = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 18)
}

func (x *TechnicalData_CalibrationRecord) SetWorkshopCardNumber(v *v1.FullCardNumber) {
	x.xxx_hidden_WorkshopCardNumber = v
}

func (x *TechnicalData_CalibrationRecord) SetWorkshopCardExpiryDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_WorkshopCardExpiryDate = v
}

func (x *TechnicalData_CalibrationRecord) SetVin(v string) {
	x.xxx_hidden_Vin = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 18)
}

func (x *TechnicalData_CalibrationRecord) SetVehicleRegistration(v *v1.VehicleRegistrationIdentification) {
	x.xxx_hidden_VehicleRegistration = v
}

func (x *TechnicalData_CalibrationRecord) SetWVehicleCharacteristicConstant(v int32) {
	x.xxx_hidden_WVehicleCharacteristicConstant = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 18)
}

func (x *TechnicalData_CalibrationRecord) SetKConstantOfRecordingEquipment(v int32) {
	x.xxx_hidden_KConstantOfRecordingEquipment = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 18)
}

func (x *TechnicalData_CalibrationRecord) SetLTyreCircumferenceMm(v int32) {
	x.xxx_hidden_LTyreCircumferenceMm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 18)
}

func (x *TechnicalData_CalibrationRecord) SetTyreSize(v string) {
	x.xxx_hidden_TyreSize = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 18)
}

func (x *TechnicalData_CalibrationRecord) SetAuthorisedSpeedKmh(v int32) {
	x.xxx_hidden_AuthorisedSpeedKmh = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 18)
}

func (x *TechnicalData_CalibrationRecord) SetOldOdometerValueKm(v int32) {
	x.xxx_hidden_OldOdometerValueKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 13, 18)
}

func (x *TechnicalData_CalibrationRecord) SetNewOdometerValueKm(v int32) {
	x.xxx_hidden_NewOdometerValueKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 18)
}

func (x *TechnicalData_CalibrationRecord) SetOldTimeValue(v *timestamppb.Timestamp) {
	x.xxx_hidden_OldTimeValue = v
}

func (x *TechnicalData_CalibrationRecord) SetNewTimeValue(v *timestamppb.Timestamp) {
	x.xxx_hidden_NewTimeValue = v
}

func (x *TechnicalData_CalibrationRecord) SetNextCalibrationDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_NextCalibrationDate = v
}

func (x *TechnicalData_CalibrationRecord) HasPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TechnicalData_CalibrationRecord) HasUnrecognizedPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalData_CalibrationRecord) HasWorkshopName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TechnicalData_CalibrationRecord) HasWorkshopAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TechnicalData_CalibrationRecord) HasWorkshopCardNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopCardNumber != nil
}

func (x *TechnicalData_CalibrationRecord) HasWorkshopCardExpiryDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopCardExpiryDate != nil
}

func (x *TechnicalData_CalibrationRecord) HasVin() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TechnicalData_CalibrationRecord) HasVehicleRegistration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VehicleRegistration != nil
}

func (x *TechnicalData_CalibrationRecord) HasWVehicleCharacteristicConstant() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *TechnicalData_CalibrationRecord) HasKConstantOfRecordingEquipment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *TechnicalData_CalibrationRecord) HasLTyreCircumferenceMm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *TechnicalData_CalibrationRecord) HasTyreSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *TechnicalData_CalibrationRecord) HasAuthorisedSpeedKmh() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *TechnicalData_CalibrationRecord) HasOldOdometerValueKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 13)
}

func (x *TechnicalData_CalibrationRecord) HasNewOdometerValueKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *TechnicalData_CalibrationRecord) HasOldTimeValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OldTimeValue != nil
}

func (x *TechnicalData_CalibrationRecord) HasNewTimeValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NewTimeValue != nil
}

func (x *TechnicalData_CalibrationRecord) HasNextCalibrationDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NextCalibrationDate != nil
}

func (x *TechnicalData_CalibrationRecord) ClearPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Purpose = v1.CalibrationPurpose_CALIBRATION_PURPOSE_UNSPECIFIED
}

func (x *TechnicalData_CalibrationRecord) ClearUnrecognizedPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UnrecognizedPurpose = 0
}

func (x *TechnicalData_CalibrationRecord) ClearWorkshopName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_WorkshopName = nil
}

func (x *TechnicalData_CalibrationRecord) ClearWorkshopAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_WorkshopAddress = nil
}

func (x *TechnicalData_CalibrationRecord) ClearWorkshopCardNumber() {
	x.xxx_hidden_WorkshopCardNumber = nil
}

func (x *TechnicalData_CalibrationRecord) ClearWorkshopCardExpiryDate() {
	x.xxx_hidden_WorkshopCardExpiryDate = nil
}

func (x *TechnicalData_CalibrationRecord) ClearVin() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Vin = nil
}

func (x *TechnicalData_CalibrationRecord) ClearVehicleRegistration() {
	x.xxx_hidden_VehicleRegistration = nil
}

func (x *TechnicalData_CalibrationRecord) ClearWVehicleCharacteristicConstant() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_WVehicleCharacteristicConstant = 0
}

func (x *TechnicalData_CalibrationRecord) ClearKConstantOfRecordingEquipment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_KConstantOfRecordingEquipment = 0
}

func (x *TechnicalData_CalibrationRecord) ClearLTyreCircumferenceMm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_LTyreCircumferenceMm = 0
}

func (x *TechnicalData_CalibrationRecord) ClearTyreSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_TyreSize = nil
}

func (x *TechnicalData_CalibrationRecord) ClearAuthorisedSpeedKmh() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_AuthorisedSpeedKmh = 0
}

func (x *TechnicalData_CalibrationRecord) ClearOldOdometerValueKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 13)
	x.xxx_hidden_OldOdometerValueKm = 0
}

func (x *TechnicalData_CalibrationRecord) ClearNewOdometerValueKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_NewOdometerValueKm = 0
}

func (x *TechnicalData_CalibrationRecord) ClearOldTimeValue() {
	x.xxx_hidden_OldTimeValue = nil
}

func (x *TechnicalData_CalibrationRecord) ClearNewTimeValue() {
	x.xxx_hidden_NewTimeValue = nil
}

func (x *TechnicalData_CalibrationRecord) ClearNextCalibrationDate() {
	x.xxx_hidden_NextCalibrationDate = nil
}

type TechnicalData_CalibrationRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The purpose of the calibration.
	Purpose             *v1.CalibrationPurpose
	UnrecognizedPurpose *int32
	// The name of the workshop.
	WorkshopName *string
	// The address of the workshop.
	WorkshopAddress *string
	// The card number of the workshop.
	WorkshopCardNumber *v1.FullCardNumber
	// The expiry date of the workshop card.
	WorkshopCardExpiryDate *timestamppb.Timestamp
	// The Vehicle Identification Number.
	Vin *string
	// The vehicle registration identifier.
	VehicleRegistration *v1.VehicleRegistrationIdentification
	// The vehicle characteristic constant.
	WVehicleCharacteristicConstant *int32
	// The constant of the recording equipment.
	KConstantOfRecordingEquipment *int32
	// The tyre circumference in mm.
	LTyreCircumferenceMm *int32
	// The tyre size designation.
	TyreSize *string
	// The authorised speed in km/h.
	AuthorisedSpeedKmh *int32
	// The odometer value before calibration in km.
	OldOdometerValueKm *int32
	// The odometer value after calibration in km.
	NewOdometerValueKm *int32
	// The time value before calibration.
	OldTimeValue *timestamppb.Timestamp
	// The time value after calibration.
	NewTimeValue *timestamppb.Timestamp
	// The date of the next calibration.
	NextCalibrationDate *timestamppb.Timestamp
}

func (b0 TechnicalData_CalibrationRecord_builder) Build() *TechnicalData_CalibrationRecord {
	m0 := &TechnicalData_CalibrationRecord{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Purpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 18)
		x.xxx_hidden_Purpose = *b.Purpose
	}
	if b.UnrecognizedPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 18)
		x.xxx_hidden_UnrecognizedPurpose = *b.UnrecognizedPurpose
	}
	if b.WorkshopName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 18)
		x.xxx_hidden_WorkshopName = b.WorkshopName
	}
	if b.WorkshopAddress != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 18)
		x.xxx_hidden_WorkshopAddress = b.WorkshopAddress
	}
	x.xxx_hidden_WorkshopCardNumber = b.WorkshopCardNumber
	x.xxx_hidden_WorkshopCardExpiryDate = b.WorkshopCardExpiryDate
	if b.Vin != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 18)
		x.xxx_hidden_Vin = b.Vin
	}
	x.xxx_hidden_VehicleRegistration = b.VehicleRegistration
	if b.WVehicleCharacteristicConstant != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 18)
		x.xxx_hidden_WVehicleCharacteristicConstant = *b.WVehicleCharacteristicConstant
	}
	if b.KConstantOfRecordingEquipment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 18)
		x.xxx_hidden_KConstantOfRecordingEquipment = *b.KConstantOfRecordingEquipment
	}
	if b.LTyreCircumferenceMm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 18)
		x.xxx_hidden_LTyreCircumferenceMm = *b.LTyreCircumferenceMm
	}
	if b.TyreSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 18)
		x.xxx_hidden_TyreSize = b.TyreSize
	}
	if b.AuthorisedSpeedKmh != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 18)
		x.xxx_hidden_AuthorisedSpeedKmh = *b.AuthorisedSpeedKmh
	}
	if b.OldOdometerValueKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 13, 18)
		x.xxx_hidden_OldOdometerValueKm = *b.OldOdometerValueKm
	}
	if b.NewOdometerValueKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 18)
		x.xxx_hidden_NewOdometerValueKm = *b.NewOdometerValueKm
	}
	x.xxx_hidden_OldTimeValue = b.OldTimeValue
	x.xxx_hidden_NewTimeValue = b.NewTimeValue
	x.xxx_hidden_NextCalibrationDate = b.NextCalibrationDate
	return m0
}

// Represents a record of a card used in the VU.
//
// Corresponds to the `VuCardRecord` data type.
// See Data Dictionary, Section 2.179.
type TechnicalData_CardRecord struct {
	state                           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FullCardNumber       *v1.FullCardNumber     `protobuf:"bytes,1,opt,name=full_card_number,json=fullCardNumber"`
	xxx_hidden_CardStructureVersion []byte                 `protobuf:"bytes,2,opt,name=card_structure_version,json=cardStructureVersion"`
	xxx_hidden_CardType             v1.EquipmentType       `protobuf:"varint,3,opt,name=card_type,json=cardType,enum=wayplatform.connect.tachograph.datadictionary.v1.EquipmentType"`
	xxx_hidden_UnrecognizedCardType int32                  `protobuf:"varint,4,opt,name=unrecognized_card_type,json=unrecognizedCardType"`
	XXX_raceDetectHookData          protoimpl.RaceDetectHookData
	XXX_presence                    [1]uint32
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *TechnicalData_CardRecord) Reset() {
	*x = TechnicalData_CardRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalData_CardRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalData_CardRecord) ProtoMessage() {}

func (x *TechnicalData_CardRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalData_CardRecord) GetFullCardNumber() *v1.FullCardNumber {
	if x != nil {
		return x.xxx_hidden_FullCardNumber
	}
	return nil
}

func (x *TechnicalData_CardRecord) GetCardStructureVersion() []byte {
	if x != nil {
		return x.xxx_hidden_CardStructureVersion
	}
	return nil
}

func (x *TechnicalData_CardRecord) GetCardType() v1.EquipmentType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_CardType
		}
	}
	return v1.EquipmentType(0)
}

func (x *TechnicalData_CardRecord) GetUnrecognizedCardType() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedCardType
	}
	return 0
}

func (x *TechnicalData_CardRecord) SetFullCardNumber(v *v1.FullCardNumber) {
	x.xxx_hidden_FullCardNumber = v
}

func (x *TechnicalData_CardRecord) SetCardStructureVersion(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_CardStructureVersion = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *TechnicalData_CardRecord) SetCardType(v v1.EquipmentType) {
	x.xxx_hidden_CardType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *TechnicalData_CardRecord) SetUnrecognizedCardType(v int32) {
	x.xxx_hidden_UnrecognizedCardType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *TechnicalData_CardRecord) HasFullCardNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FullCardNumber != nil
}

func (x *TechnicalData_CardRecord) HasCardStructureVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalData_CardRecord) HasCardType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TechnicalData_CardRecord) HasUnrecognizedCardType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TechnicalData_CardRecord) ClearFullCardNumber() {
	x.xxx_hidden_FullCardNumber = nil
}

func (x *TechnicalData_CardRecord) ClearCardStructureVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardStructureVersion = nil
}

func (x *TechnicalData_CardRecord) ClearCardType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_CardType = v1.EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED
}

func (x *TechnicalData_CardRecord) ClearUnrecognizedCardType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_UnrecognizedCardType = 0
}

type TechnicalData_CardRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The full card number.
	FullCardNumber *v1.FullCardNumber
	// The structure version of the card.
	CardStructureVersion []byte
	// The type of the card.
	CardType             *v1.EquipmentType
	UnrecognizedCardType *int32
}

func (b0 TechnicalData_CardRecord_builder) Build() *TechnicalData_CardRecord {
	m0 := &TechnicalData_CardRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FullCardNumber = b.FullCardNumber
	if b.CardStructureVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_CardStructureVersion = b.CardStructureVersion
	}
	if b.CardType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_CardType = *b.CardType
	}
	if b.UnrecognizedCardType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_UnrecognizedCardType = *b.UnrecognizedCardType
	}
	return m0
}

// Represents a record of ITS consent status for a card.
//
// Corresponds to the `VuITSConsentRecord` data type.
// See Data Dictionary, Section 2.207.
type TechnicalData_ItsConsentRecord struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FullCardNumber *v1.FullCardNumber     `protobuf:"bytes,1,opt,name=full_card_number,json=fullCardNumber"`
	xxx_hidden_ConsentStatus  int32                  `protobuf:"varint,2,opt,name=consent_status,json=consentStatus"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TechnicalData_ItsConsentRecord) Reset() {
	*x = TechnicalData_ItsConsentRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalData_ItsConsentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalData_ItsConsentRecord) ProtoMessage() {}

func (x *TechnicalData_ItsConsentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalData_ItsConsentRecord) GetFullCardNumber() *v1.FullCardNumber {
	if x != nil {
		return x.xxx_hidden_FullCardNumber
	}
	return nil
}

func (x *TechnicalData_ItsConsentRecord) GetConsentStatus() int32 {
	if x != nil {
		return x.xxx_hidden_ConsentStatus
	}
	return 0
}

func (x *TechnicalData_ItsConsentRecord) SetFullCardNumber(v *v1.FullCardNumber) {
	x.xxx_hidden_FullCardNumber = v
}

func (x *TechnicalData_ItsConsentRecord) SetConsentStatus(v int32) {
	x.xxx_hidden_ConsentStatus = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *TechnicalData_ItsConsentRecord) HasFullCardNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FullCardNumber != nil
}

func (x *TechnicalData_ItsConsentRecord) HasConsentStatus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalData_ItsConsentRecord) ClearFullCardNumber() {
	x.xxx_hidden_FullCardNumber = nil
}

func (x *TechnicalData_ItsConsentRecord) ClearConsentStatus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ConsentStatus = 0
}

type TechnicalData_ItsConsentRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The full card number.
	FullCardNumber *v1.FullCardNumber
	// The consent status for ITS data provision.
	ConsentStatus *int32
}

func (b0 TechnicalData_ItsConsentRecord_builder) Build() *TechnicalData_ItsConsentRecord {
	m0 := &TechnicalData_ItsConsentRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FullCardNumber = b.FullCardNumber
	if b.ConsentStatus != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_ConsentStatus = *b.ConsentStatus
	}
	return m0
}

// Represents a record of a power supply interruption.
//
// Corresponds to the `VuPowerSupplyInterruptionRecord` data type.
// See Data Dictionary, Section 2.240.
type TechnicalData_PowerSupplyInterruptionRecord struct {
	state                                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Timestamp                  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp"`
	xxx_hidden_CardSlotNumber             v1.CardSlotNumber      `protobuf:"varint,2,opt,name=card_slot_number,json=cardSlotNumber,enum=wayplatform.connect.tachograph.datadictionary.v1.CardSlotNumber"`
	xxx_hidden_UnrecognizedCardSlotNumber int32                  `protobuf:"varint,3,opt,name=unrecognized_card_slot_number,json=unrecognizedCardSlotNumber"`
	XXX_raceDetectHookData                protoimpl.RaceDetectHookData
	XXX_presence                          [1]uint32
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) Reset() {
	*x = TechnicalData_PowerSupplyInterruptionRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalData_PowerSupplyInterruptionRecord) ProtoMessage() {}

func (x *TechnicalData_PowerSupplyInterruptionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) GetCardSlotNumber() v1.CardSlotNumber {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_CardSlotNumber
		}
	}
	return v1.CardSlotNumber(0)
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) GetUnrecognizedCardSlotNumber() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedCardSlotNumber
	}
	return 0
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) SetCardSlotNumber(v v1.CardSlotNumber) {
	x.xxx_hidden_CardSlotNumber = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) SetUnrecognizedCardSlotNumber(v int32) {
	x.xxx_hidden_UnrecognizedCardSlotNumber = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) HasCardSlotNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) HasUnrecognizedCardSlotNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) ClearCardSlotNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardSlotNumber = v1.CardSlotNumber_CARD_SLOT_NUMBER_UNSPECIFIED
}

func (x *TechnicalData_PowerSupplyInterruptionRecord) ClearUnrecognizedCardSlotNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_UnrecognizedCardSlotNumber = 0
}

type TechnicalData_PowerSupplyInterruptionRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The timestamp of the interruption.
	Timestamp *timestamppb.Timestamp
	// The slot number of the card affected.
	CardSlotNumber             *v1.CardSlotNumber
	UnrecognizedCardSlotNumber *int32
}

func (b0 TechnicalData_PowerSupplyInterruptionRecord_builder) Build() *TechnicalData_PowerSupplyInterruptionRecord {
	m0 := &TechnicalData_PowerSupplyInterruptionRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.CardSlotNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_CardSlotNumber = *b.CardSlotNumber
	}
	if b.UnrecognizedCardSlotNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_UnrecognizedCardSlotNumber = *b.UnrecognizedCardSlotNumber
	}
	return m0
}

// Represents the software identification of the vehicle unit.
//
// Corresponds to the `VuSoftwareIdentification` data type.
// See Data Dictionary, Section 2.225.
type TechnicalData_VuIdentification_VuSoftwareIdentification struct {
	state                               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SoftwareVersion          *string                `protobuf:"bytes,1,opt,name=software_version,json=softwareVersion"`
	xxx_hidden_SoftwareInstallationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=software_installation_date,json=softwareInstallationDate"`
	XXX_raceDetectHookData              protoimpl.RaceDetectHookData
	XXX_presence                        [1]uint32
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) Reset() {
	*x = TechnicalData_VuIdentification_VuSoftwareIdentification{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalData_VuIdentification_VuSoftwareIdentification) ProtoMessage() {}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) GetSoftwareVersion() string {
	if x != nil {
		if x.xxx_hidden_SoftwareVersion != nil {
			return *x.xxx_hidden_SoftwareVersion
		}
		return ""
	}
	return ""
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) GetSoftwareInstallationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SoftwareInstallationDate
	}
	return nil
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) SetSoftwareVersion(v string) {
	x.xxx_hidden_SoftwareVersion = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) SetSoftwareInstallationDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_SoftwareInstallationDate = v
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) HasSoftwareVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) HasSoftwareInstallationDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SoftwareInstallationDate != nil
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) ClearSoftwareVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SoftwareVersion = nil
}

func (x *TechnicalData_VuIdentification_VuSoftwareIdentification) ClearSoftwareInstallationDate() {
	x.xxx_hidden_SoftwareInstallationDate = nil
}

type TechnicalData_VuIdentification_VuSoftwareIdentification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The software version of the VU.
	SoftwareVersion *string
	// The installation date of the software.
	SoftwareInstallationDate *timestamppb.Timestamp
}

func (b0 TechnicalData_VuIdentification_VuSoftwareIdentification_builder) Build() *TechnicalData_VuIdentification_VuSoftwareIdentification {
	m0 := &TechnicalData_VuIdentification_VuSoftwareIdentification{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SoftwareVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_SoftwareVersion = b.SoftwareVersion
	}
	x.xxx_hidden_SoftwareInstallationDate = b.SoftwareInstallationDate
	return m0
}

var File_wayplatform_connect_tachograph_vu_v1_technical_data_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_rawDesc = "" +
	"\n" +
	"9wayplatform/connect/tachograph/vu/v1/technical_data.proto\x12$wayplatform.connect.tachograph.vu.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1aJwayplatform/connect/tachograph/datadictionary/v1/calibration_purpose.proto\x1aGwayplatform/connect/tachograph/datadictionary/v1/card_slot_number.proto\x1aEwayplatform/connect/tachograph/datadictionary/v1/equipment_type.proto\x1aMwayplatform/connect/tachograph/datadictionary/v1/extended_serial_number.proto\x1aGwayplatform/connect/tachograph/datadictionary/v1/full_card_number.proto\x1aEwayplatform/connect/tachograph/datadictionary/v1/nation_numeric.proto\x1aZwayplatform/connect/tachograph/datadictionary/v1/vehicle_registration_identification.proto\x1aAwayplatform/connect/tachograph/datadictionary/v1/generation.proto\x1a5wayplatform/connect/tachograph/vu/v1/versioning.proto\"\x85!\n" +
	"\rTechnicalData\x12\\\n" +
	"\n" +
	"generation\x18\x01 \x01(\x0e2<.wayplatform.connect.tachograph.datadictionary.v1.GenerationR\n" +
	"generation\x12q\n" +
	"\x11vu_identification\x18\x02 \x01(\v2D.wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentificationR\x10vuIdentification\x12v\n" +
	"\x13calibration_records\x18\x03 \x03(\v2E.wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecordR\x12calibrationRecords\x12e\n" +
	"\rpaired_sensor\x18\x04 \x01(\v2@.wayplatform.connect.tachograph.vu.v1.TechnicalData.PairedSensorR\fpairedSensor\x12g\n" +
	"\x0epaired_sensors\x18\x05 \x03(\v2@.wayplatform.connect.tachograph.vu.v1.TechnicalData.PairedSensorR\rpairedSensors\x12w\n" +
	"\x17coupled_gnss_facilities\x18\x06 \x03(\v2?.wayplatform.connect.tachograph.vu.v1.TechnicalData.CoupledGnssR\x15coupledGnssFacilities\x12a\n" +
	"\fcard_records\x18\a \x03(\v2>.wayplatform.connect.tachograph.vu.v1.TechnicalData.CardRecordR\vcardRecords\x12t\n" +
	"\x13its_consent_records\x18\b \x03(\v2D.wayplatform.connect.tachograph.vu.v1.TechnicalData.ItsConsentRecordR\x11itsConsentRecords\x12\x8f\x01\n" +
	"\x1apower_supply_interruptions\x18\t \x03(\v2Q.wayplatform.connect.tachograph.vu.v1.TechnicalData.PowerSupplyInterruptionRecordR\x18powerSupplyInterruptions\x12%\n" +
	"\x0esignature_gen1\x18\n" +
	" \x01(\fR\rsignatureGen1\x12%\n" +
	"\x0esignature_gen2\x18\v \x01(\fR\rsignatureGen2\x1a\xaf\x05\n" +
	"\x10VuIdentification\x12+\n" +
	"\x11manufacturer_name\x18\x01 \x01(\tR\x10manufacturerName\x121\n" +
	"\x14manufacturer_address\x18\x02 \x01(\tR\x13manufacturerAddress\x12\x1f\n" +
	"\vpart_number\x18\x03 \x01(\tR\n" +
	"partNumber\x12k\n" +
	"\rserial_number\x18\x04 \x01(\v2F.wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumberR\fserialNumber\x12\x96\x01\n" +
	"\x17software_identification\x18\x05 \x01(\v2].wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentification.VuSoftwareIdentificationR\x16softwareIdentification\x12I\n" +
	"\x12manufacturing_date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x11manufacturingDate\x12'\n" +
	"\x0fapproval_number\x18\a \x01(\tR\x0eapprovalNumber\x1a\x9f\x01\n" +
	"\x18VuSoftwareIdentification\x12)\n" +
	"\x10software_version\x18\x01 \x01(\tR\x0fsoftwareVersion\x12X\n" +
	"\x1asoftware_installation_date\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x18softwareInstallationDate\x1a\xe3\x01\n" +
	"\fPairedSensor\x12k\n" +
	"\rserial_number\x18\x01 \x01(\v2F.wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumberR\fserialNumber\x12'\n" +
	"\x0fapproval_number\x18\x02 \x01(\tR\x0eapprovalNumber\x12=\n" +
	"\fpairing_date\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\vpairingDate\x1a\xe4\x01\n" +
	"\vCoupledGnss\x12k\n" +
	"\rserial_number\x18\x01 \x01(\v2F.wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumberR\fserialNumber\x12'\n" +
	"\x0fapproval_number\x18\x02 \x01(\tR\x0eapprovalNumber\x12?\n" +
	"\rcoupling_date\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fcouplingDate\x1a\xb1\t\n" +
	"\x11CalibrationRecord\x12^\n" +
	"\apurpose\x18\x01 \x01(\x0e2D.wayplatform.connect.tachograph.datadictionary.v1.CalibrationPurposeR\apurpose\x121\n" +
	"\x14unrecognized_purpose\x18\x02 \x01(\x05R\x13unrecognizedPurpose\x12#\n" +
	"\rworkshop_name\x18\x03 \x01(\tR\fworkshopName\x12)\n" +
	"\x10workshop_address\x18\x04 \x01(\tR\x0fworkshopAddress\x12r\n" +
	"\x14workshop_card_number\x18\x05 \x01(\v2@.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberR\x12workshopCardNumber\x12U\n" +
	"\x19workshop_card_expiry_date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x16workshopCardExpiryDate\x12\x10\n" +
	"\x03vin\x18\a \x01(\tR\x03vin\x12\x86\x01\n" +
	"\x14vehicle_registration\x18\b \x01(\v2S.wayplatform.connect.tachograph.datadictionary.v1.VehicleRegistrationIdentificationR\x13vehicleRegistration\x12I\n" +
	"!w_vehicle_characteristic_constant\x18\t \x01(\x05R\x1ewVehicleCharacteristicConstant\x12H\n" +
	"!k_constant_of_recording_equipment\x18\n" +
	" \x01(\x05R\x1dkConstantOfRecordingEquipment\x125\n" +
	"\x17l_tyre_circumference_mm\x18\v \x01(\x05R\x14lTyreCircumferenceMm\x12\x1b\n" +
	"\ttyre_size\x18\f \x01(\tR\btyreSize\x120\n" +
	"\x14authorised_speed_kmh\x18\r \x01(\x05R\x12authorisedSpeedKmh\x121\n" +
	"\x15old_odometer_value_km\x18\x0e \x01(\x05R\x12oldOdometerValueKm\x121\n" +
	"\x15new_odometer_value_km\x18\x0f \x01(\x05R\x12newOdometerValueKm\x12@\n" +
	"\x0eold_time_value\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\foldTimeValue\x12@\n" +
	"\x0enew_time_value\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\fnewTimeValue\x12N\n" +
	"\x15next_calibration_date\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampR\x13nextCalibrationDate\x1a\xc2\x02\n" +
	"\n" +
	"CardRecord\x12j\n" +
	"\x10full_card_number\x18\x01 \x01(\v2@.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberR\x0efullCardNumber\x124\n" +
	"\x16card_structure_version\x18\x02 \x01(\fR\x14cardStructureVersion\x12\\\n" +
	"\tcard_type\x18\x03 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.EquipmentTypeR\bcardType\x124\n" +
	"\x16unrecognized_card_type\x18\x04 \x01(\x05R\x14unrecognizedCardType\x1a\xa5\x01\n" +
	"\x10ItsConsentRecord\x12j\n" +
	"\x10full_card_number\x18\x01 \x01(\v2@.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberR\x0efullCardNumber\x12%\n" +
	"\x0econsent_status\x18\x02 \x01(\x05R\rconsentStatus\x1a\x88\x02\n" +
	"\x1dPowerSupplyInterruptionRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12j\n" +
	"\x10card_slot_number\x18\x02 \x01(\x0e2@.wayplatform.connect.tachograph.datadictionary.v1.CardSlotNumberR\x0ecardSlotNumber\x12A\n" +
	"\x1dunrecognized_card_slot_number\x18\x03 \x01(\x05R\x1aunrecognizedCardSlotNumberB\xd1\x02\n" +
	"(com.wayplatform.connect.tachograph.vu.v1B\x12TechnicalDataProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/vu/v1;vuv1\xa2\x02\x04WCTV\xaa\x02$Wayplatform.Connect.Tachograph.Vu.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Vu\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Vu\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Vu::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_goTypes = []any{
	(*TechnicalData)(nil),                                           // 0: wayplatform.connect.tachograph.vu.v1.TechnicalData
	(*TechnicalData_VuIdentification)(nil),                          // 1: wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentification
	(*TechnicalData_PairedSensor)(nil),                              // 2: wayplatform.connect.tachograph.vu.v1.TechnicalData.PairedSensor
	(*TechnicalData_CoupledGnss)(nil),                               // 3: wayplatform.connect.tachograph.vu.v1.TechnicalData.CoupledGnss
	(*TechnicalData_CalibrationRecord)(nil),                         // 4: wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecord
	(*TechnicalData_CardRecord)(nil),                                // 5: wayplatform.connect.tachograph.vu.v1.TechnicalData.CardRecord
	(*TechnicalData_ItsConsentRecord)(nil),                          // 6: wayplatform.connect.tachograph.vu.v1.TechnicalData.ItsConsentRecord
	(*TechnicalData_PowerSupplyInterruptionRecord)(nil),             // 7: wayplatform.connect.tachograph.vu.v1.TechnicalData.PowerSupplyInterruptionRecord
	(*TechnicalData_VuIdentification_VuSoftwareIdentification)(nil), // 8: wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentification.VuSoftwareIdentification
	(v1.Generation)(0),                                              // 9: wayplatform.connect.tachograph.datadictionary.v1.Generation
	(*v1.ExtendedSerialNumber)(nil),                                 // 10: wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumber
	(*timestamppb.Timestamp)(nil),                                   // 11: google.protobuf.Timestamp
	(v1.CalibrationPurpose)(0),                                      // 12: wayplatform.connect.tachograph.datadictionary.v1.CalibrationPurpose
	(*v1.FullCardNumber)(nil),                                       // 13: wayplatform.connect.tachograph.datadictionary.v1.FullCardNumber
	(*v1.VehicleRegistrationIdentification)(nil),                    // 14: wayplatform.connect.tachograph.datadictionary.v1.VehicleRegistrationIdentification
	(v1.EquipmentType)(0),                                           // 15: wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
	(v1.CardSlotNumber)(0),                                          // 16: wayplatform.connect.tachograph.datadictionary.v1.CardSlotNumber
}
var file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_depIdxs = []int32{
	9,  // 0: wayplatform.connect.tachograph.vu.v1.TechnicalData.generation:type_name -> wayplatform.connect.tachograph.datadictionary.v1.Generation
	1,  // 1: wayplatform.connect.tachograph.vu.v1.TechnicalData.vu_identification:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentification
	4,  // 2: wayplatform.connect.tachograph.vu.v1.TechnicalData.calibration_records:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecord
	2,  // 3: wayplatform.connect.tachograph.vu.v1.TechnicalData.paired_sensor:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalData.PairedSensor
	2,  // 4: wayplatform.connect.tachograph.vu.v1.TechnicalData.paired_sensors:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalData.PairedSensor
	3,  // 5: wayplatform.connect.tachograph.vu.v1.TechnicalData.coupled_gnss_facilities:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalData.CoupledGnss
	5,  // 6: wayplatform.connect.tachograph.vu.v1.TechnicalData.card_records:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalData.CardRecord
	6,  // 7: wayplatform.connect.tachograph.vu.v1.TechnicalData.its_consent_records:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalData.ItsConsentRecord
	7,  // 8: wayplatform.connect.tachograph.vu.v1.TechnicalData.power_supply_interruptions:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalData.PowerSupplyInterruptionRecord
	10, // 9: wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentification.serial_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumber
	8,  // 10: wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentification.software_identification:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentification.VuSoftwareIdentification
	11, // 11: wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentification.manufacturing_date:type_name -> google.protobuf.Timestamp
	10, // 12: wayplatform.connect.tachograph.vu.v1.TechnicalData.PairedSensor.serial_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumber
	11, // 13: wayplatform.connect.tachograph.vu.v1.TechnicalData.PairedSensor.pairing_date:type_name -> google.protobuf.Timestamp
	10, // 14: wayplatform.connect.tachograph.vu.v1.TechnicalData.CoupledGnss.serial_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.ExtendedSerialNumber
	11, // 15: wayplatform.connect.tachograph.vu.v1.TechnicalData.CoupledGnss.coupling_date:type_name -> google.protobuf.Timestamp
	12, // 16: wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecord.purpose:type_name -> wayplatform.connect.tachograph.datadictionary.v1.CalibrationPurpose
	13, // 17: wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecord.workshop_card_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumber
	11, // 18: wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecord.workshop_card_expiry_date:type_name -> google.protobuf.Timestamp
	14, // 19: wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecord.vehicle_registration:type_name -> wayplatform.connect.tachograph.datadictionary.v1.VehicleRegistrationIdentification
	11, // 20: wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecord.old_time_value:type_name -> google.protobuf.Timestamp
	11, // 21: wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecord.new_time_value:type_name -> google.protobuf.Timestamp
	11, // 22: wayplatform.connect.tachograph.vu.v1.TechnicalData.CalibrationRecord.next_calibration_date:type_name -> google.protobuf.Timestamp
	13, // 23: wayplatform.connect.tachograph.vu.v1.TechnicalData.CardRecord.full_card_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumber
	15, // 24: wayplatform.connect.tachograph.vu.v1.TechnicalData.CardRecord.card_type:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EquipmentType
	13, // 25: wayplatform.connect.tachograph.vu.v1.TechnicalData.ItsConsentRecord.full_card_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumber
	11, // 26: wayplatform.connect.tachograph.vu.v1.TechnicalData.PowerSupplyInterruptionRecord.timestamp:type_name -> google.protobuf.Timestamp
	16, // 27: wayplatform.connect.tachograph.vu.v1.TechnicalData.PowerSupplyInterruptionRecord.card_slot_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.CardSlotNumber
	11, // 28: wayplatform.connect.tachograph.vu.v1.TechnicalData.VuIdentification.VuSoftwareIdentification.software_installation_date:type_name -> google.protobuf.Timestamp
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_init() }
func file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_init() {
	if File_wayplatform_connect_tachograph_vu_v1_technical_data_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_vu_v1_versioning_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_rawDesc), len(file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_vu_v1_technical_data_proto = out.File
	file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_goTypes = nil
	file_wayplatform_connect_tachograph_vu_v1_technical_data_proto_depIdxs = nil
}
