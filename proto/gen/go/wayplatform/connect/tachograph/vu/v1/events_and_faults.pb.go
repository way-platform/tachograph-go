// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/vu/v1/events_and_faults.proto

package vuv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the consolidated data structure for an Events and Faults transfer.
//
// This message corresponds to the data defined in the regulation document:
// Appendix 7, Section 2.2.6.4: "Positive Response Transfer Data Events and Faults".
type EventsAndFaults struct {
	state                          protoimpl.MessageState                      `protogen:"opaque.v1"`
	xxx_hidden_Generation          v1.Generation                               `protobuf:"varint,1,opt,name=generation,enum=wayplatform.connect.tachograph.datadictionary.v1.Generation"`
	xxx_hidden_Faults              *[]*EventsAndFaults_FaultRecord             `protobuf:"bytes,2,rep,name=faults"`
	xxx_hidden_Events              *[]*EventsAndFaults_EventRecord             `protobuf:"bytes,3,rep,name=events"`
	xxx_hidden_OverspeedingControl *EventsAndFaults_OverSpeedingControlData    `protobuf:"bytes,4,opt,name=overspeeding_control,json=overspeedingControl"`
	xxx_hidden_OverspeedingEvents  *[]*EventsAndFaults_OverSpeedingEventRecord `protobuf:"bytes,5,rep,name=overspeeding_events,json=overspeedingEvents"`
	xxx_hidden_TimeAdjustments     *[]*EventsAndFaults_TimeAdjustmentRecord    `protobuf:"bytes,6,rep,name=time_adjustments,json=timeAdjustments"`
	xxx_hidden_SignatureGen1       []byte                                      `protobuf:"bytes,7,opt,name=signature_gen1,json=signatureGen1"`
	xxx_hidden_SignatureGen2       []byte                                      `protobuf:"bytes,8,opt,name=signature_gen2,json=signatureGen2"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *EventsAndFaults) Reset() {
	*x = EventsAndFaults{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsAndFaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsAndFaults) ProtoMessage() {}

func (x *EventsAndFaults) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EventsAndFaults) GetGeneration() v1.Generation {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Generation
		}
	}
	return v1.Generation(0)
}

func (x *EventsAndFaults) GetFaults() []*EventsAndFaults_FaultRecord {
	if x != nil {
		if x.xxx_hidden_Faults != nil {
			return *x.xxx_hidden_Faults
		}
	}
	return nil
}

func (x *EventsAndFaults) GetEvents() []*EventsAndFaults_EventRecord {
	if x != nil {
		if x.xxx_hidden_Events != nil {
			return *x.xxx_hidden_Events
		}
	}
	return nil
}

func (x *EventsAndFaults) GetOverspeedingControl() *EventsAndFaults_OverSpeedingControlData {
	if x != nil {
		return x.xxx_hidden_OverspeedingControl
	}
	return nil
}

func (x *EventsAndFaults) GetOverspeedingEvents() []*EventsAndFaults_OverSpeedingEventRecord {
	if x != nil {
		if x.xxx_hidden_OverspeedingEvents != nil {
			return *x.xxx_hidden_OverspeedingEvents
		}
	}
	return nil
}

func (x *EventsAndFaults) GetTimeAdjustments() []*EventsAndFaults_TimeAdjustmentRecord {
	if x != nil {
		if x.xxx_hidden_TimeAdjustments != nil {
			return *x.xxx_hidden_TimeAdjustments
		}
	}
	return nil
}

func (x *EventsAndFaults) GetSignatureGen1() []byte {
	if x != nil {
		return x.xxx_hidden_SignatureGen1
	}
	return nil
}

func (x *EventsAndFaults) GetSignatureGen2() []byte {
	if x != nil {
		return x.xxx_hidden_SignatureGen2
	}
	return nil
}

func (x *EventsAndFaults) SetGeneration(v v1.Generation) {
	x.xxx_hidden_Generation = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *EventsAndFaults) SetFaults(v []*EventsAndFaults_FaultRecord) {
	x.xxx_hidden_Faults = &v
}

func (x *EventsAndFaults) SetEvents(v []*EventsAndFaults_EventRecord) {
	x.xxx_hidden_Events = &v
}

func (x *EventsAndFaults) SetOverspeedingControl(v *EventsAndFaults_OverSpeedingControlData) {
	x.xxx_hidden_OverspeedingControl = v
}

func (x *EventsAndFaults) SetOverspeedingEvents(v []*EventsAndFaults_OverSpeedingEventRecord) {
	x.xxx_hidden_OverspeedingEvents = &v
}

func (x *EventsAndFaults) SetTimeAdjustments(v []*EventsAndFaults_TimeAdjustmentRecord) {
	x.xxx_hidden_TimeAdjustments = &v
}

func (x *EventsAndFaults) SetSignatureGen1(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_SignatureGen1 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 8)
}

func (x *EventsAndFaults) SetSignatureGen2(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_SignatureGen2 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *EventsAndFaults) HasGeneration() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *EventsAndFaults) HasOverspeedingControl() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OverspeedingControl != nil
}

func (x *EventsAndFaults) HasSignatureGen1() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *EventsAndFaults) HasSignatureGen2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *EventsAndFaults) ClearGeneration() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Generation = v1.Generation_GENERATION_UNSPECIFIED
}

func (x *EventsAndFaults) ClearOverspeedingControl() {
	x.xxx_hidden_OverspeedingControl = nil
}

func (x *EventsAndFaults) ClearSignatureGen1() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_SignatureGen1 = nil
}

func (x *EventsAndFaults) ClearSignatureGen2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_SignatureGen2 = nil
}

type EventsAndFaults_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The generation of the vehicle unit, parsed from the raw transfer data.
	//
	// Discriminator field.
	Generation *v1.Generation
	// All faults stored or on-going in the VU.
	// Corresponds to `VuFaultData` (Gen1) or `VuFaultRecordArray` (Gen2).
	Faults []*EventsAndFaults_FaultRecord
	// All events (except over speeding) stored or on-going in the VU.
	// Corresponds to `VuEventData` (Gen1) or `VuEventRecordArray` (Gen2).
	Events []*EventsAndFaults_EventRecord
	// Data related to the last overspeeding control.
	// Corresponds to `VuOverSpeedingControlData` (Gen1) or `VuOverSpeedingControlDataRecordArray` (Gen2).
	OverspeedingControl *EventsAndFaults_OverSpeedingControlData
	// All overspeeding events stored in the VU.
	// Corresponds to `VuOverSpeedingEventData` (Gen1) or `VuOverSpeedingEventRecordArray` (Gen2).
	OverspeedingEvents []*EventsAndFaults_OverSpeedingEventRecord
	// All time adjustment events stored in the VU (outside a full calibration).
	// Corresponds to `VuTimeAdjustmentData` (Gen1) or `VuTimeAdjustmentRecordArray` (Gen2).
	TimeAdjustments []*EventsAndFaults_TimeAdjustmentRecord
	// Signature for Gen1 data (RSA, 128 bytes).
	// See Data Dictionary, Section 2.149.
	SignatureGen1 []byte
	// Signature for Gen2 data (ECC).
	// See Data Dictionary, Section 2.149.
	SignatureGen2 []byte
}

func (b0 EventsAndFaults_builder) Build() *EventsAndFaults {
	m0 := &EventsAndFaults{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Generation != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_Generation = *b.Generation
	}
	x.xxx_hidden_Faults = &b.Faults
	x.xxx_hidden_Events = &b.Events
	x.xxx_hidden_OverspeedingControl = b.OverspeedingControl
	x.xxx_hidden_OverspeedingEvents = &b.OverspeedingEvents
	x.xxx_hidden_TimeAdjustments = &b.TimeAdjustments
	if b.SignatureGen1 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 8)
		x.xxx_hidden_SignatureGen1 = b.SignatureGen1
	}
	if b.SignatureGen2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_SignatureGen2 = b.SignatureGen2
	}
	return m0
}

// Represents a vehicle unit fault record.
//
// Corresponds to the `VuFaultRecord` data type.
// See Data Dictionary, Section 2.201.
type EventsAndFaults_FaultRecord struct {
	state                                protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_FaultType                 v1.EventFaultType               `protobuf:"varint,1,opt,name=fault_type,json=faultType,enum=wayplatform.connect.tachograph.datadictionary.v1.EventFaultType"`
	xxx_hidden_UnrecognizedFaultType     int32                           `protobuf:"varint,2,opt,name=unrecognized_fault_type,json=unrecognizedFaultType"`
	xxx_hidden_RecordPurpose             v1.EventFaultRecordPurpose      `protobuf:"varint,3,opt,name=record_purpose,json=recordPurpose,enum=wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurpose"`
	xxx_hidden_UnrecognizedRecordPurpose int32                           `protobuf:"varint,4,opt,name=unrecognized_record_purpose,json=unrecognizedRecordPurpose"`
	xxx_hidden_BeginTime                 *timestamppb.Timestamp          `protobuf:"bytes,5,opt,name=begin_time,json=beginTime"`
	xxx_hidden_EndTime                   *timestamppb.Timestamp          `protobuf:"bytes,6,opt,name=end_time,json=endTime"`
	xxx_hidden_CardIdentifier            *v1.FullCardNumberAndGeneration `protobuf:"bytes,7,opt,name=card_identifier,json=cardIdentifier"`
	XXX_raceDetectHookData               protoimpl.RaceDetectHookData
	XXX_presence                         [1]uint32
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *EventsAndFaults_FaultRecord) Reset() {
	*x = EventsAndFaults_FaultRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsAndFaults_FaultRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsAndFaults_FaultRecord) ProtoMessage() {}

func (x *EventsAndFaults_FaultRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EventsAndFaults_FaultRecord) GetFaultType() v1.EventFaultType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_FaultType
		}
	}
	return v1.EventFaultType(0)
}

func (x *EventsAndFaults_FaultRecord) GetUnrecognizedFaultType() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedFaultType
	}
	return 0
}

func (x *EventsAndFaults_FaultRecord) GetRecordPurpose() v1.EventFaultRecordPurpose {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_RecordPurpose
		}
	}
	return v1.EventFaultRecordPurpose(0)
}

func (x *EventsAndFaults_FaultRecord) GetUnrecognizedRecordPurpose() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedRecordPurpose
	}
	return 0
}

func (x *EventsAndFaults_FaultRecord) GetBeginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_BeginTime
	}
	return nil
}

func (x *EventsAndFaults_FaultRecord) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EndTime
	}
	return nil
}

func (x *EventsAndFaults_FaultRecord) GetCardIdentifier() *v1.FullCardNumberAndGeneration {
	if x != nil {
		return x.xxx_hidden_CardIdentifier
	}
	return nil
}

func (x *EventsAndFaults_FaultRecord) SetFaultType(v v1.EventFaultType) {
	x.xxx_hidden_FaultType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *EventsAndFaults_FaultRecord) SetUnrecognizedFaultType(v int32) {
	x.xxx_hidden_UnrecognizedFaultType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *EventsAndFaults_FaultRecord) SetRecordPurpose(v v1.EventFaultRecordPurpose) {
	x.xxx_hidden_RecordPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *EventsAndFaults_FaultRecord) SetUnrecognizedRecordPurpose(v int32) {
	x.xxx_hidden_UnrecognizedRecordPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *EventsAndFaults_FaultRecord) SetBeginTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_BeginTime = v
}

func (x *EventsAndFaults_FaultRecord) SetEndTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EndTime = v
}

func (x *EventsAndFaults_FaultRecord) SetCardIdentifier(v *v1.FullCardNumberAndGeneration) {
	x.xxx_hidden_CardIdentifier = v
}

func (x *EventsAndFaults_FaultRecord) HasFaultType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *EventsAndFaults_FaultRecord) HasUnrecognizedFaultType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *EventsAndFaults_FaultRecord) HasRecordPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *EventsAndFaults_FaultRecord) HasUnrecognizedRecordPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *EventsAndFaults_FaultRecord) HasBeginTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_BeginTime != nil
}

func (x *EventsAndFaults_FaultRecord) HasEndTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EndTime != nil
}

func (x *EventsAndFaults_FaultRecord) HasCardIdentifier() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardIdentifier != nil
}

func (x *EventsAndFaults_FaultRecord) ClearFaultType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FaultType = v1.EventFaultType_EVENT_FAULT_TYPE_UNSPECIFIED
}

func (x *EventsAndFaults_FaultRecord) ClearUnrecognizedFaultType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UnrecognizedFaultType = 0
}

func (x *EventsAndFaults_FaultRecord) ClearRecordPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_RecordPurpose = v1.EventFaultRecordPurpose_EVENT_FAULT_RECORD_PURPOSE_UNSPECIFIED
}

func (x *EventsAndFaults_FaultRecord) ClearUnrecognizedRecordPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_UnrecognizedRecordPurpose = 0
}

func (x *EventsAndFaults_FaultRecord) ClearBeginTime() {
	x.xxx_hidden_BeginTime = nil
}

func (x *EventsAndFaults_FaultRecord) ClearEndTime() {
	x.xxx_hidden_EndTime = nil
}

func (x *EventsAndFaults_FaultRecord) ClearCardIdentifier() {
	x.xxx_hidden_CardIdentifier = nil
}

type EventsAndFaults_FaultRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Type of the fault.
	// See Data Dictionary, Section 2.70 for `EventFaultType`.
	FaultType             *v1.EventFaultType
	UnrecognizedFaultType *int32
	// Purpose for which the fault has been recorded.
	// See Data Dictionary, Section 2.69 for `EventFaultRecordPurpose`.
	RecordPurpose             *v1.EventFaultRecordPurpose
	UnrecognizedRecordPurpose *int32
	// Date and time of the beginning of the fault.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	BeginTime *timestamppb.Timestamp
	// Date and time of the end of the fault.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	EndTime *timestamppb.Timestamp
	// The card number and generation of the driver/workshop associated with the event.
	CardIdentifier *v1.FullCardNumberAndGeneration
}

func (b0 EventsAndFaults_FaultRecord_builder) Build() *EventsAndFaults_FaultRecord {
	m0 := &EventsAndFaults_FaultRecord{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FaultType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_FaultType = *b.FaultType
	}
	if b.UnrecognizedFaultType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_UnrecognizedFaultType = *b.UnrecognizedFaultType
	}
	if b.RecordPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_RecordPurpose = *b.RecordPurpose
	}
	if b.UnrecognizedRecordPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_UnrecognizedRecordPurpose = *b.UnrecognizedRecordPurpose
	}
	x.xxx_hidden_BeginTime = b.BeginTime
	x.xxx_hidden_EndTime = b.EndTime
	x.xxx_hidden_CardIdentifier = b.CardIdentifier
	return m0
}

// Represents a vehicle unit event record.
//
// Corresponds to the `VuEventRecord` data type.
// See Data Dictionary, Section 2.198.
type EventsAndFaults_EventRecord struct {
	state                                protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_EventType                 v1.EventFaultType               `protobuf:"varint,1,opt,name=event_type,json=eventType,enum=wayplatform.connect.tachograph.datadictionary.v1.EventFaultType"`
	xxx_hidden_UnrecognizedEventType     int32                           `protobuf:"varint,2,opt,name=unrecognized_event_type,json=unrecognizedEventType"`
	xxx_hidden_RecordPurpose             v1.EventFaultRecordPurpose      `protobuf:"varint,3,opt,name=record_purpose,json=recordPurpose,enum=wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurpose"`
	xxx_hidden_UnrecognizedRecordPurpose int32                           `protobuf:"varint,4,opt,name=unrecognized_record_purpose,json=unrecognizedRecordPurpose"`
	xxx_hidden_BeginTime                 *timestamppb.Timestamp          `protobuf:"bytes,5,opt,name=begin_time,json=beginTime"`
	xxx_hidden_EndTime                   *timestamppb.Timestamp          `protobuf:"bytes,6,opt,name=end_time,json=endTime"`
	xxx_hidden_CardIdentifier            *v1.FullCardNumberAndGeneration `protobuf:"bytes,7,opt,name=card_identifier,json=cardIdentifier"`
	xxx_hidden_SimilarEventsNumber       int32                           `protobuf:"varint,8,opt,name=similar_events_number,json=similarEventsNumber"`
	XXX_raceDetectHookData               protoimpl.RaceDetectHookData
	XXX_presence                         [1]uint32
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *EventsAndFaults_EventRecord) Reset() {
	*x = EventsAndFaults_EventRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsAndFaults_EventRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsAndFaults_EventRecord) ProtoMessage() {}

func (x *EventsAndFaults_EventRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EventsAndFaults_EventRecord) GetEventType() v1.EventFaultType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_EventType
		}
	}
	return v1.EventFaultType(0)
}

func (x *EventsAndFaults_EventRecord) GetUnrecognizedEventType() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedEventType
	}
	return 0
}

func (x *EventsAndFaults_EventRecord) GetRecordPurpose() v1.EventFaultRecordPurpose {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_RecordPurpose
		}
	}
	return v1.EventFaultRecordPurpose(0)
}

func (x *EventsAndFaults_EventRecord) GetUnrecognizedRecordPurpose() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedRecordPurpose
	}
	return 0
}

func (x *EventsAndFaults_EventRecord) GetBeginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_BeginTime
	}
	return nil
}

func (x *EventsAndFaults_EventRecord) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EndTime
	}
	return nil
}

func (x *EventsAndFaults_EventRecord) GetCardIdentifier() *v1.FullCardNumberAndGeneration {
	if x != nil {
		return x.xxx_hidden_CardIdentifier
	}
	return nil
}

func (x *EventsAndFaults_EventRecord) GetSimilarEventsNumber() int32 {
	if x != nil {
		return x.xxx_hidden_SimilarEventsNumber
	}
	return 0
}

func (x *EventsAndFaults_EventRecord) SetEventType(v v1.EventFaultType) {
	x.xxx_hidden_EventType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *EventsAndFaults_EventRecord) SetUnrecognizedEventType(v int32) {
	x.xxx_hidden_UnrecognizedEventType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *EventsAndFaults_EventRecord) SetRecordPurpose(v v1.EventFaultRecordPurpose) {
	x.xxx_hidden_RecordPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *EventsAndFaults_EventRecord) SetUnrecognizedRecordPurpose(v int32) {
	x.xxx_hidden_UnrecognizedRecordPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *EventsAndFaults_EventRecord) SetBeginTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_BeginTime = v
}

func (x *EventsAndFaults_EventRecord) SetEndTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EndTime = v
}

func (x *EventsAndFaults_EventRecord) SetCardIdentifier(v *v1.FullCardNumberAndGeneration) {
	x.xxx_hidden_CardIdentifier = v
}

func (x *EventsAndFaults_EventRecord) SetSimilarEventsNumber(v int32) {
	x.xxx_hidden_SimilarEventsNumber = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *EventsAndFaults_EventRecord) HasEventType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *EventsAndFaults_EventRecord) HasUnrecognizedEventType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *EventsAndFaults_EventRecord) HasRecordPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *EventsAndFaults_EventRecord) HasUnrecognizedRecordPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *EventsAndFaults_EventRecord) HasBeginTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_BeginTime != nil
}

func (x *EventsAndFaults_EventRecord) HasEndTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EndTime != nil
}

func (x *EventsAndFaults_EventRecord) HasCardIdentifier() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardIdentifier != nil
}

func (x *EventsAndFaults_EventRecord) HasSimilarEventsNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *EventsAndFaults_EventRecord) ClearEventType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_EventType = v1.EventFaultType_EVENT_FAULT_TYPE_UNSPECIFIED
}

func (x *EventsAndFaults_EventRecord) ClearUnrecognizedEventType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UnrecognizedEventType = 0
}

func (x *EventsAndFaults_EventRecord) ClearRecordPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_RecordPurpose = v1.EventFaultRecordPurpose_EVENT_FAULT_RECORD_PURPOSE_UNSPECIFIED
}

func (x *EventsAndFaults_EventRecord) ClearUnrecognizedRecordPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_UnrecognizedRecordPurpose = 0
}

func (x *EventsAndFaults_EventRecord) ClearBeginTime() {
	x.xxx_hidden_BeginTime = nil
}

func (x *EventsAndFaults_EventRecord) ClearEndTime() {
	x.xxx_hidden_EndTime = nil
}

func (x *EventsAndFaults_EventRecord) ClearCardIdentifier() {
	x.xxx_hidden_CardIdentifier = nil
}

func (x *EventsAndFaults_EventRecord) ClearSimilarEventsNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_SimilarEventsNumber = 0
}

type EventsAndFaults_EventRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Type of the event.
	// See Data Dictionary, Section 2.70 for `EventFaultType`.
	EventType             *v1.EventFaultType
	UnrecognizedEventType *int32
	// Purpose for which the event has been recorded.
	// See Data Dictionary, Section 2.69 for `EventFaultRecordPurpose`.
	RecordPurpose             *v1.EventFaultRecordPurpose
	UnrecognizedRecordPurpose *int32
	// Date and time of the beginning of the event.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	BeginTime *timestamppb.Timestamp
	// Date and time of the end of the event.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	EndTime *timestamppb.Timestamp
	// The card number and generation of the driver/workshop associated with the event.
	CardIdentifier *v1.FullCardNumberAndGeneration
	// Number of similar events on the same day.
	// See Data Dictionary, Section 2.151 for `SimilarEventsNumber`.
	SimilarEventsNumber *int32
}

func (b0 EventsAndFaults_EventRecord_builder) Build() *EventsAndFaults_EventRecord {
	m0 := &EventsAndFaults_EventRecord{}
	b, x := &b0, m0
	_, _ = b, x
	if b.EventType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_EventType = *b.EventType
	}
	if b.UnrecognizedEventType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_UnrecognizedEventType = *b.UnrecognizedEventType
	}
	if b.RecordPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_RecordPurpose = *b.RecordPurpose
	}
	if b.UnrecognizedRecordPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_UnrecognizedRecordPurpose = *b.UnrecognizedRecordPurpose
	}
	x.xxx_hidden_BeginTime = b.BeginTime
	x.xxx_hidden_EndTime = b.EndTime
	x.xxx_hidden_CardIdentifier = b.CardIdentifier
	if b.SimilarEventsNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_SimilarEventsNumber = *b.SimilarEventsNumber
	}
	return m0
}

// Represents overspeeding control data.
//
// Corresponds to the `VuOverSpeedingControlData` data type.
// See Data Dictionary, Section 2.212.
type EventsAndFaults_OverSpeedingControlData struct {
	state                                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LastControlTime                   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_control_time,json=lastControlTime"`
	xxx_hidden_FirstOverspeedSinceLastControl    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=first_overspeed_since_last_control,json=firstOverspeedSinceLastControl"`
	xxx_hidden_NumberOfOverspeedSinceLastControl int32                  `protobuf:"varint,3,opt,name=number_of_overspeed_since_last_control,json=numberOfOverspeedSinceLastControl"`
	XXX_raceDetectHookData                       protoimpl.RaceDetectHookData
	XXX_presence                                 [1]uint32
	unknownFields                                protoimpl.UnknownFields
	sizeCache                                    protoimpl.SizeCache
}

func (x *EventsAndFaults_OverSpeedingControlData) Reset() {
	*x = EventsAndFaults_OverSpeedingControlData{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsAndFaults_OverSpeedingControlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsAndFaults_OverSpeedingControlData) ProtoMessage() {}

func (x *EventsAndFaults_OverSpeedingControlData) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EventsAndFaults_OverSpeedingControlData) GetLastControlTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_LastControlTime
	}
	return nil
}

func (x *EventsAndFaults_OverSpeedingControlData) GetFirstOverspeedSinceLastControl() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_FirstOverspeedSinceLastControl
	}
	return nil
}

func (x *EventsAndFaults_OverSpeedingControlData) GetNumberOfOverspeedSinceLastControl() int32 {
	if x != nil {
		return x.xxx_hidden_NumberOfOverspeedSinceLastControl
	}
	return 0
}

func (x *EventsAndFaults_OverSpeedingControlData) SetLastControlTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_LastControlTime = v
}

func (x *EventsAndFaults_OverSpeedingControlData) SetFirstOverspeedSinceLastControl(v *timestamppb.Timestamp) {
	x.xxx_hidden_FirstOverspeedSinceLastControl = v
}

func (x *EventsAndFaults_OverSpeedingControlData) SetNumberOfOverspeedSinceLastControl(v int32) {
	x.xxx_hidden_NumberOfOverspeedSinceLastControl = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *EventsAndFaults_OverSpeedingControlData) HasLastControlTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LastControlTime != nil
}

func (x *EventsAndFaults_OverSpeedingControlData) HasFirstOverspeedSinceLastControl() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FirstOverspeedSinceLastControl != nil
}

func (x *EventsAndFaults_OverSpeedingControlData) HasNumberOfOverspeedSinceLastControl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *EventsAndFaults_OverSpeedingControlData) ClearLastControlTime() {
	x.xxx_hidden_LastControlTime = nil
}

func (x *EventsAndFaults_OverSpeedingControlData) ClearFirstOverspeedSinceLastControl() {
	x.xxx_hidden_FirstOverspeedSinceLastControl = nil
}

func (x *EventsAndFaults_OverSpeedingControlData) ClearNumberOfOverspeedSinceLastControl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_NumberOfOverspeedSinceLastControl = 0
}

type EventsAndFaults_OverSpeedingControlData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Date and time of the last overspeeding control.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	LastControlTime *timestamppb.Timestamp
	// Date and time of the first overspeeding since the last control.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	FirstOverspeedSinceLastControl *timestamppb.Timestamp
	// Number of overspeeding events since the last control.
	// See Data Dictionary, Section 2.116 for `OverspeedNumber`.
	NumberOfOverspeedSinceLastControl *int32
}

func (b0 EventsAndFaults_OverSpeedingControlData_builder) Build() *EventsAndFaults_OverSpeedingControlData {
	m0 := &EventsAndFaults_OverSpeedingControlData{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LastControlTime = b.LastControlTime
	x.xxx_hidden_FirstOverspeedSinceLastControl = b.FirstOverspeedSinceLastControl
	if b.NumberOfOverspeedSinceLastControl != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_NumberOfOverspeedSinceLastControl = *b.NumberOfOverspeedSinceLastControl
	}
	return m0
}

// Represents an overspeeding event record.
//
// Corresponds to the `VuOverSpeedingEventRecord` data type.
// See Data Dictionary, Section 2.215.
type EventsAndFaults_OverSpeedingEventRecord struct {
	state                                protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_EventType                 v1.EventFaultType               `protobuf:"varint,1,opt,name=event_type,json=eventType,enum=wayplatform.connect.tachograph.datadictionary.v1.EventFaultType"`
	xxx_hidden_UnrecognizedEventType     int32                           `protobuf:"varint,2,opt,name=unrecognized_event_type,json=unrecognizedEventType"`
	xxx_hidden_RecordPurpose             v1.EventFaultRecordPurpose      `protobuf:"varint,3,opt,name=record_purpose,json=recordPurpose,enum=wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurpose"`
	xxx_hidden_UnrecognizedRecordPurpose int32                           `protobuf:"varint,4,opt,name=unrecognized_record_purpose,json=unrecognizedRecordPurpose"`
	xxx_hidden_BeginTime                 *timestamppb.Timestamp          `protobuf:"bytes,5,opt,name=begin_time,json=beginTime"`
	xxx_hidden_EndTime                   *timestamppb.Timestamp          `protobuf:"bytes,6,opt,name=end_time,json=endTime"`
	xxx_hidden_MaxSpeedKmh               int32                           `protobuf:"varint,7,opt,name=max_speed_kmh,json=maxSpeedKmh"`
	xxx_hidden_AverageSpeedKmh           int32                           `protobuf:"varint,8,opt,name=average_speed_kmh,json=averageSpeedKmh"`
	xxx_hidden_CardIdentifier            *v1.FullCardNumberAndGeneration `protobuf:"bytes,9,opt,name=card_identifier,json=cardIdentifier"`
	XXX_raceDetectHookData               protoimpl.RaceDetectHookData
	XXX_presence                         [1]uint32
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *EventsAndFaults_OverSpeedingEventRecord) Reset() {
	*x = EventsAndFaults_OverSpeedingEventRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsAndFaults_OverSpeedingEventRecord) ProtoMessage() {}

func (x *EventsAndFaults_OverSpeedingEventRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) GetEventType() v1.EventFaultType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_EventType
		}
	}
	return v1.EventFaultType(0)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) GetUnrecognizedEventType() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedEventType
	}
	return 0
}

func (x *EventsAndFaults_OverSpeedingEventRecord) GetRecordPurpose() v1.EventFaultRecordPurpose {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_RecordPurpose
		}
	}
	return v1.EventFaultRecordPurpose(0)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) GetUnrecognizedRecordPurpose() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedRecordPurpose
	}
	return 0
}

func (x *EventsAndFaults_OverSpeedingEventRecord) GetBeginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_BeginTime
	}
	return nil
}

func (x *EventsAndFaults_OverSpeedingEventRecord) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EndTime
	}
	return nil
}

func (x *EventsAndFaults_OverSpeedingEventRecord) GetMaxSpeedKmh() int32 {
	if x != nil {
		return x.xxx_hidden_MaxSpeedKmh
	}
	return 0
}

func (x *EventsAndFaults_OverSpeedingEventRecord) GetAverageSpeedKmh() int32 {
	if x != nil {
		return x.xxx_hidden_AverageSpeedKmh
	}
	return 0
}

func (x *EventsAndFaults_OverSpeedingEventRecord) GetCardIdentifier() *v1.FullCardNumberAndGeneration {
	if x != nil {
		return x.xxx_hidden_CardIdentifier
	}
	return nil
}

func (x *EventsAndFaults_OverSpeedingEventRecord) SetEventType(v v1.EventFaultType) {
	x.xxx_hidden_EventType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) SetUnrecognizedEventType(v int32) {
	x.xxx_hidden_UnrecognizedEventType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 9)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) SetRecordPurpose(v v1.EventFaultRecordPurpose) {
	x.xxx_hidden_RecordPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) SetUnrecognizedRecordPurpose(v int32) {
	x.xxx_hidden_UnrecognizedRecordPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) SetBeginTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_BeginTime = v
}

func (x *EventsAndFaults_OverSpeedingEventRecord) SetEndTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EndTime = v
}

func (x *EventsAndFaults_OverSpeedingEventRecord) SetMaxSpeedKmh(v int32) {
	x.xxx_hidden_MaxSpeedKmh = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 9)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) SetAverageSpeedKmh(v int32) {
	x.xxx_hidden_AverageSpeedKmh = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 9)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) SetCardIdentifier(v *v1.FullCardNumberAndGeneration) {
	x.xxx_hidden_CardIdentifier = v
}

func (x *EventsAndFaults_OverSpeedingEventRecord) HasEventType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) HasUnrecognizedEventType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) HasRecordPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) HasUnrecognizedRecordPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) HasBeginTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_BeginTime != nil
}

func (x *EventsAndFaults_OverSpeedingEventRecord) HasEndTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EndTime != nil
}

func (x *EventsAndFaults_OverSpeedingEventRecord) HasMaxSpeedKmh() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) HasAverageSpeedKmh() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *EventsAndFaults_OverSpeedingEventRecord) HasCardIdentifier() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardIdentifier != nil
}

func (x *EventsAndFaults_OverSpeedingEventRecord) ClearEventType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_EventType = v1.EventFaultType_EVENT_FAULT_TYPE_UNSPECIFIED
}

func (x *EventsAndFaults_OverSpeedingEventRecord) ClearUnrecognizedEventType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UnrecognizedEventType = 0
}

func (x *EventsAndFaults_OverSpeedingEventRecord) ClearRecordPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_RecordPurpose = v1.EventFaultRecordPurpose_EVENT_FAULT_RECORD_PURPOSE_UNSPECIFIED
}

func (x *EventsAndFaults_OverSpeedingEventRecord) ClearUnrecognizedRecordPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_UnrecognizedRecordPurpose = 0
}

func (x *EventsAndFaults_OverSpeedingEventRecord) ClearBeginTime() {
	x.xxx_hidden_BeginTime = nil
}

func (x *EventsAndFaults_OverSpeedingEventRecord) ClearEndTime() {
	x.xxx_hidden_EndTime = nil
}

func (x *EventsAndFaults_OverSpeedingEventRecord) ClearMaxSpeedKmh() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_MaxSpeedKmh = 0
}

func (x *EventsAndFaults_OverSpeedingEventRecord) ClearAverageSpeedKmh() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_AverageSpeedKmh = 0
}

func (x *EventsAndFaults_OverSpeedingEventRecord) ClearCardIdentifier() {
	x.xxx_hidden_CardIdentifier = nil
}

type EventsAndFaults_OverSpeedingEventRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Type of the event (always 'Over speeding').
	// See Data Dictionary, Section 2.70 for `EventFaultType`.
	EventType             *v1.EventFaultType
	UnrecognizedEventType *int32
	// Purpose for which the event has been recorded.
	// See Data Dictionary, Section 2.69 for `EventFaultRecordPurpose`.
	RecordPurpose             *v1.EventFaultRecordPurpose
	UnrecognizedRecordPurpose *int32
	// Date and time of the beginning of the event.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	BeginTime *timestamppb.Timestamp
	// Date and time of the end of the event.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	EndTime *timestamppb.Timestamp
	// Maximum speed measured during the event.
	// See Data Dictionary, Section 2.158 for `SpeedMax`.
	MaxSpeedKmh *int32
	// Average speed measured during the event.
	// See Data Dictionary, Section 2.157 for `SpeedAverage`.
	AverageSpeedKmh *int32
	// The card number and generation of the driver who caused the event.
	CardIdentifier *v1.FullCardNumberAndGeneration
}

func (b0 EventsAndFaults_OverSpeedingEventRecord_builder) Build() *EventsAndFaults_OverSpeedingEventRecord {
	m0 := &EventsAndFaults_OverSpeedingEventRecord{}
	b, x := &b0, m0
	_, _ = b, x
	if b.EventType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_EventType = *b.EventType
	}
	if b.UnrecognizedEventType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 9)
		x.xxx_hidden_UnrecognizedEventType = *b.UnrecognizedEventType
	}
	if b.RecordPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_RecordPurpose = *b.RecordPurpose
	}
	if b.UnrecognizedRecordPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_UnrecognizedRecordPurpose = *b.UnrecognizedRecordPurpose
	}
	x.xxx_hidden_BeginTime = b.BeginTime
	x.xxx_hidden_EndTime = b.EndTime
	if b.MaxSpeedKmh != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 9)
		x.xxx_hidden_MaxSpeedKmh = *b.MaxSpeedKmh
	}
	if b.AverageSpeedKmh != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 9)
		x.xxx_hidden_AverageSpeedKmh = *b.AverageSpeedKmh
	}
	x.xxx_hidden_CardIdentifier = b.CardIdentifier
	return m0
}

// Represents a time adjustment record.
//
// Corresponds to the `VuTimeAdjustmentRecord` data type.
// See Data Dictionary, Section 2.232.
type EventsAndFaults_TimeAdjustmentRecord struct {
	state                             protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_OldTime                *timestamppb.Timestamp          `protobuf:"bytes,1,opt,name=old_time,json=oldTime"`
	xxx_hidden_NewTime                *timestamppb.Timestamp          `protobuf:"bytes,2,opt,name=new_time,json=newTime"`
	xxx_hidden_WorkshopName           *string                         `protobuf:"bytes,3,opt,name=workshop_name,json=workshopName"`
	xxx_hidden_WorkshopAddress        *string                         `protobuf:"bytes,4,opt,name=workshop_address,json=workshopAddress"`
	xxx_hidden_WorkshopCardIdentifier *v1.FullCardNumberAndGeneration `protobuf:"bytes,5,opt,name=workshop_card_identifier,json=workshopCardIdentifier"`
	XXX_raceDetectHookData            protoimpl.RaceDetectHookData
	XXX_presence                      [1]uint32
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *EventsAndFaults_TimeAdjustmentRecord) Reset() {
	*x = EventsAndFaults_TimeAdjustmentRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsAndFaults_TimeAdjustmentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsAndFaults_TimeAdjustmentRecord) ProtoMessage() {}

func (x *EventsAndFaults_TimeAdjustmentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EventsAndFaults_TimeAdjustmentRecord) GetOldTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_OldTime
	}
	return nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) GetNewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_NewTime
	}
	return nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) GetWorkshopName() string {
	if x != nil {
		if x.xxx_hidden_WorkshopName != nil {
			return *x.xxx_hidden_WorkshopName
		}
		return ""
	}
	return ""
}

func (x *EventsAndFaults_TimeAdjustmentRecord) GetWorkshopAddress() string {
	if x != nil {
		if x.xxx_hidden_WorkshopAddress != nil {
			return *x.xxx_hidden_WorkshopAddress
		}
		return ""
	}
	return ""
}

func (x *EventsAndFaults_TimeAdjustmentRecord) GetWorkshopCardIdentifier() *v1.FullCardNumberAndGeneration {
	if x != nil {
		return x.xxx_hidden_WorkshopCardIdentifier
	}
	return nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) SetOldTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_OldTime = v
}

func (x *EventsAndFaults_TimeAdjustmentRecord) SetNewTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_NewTime = v
}

func (x *EventsAndFaults_TimeAdjustmentRecord) SetWorkshopName(v string) {
	x.xxx_hidden_WorkshopName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *EventsAndFaults_TimeAdjustmentRecord) SetWorkshopAddress(v string) {
	x.xxx_hidden_WorkshopAddress = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *EventsAndFaults_TimeAdjustmentRecord) SetWorkshopCardIdentifier(v *v1.FullCardNumberAndGeneration) {
	x.xxx_hidden_WorkshopCardIdentifier = v
}

func (x *EventsAndFaults_TimeAdjustmentRecord) HasOldTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OldTime != nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) HasNewTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NewTime != nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) HasWorkshopName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *EventsAndFaults_TimeAdjustmentRecord) HasWorkshopAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *EventsAndFaults_TimeAdjustmentRecord) HasWorkshopCardIdentifier() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopCardIdentifier != nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) ClearOldTime() {
	x.xxx_hidden_OldTime = nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) ClearNewTime() {
	x.xxx_hidden_NewTime = nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) ClearWorkshopName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_WorkshopName = nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) ClearWorkshopAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_WorkshopAddress = nil
}

func (x *EventsAndFaults_TimeAdjustmentRecord) ClearWorkshopCardIdentifier() {
	x.xxx_hidden_WorkshopCardIdentifier = nil
}

type EventsAndFaults_TimeAdjustmentRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Time value before adjustment.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	OldTime *timestamppb.Timestamp
	// Time value after adjustment.
	// See Data Dictionary, Section 2.162 for `TimeReal`.
	NewTime *timestamppb.Timestamp
	// Name of the workshop that performed the adjustment.
	// See Data Dictionary, Section 2.99 for `Name`.
	WorkshopName *string
	// Address of the workshop.
	// See Data Dictionary, Section 2.2 for `Address`.
	WorkshopAddress *string
	// The card number and generation of the workshop that performed the adjustment.
	WorkshopCardIdentifier *v1.FullCardNumberAndGeneration
}

func (b0 EventsAndFaults_TimeAdjustmentRecord_builder) Build() *EventsAndFaults_TimeAdjustmentRecord {
	m0 := &EventsAndFaults_TimeAdjustmentRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_OldTime = b.OldTime
	x.xxx_hidden_NewTime = b.NewTime
	if b.WorkshopName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_WorkshopName = b.WorkshopName
	}
	if b.WorkshopAddress != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_WorkshopAddress = b.WorkshopAddress
	}
	x.xxx_hidden_WorkshopCardIdentifier = b.WorkshopCardIdentifier
	return m0
}

var File_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_rawDesc = "" +
	"\n" +
	"<wayplatform/connect/tachograph/vu/v1/events_and_faults.proto\x12$wayplatform.connect.tachograph.vu.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1aQwayplatform/connect/tachograph/datadictionary/v1/event_fault_record_purpose.proto\x1aGwayplatform/connect/tachograph/datadictionary/v1/event_fault_type.proto\x1aVwayplatform/connect/tachograph/datadictionary/v1/full_card_number_and_generation.proto\x1aAwayplatform/connect/tachograph/datadictionary/v1/generation.proto\"\xcc\x19\n" +
	"\x0fEventsAndFaults\x12\\\n" +
	"\n" +
	"generation\x18\x01 \x01(\x0e2<.wayplatform.connect.tachograph.datadictionary.v1.GenerationR\n" +
	"generation\x12Y\n" +
	"\x06faults\x18\x02 \x03(\v2A.wayplatform.connect.tachograph.vu.v1.EventsAndFaults.FaultRecordR\x06faults\x12Y\n" +
	"\x06events\x18\x03 \x03(\v2A.wayplatform.connect.tachograph.vu.v1.EventsAndFaults.EventRecordR\x06events\x12\x80\x01\n" +
	"\x14overspeeding_control\x18\x04 \x01(\v2M.wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingControlDataR\x13overspeedingControl\x12~\n" +
	"\x13overspeeding_events\x18\x05 \x03(\v2M.wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingEventRecordR\x12overspeedingEvents\x12u\n" +
	"\x10time_adjustments\x18\x06 \x03(\v2J.wayplatform.connect.tachograph.vu.v1.EventsAndFaults.TimeAdjustmentRecordR\x0ftimeAdjustments\x12%\n" +
	"\x0esignature_gen1\x18\a \x01(\fR\rsignatureGen1\x12%\n" +
	"\x0esignature_gen2\x18\b \x01(\fR\rsignatureGen2\x1a\xc2\x04\n" +
	"\vFaultRecord\x12_\n" +
	"\n" +
	"fault_type\x18\x01 \x01(\x0e2@.wayplatform.connect.tachograph.datadictionary.v1.EventFaultTypeR\tfaultType\x126\n" +
	"\x17unrecognized_fault_type\x18\x02 \x01(\x05R\x15unrecognizedFaultType\x12p\n" +
	"\x0erecord_purpose\x18\x03 \x01(\x0e2I.wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurposeR\rrecordPurpose\x12>\n" +
	"\x1bunrecognized_record_purpose\x18\x04 \x01(\x05R\x19unrecognizedRecordPurpose\x129\n" +
	"\n" +
	"begin_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tbeginTime\x125\n" +
	"\bend_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12v\n" +
	"\x0fcard_identifier\x18\a \x01(\v2M.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberAndGenerationR\x0ecardIdentifier\x1a\xf6\x04\n" +
	"\vEventRecord\x12_\n" +
	"\n" +
	"event_type\x18\x01 \x01(\x0e2@.wayplatform.connect.tachograph.datadictionary.v1.EventFaultTypeR\teventType\x126\n" +
	"\x17unrecognized_event_type\x18\x02 \x01(\x05R\x15unrecognizedEventType\x12p\n" +
	"\x0erecord_purpose\x18\x03 \x01(\x0e2I.wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurposeR\rrecordPurpose\x12>\n" +
	"\x1bunrecognized_record_purpose\x18\x04 \x01(\x05R\x19unrecognizedRecordPurpose\x129\n" +
	"\n" +
	"begin_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tbeginTime\x125\n" +
	"\bend_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12v\n" +
	"\x0fcard_identifier\x18\a \x01(\v2M.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberAndGenerationR\x0ecardIdentifier\x122\n" +
	"\x15similar_events_number\x18\b \x01(\x05R\x13similarEventsNumber\x1a\x9c\x02\n" +
	"\x17OverSpeedingControlData\x12F\n" +
	"\x11last_control_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x0flastControlTime\x12f\n" +
	"\"first_overspeed_since_last_control\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x1efirstOverspeedSinceLastControl\x12Q\n" +
	"&number_of_overspeed_since_last_control\x18\x03 \x01(\x05R!numberOfOverspeedSinceLastControl\x1a\x9e\x05\n" +
	"\x17OverSpeedingEventRecord\x12_\n" +
	"\n" +
	"event_type\x18\x01 \x01(\x0e2@.wayplatform.connect.tachograph.datadictionary.v1.EventFaultTypeR\teventType\x126\n" +
	"\x17unrecognized_event_type\x18\x02 \x01(\x05R\x15unrecognizedEventType\x12p\n" +
	"\x0erecord_purpose\x18\x03 \x01(\x0e2I.wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurposeR\rrecordPurpose\x12>\n" +
	"\x1bunrecognized_record_purpose\x18\x04 \x01(\x05R\x19unrecognizedRecordPurpose\x129\n" +
	"\n" +
	"begin_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tbeginTime\x125\n" +
	"\bend_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\"\n" +
	"\rmax_speed_kmh\x18\a \x01(\x05R\vmaxSpeedKmh\x12*\n" +
	"\x11average_speed_kmh\x18\b \x01(\x05R\x0faverageSpeedKmh\x12v\n" +
	"\x0fcard_identifier\x18\t \x01(\v2M.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberAndGenerationR\x0ecardIdentifier\x1a\xde\x02\n" +
	"\x14TimeAdjustmentRecord\x125\n" +
	"\bold_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\aoldTime\x125\n" +
	"\bnew_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\anewTime\x12#\n" +
	"\rworkshop_name\x18\x03 \x01(\tR\fworkshopName\x12)\n" +
	"\x10workshop_address\x18\x04 \x01(\tR\x0fworkshopAddress\x12\x87\x01\n" +
	"\x18workshop_card_identifier\x18\x05 \x01(\v2M.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberAndGenerationR\x16workshopCardIdentifierB\xd3\x02\n" +
	"(com.wayplatform.connect.tachograph.vu.v1B\x14EventsAndFaultsProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/vu/v1;vuv1\xa2\x02\x04WCTV\xaa\x02$Wayplatform.Connect.Tachograph.Vu.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Vu\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Vu\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Vu::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_goTypes = []any{
	(*EventsAndFaults)(nil),                         // 0: wayplatform.connect.tachograph.vu.v1.EventsAndFaults
	(*EventsAndFaults_FaultRecord)(nil),             // 1: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.FaultRecord
	(*EventsAndFaults_EventRecord)(nil),             // 2: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.EventRecord
	(*EventsAndFaults_OverSpeedingControlData)(nil), // 3: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingControlData
	(*EventsAndFaults_OverSpeedingEventRecord)(nil), // 4: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingEventRecord
	(*EventsAndFaults_TimeAdjustmentRecord)(nil),    // 5: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.TimeAdjustmentRecord
	(v1.Generation)(0),                              // 6: wayplatform.connect.tachograph.datadictionary.v1.Generation
	(v1.EventFaultType)(0),                          // 7: wayplatform.connect.tachograph.datadictionary.v1.EventFaultType
	(v1.EventFaultRecordPurpose)(0),                 // 8: wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurpose
	(*timestamppb.Timestamp)(nil),                   // 9: google.protobuf.Timestamp
	(*v1.FullCardNumberAndGeneration)(nil),          // 10: wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberAndGeneration
}
var file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_depIdxs = []int32{
	6,  // 0: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.generation:type_name -> wayplatform.connect.tachograph.datadictionary.v1.Generation
	1,  // 1: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.faults:type_name -> wayplatform.connect.tachograph.vu.v1.EventsAndFaults.FaultRecord
	2,  // 2: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.events:type_name -> wayplatform.connect.tachograph.vu.v1.EventsAndFaults.EventRecord
	3,  // 3: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.overspeeding_control:type_name -> wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingControlData
	4,  // 4: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.overspeeding_events:type_name -> wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingEventRecord
	5,  // 5: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.time_adjustments:type_name -> wayplatform.connect.tachograph.vu.v1.EventsAndFaults.TimeAdjustmentRecord
	7,  // 6: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.FaultRecord.fault_type:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EventFaultType
	8,  // 7: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.FaultRecord.record_purpose:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurpose
	9,  // 8: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.FaultRecord.begin_time:type_name -> google.protobuf.Timestamp
	9,  // 9: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.FaultRecord.end_time:type_name -> google.protobuf.Timestamp
	10, // 10: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.FaultRecord.card_identifier:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberAndGeneration
	7,  // 11: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.EventRecord.event_type:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EventFaultType
	8,  // 12: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.EventRecord.record_purpose:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurpose
	9,  // 13: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.EventRecord.begin_time:type_name -> google.protobuf.Timestamp
	9,  // 14: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.EventRecord.end_time:type_name -> google.protobuf.Timestamp
	10, // 15: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.EventRecord.card_identifier:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberAndGeneration
	9,  // 16: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingControlData.last_control_time:type_name -> google.protobuf.Timestamp
	9,  // 17: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingControlData.first_overspeed_since_last_control:type_name -> google.protobuf.Timestamp
	7,  // 18: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingEventRecord.event_type:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EventFaultType
	8,  // 19: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingEventRecord.record_purpose:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EventFaultRecordPurpose
	9,  // 20: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingEventRecord.begin_time:type_name -> google.protobuf.Timestamp
	9,  // 21: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingEventRecord.end_time:type_name -> google.protobuf.Timestamp
	10, // 22: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.OverSpeedingEventRecord.card_identifier:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberAndGeneration
	9,  // 23: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.TimeAdjustmentRecord.old_time:type_name -> google.protobuf.Timestamp
	9,  // 24: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.TimeAdjustmentRecord.new_time:type_name -> google.protobuf.Timestamp
	10, // 25: wayplatform.connect.tachograph.vu.v1.EventsAndFaults.TimeAdjustmentRecord.workshop_card_identifier:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberAndGeneration
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_init() }
func file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_init() {
	if File_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_rawDesc), len(file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto = out.File
	file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_goTypes = nil
	file_wayplatform_connect_tachograph_vu_v1_events_and_faults_proto_depIdxs = nil
}
