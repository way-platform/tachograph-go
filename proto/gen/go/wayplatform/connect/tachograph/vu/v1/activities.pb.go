// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/vu/v1/activities.proto

package vuv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/datadictionary/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the consolidated data structure for an Activities transfer.
//
// This message corresponds to the data defined in the regulation document:
// Appendix 7, Section 2.2.6.3: "Positive Response Transfer Data Activities".
type Activities struct {
	state                             protoimpl.MessageState                 `protogen:"opaque.v1"`
	xxx_hidden_Generation             v1.Generation                          `protobuf:"varint,1,opt,name=generation,enum=wayplatform.connect.tachograph.datadictionary.v1.Generation"`
	xxx_hidden_Version                Version                                `protobuf:"varint,2,opt,name=version,enum=wayplatform.connect.tachograph.vu.v1.Version"`
	xxx_hidden_DateOfDay              *timestamppb.Timestamp                 `protobuf:"bytes,3,opt,name=date_of_day,json=dateOfDay"`
	xxx_hidden_OdometerMidnightKm     int32                                  `protobuf:"varint,4,opt,name=odometer_midnight_km,json=odometerMidnightKm"`
	xxx_hidden_CardIwData             *[]*Activities_CardIWRecord            `protobuf:"bytes,5,rep,name=card_iw_data,json=cardIwData"`
	xxx_hidden_ActivityChanges        *[]*v1.ActivityChangeInfo              `protobuf:"bytes,6,rep,name=activity_changes,json=activityChanges"`
	xxx_hidden_Places                 *[]*Activities_PlaceRecord             `protobuf:"bytes,7,rep,name=places"`
	xxx_hidden_SpecificConditions     *[]*Activities_SpecificConditionRecord `protobuf:"bytes,8,rep,name=specific_conditions,json=specificConditions"`
	xxx_hidden_GnssAccumulatedDriving *[]*Activities_GnssRecord              `protobuf:"bytes,9,rep,name=gnss_accumulated_driving,json=gnssAccumulatedDriving"`
	xxx_hidden_BorderCrossings        *[]*Activities_BorderCrossingRecord    `protobuf:"bytes,10,rep,name=border_crossings,json=borderCrossings"`
	xxx_hidden_LoadUnloadOperations   *[]*Activities_LoadUnloadRecord        `protobuf:"bytes,11,rep,name=load_unload_operations,json=loadUnloadOperations"`
	xxx_hidden_SignatureGen1          []byte                                 `protobuf:"bytes,12,opt,name=signature_gen1,json=signatureGen1"`
	xxx_hidden_SignatureGen2          []byte                                 `protobuf:"bytes,13,opt,name=signature_gen2,json=signatureGen2"`
	XXX_raceDetectHookData            protoimpl.RaceDetectHookData
	XXX_presence                      [1]uint32
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *Activities) Reset() {
	*x = Activities{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activities) ProtoMessage() {}

func (x *Activities) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Activities) GetGeneration() v1.Generation {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Generation
		}
	}
	return v1.Generation(0)
}

func (x *Activities) GetVersion() Version {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Version
		}
	}
	return Version_VERSION_UNSPECIFIED
}

func (x *Activities) GetDateOfDay() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_DateOfDay
	}
	return nil
}

func (x *Activities) GetOdometerMidnightKm() int32 {
	if x != nil {
		return x.xxx_hidden_OdometerMidnightKm
	}
	return 0
}

func (x *Activities) GetCardIwData() []*Activities_CardIWRecord {
	if x != nil {
		if x.xxx_hidden_CardIwData != nil {
			return *x.xxx_hidden_CardIwData
		}
	}
	return nil
}

func (x *Activities) GetActivityChanges() []*v1.ActivityChangeInfo {
	if x != nil {
		if x.xxx_hidden_ActivityChanges != nil {
			return *x.xxx_hidden_ActivityChanges
		}
	}
	return nil
}

func (x *Activities) GetPlaces() []*Activities_PlaceRecord {
	if x != nil {
		if x.xxx_hidden_Places != nil {
			return *x.xxx_hidden_Places
		}
	}
	return nil
}

func (x *Activities) GetSpecificConditions() []*Activities_SpecificConditionRecord {
	if x != nil {
		if x.xxx_hidden_SpecificConditions != nil {
			return *x.xxx_hidden_SpecificConditions
		}
	}
	return nil
}

func (x *Activities) GetGnssAccumulatedDriving() []*Activities_GnssRecord {
	if x != nil {
		if x.xxx_hidden_GnssAccumulatedDriving != nil {
			return *x.xxx_hidden_GnssAccumulatedDriving
		}
	}
	return nil
}

func (x *Activities) GetBorderCrossings() []*Activities_BorderCrossingRecord {
	if x != nil {
		if x.xxx_hidden_BorderCrossings != nil {
			return *x.xxx_hidden_BorderCrossings
		}
	}
	return nil
}

func (x *Activities) GetLoadUnloadOperations() []*Activities_LoadUnloadRecord {
	if x != nil {
		if x.xxx_hidden_LoadUnloadOperations != nil {
			return *x.xxx_hidden_LoadUnloadOperations
		}
	}
	return nil
}

func (x *Activities) GetSignatureGen1() []byte {
	if x != nil {
		return x.xxx_hidden_SignatureGen1
	}
	return nil
}

func (x *Activities) GetSignatureGen2() []byte {
	if x != nil {
		return x.xxx_hidden_SignatureGen2
	}
	return nil
}

func (x *Activities) SetGeneration(v v1.Generation) {
	x.xxx_hidden_Generation = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 13)
}

func (x *Activities) SetVersion(v Version) {
	x.xxx_hidden_Version = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 13)
}

func (x *Activities) SetDateOfDay(v *timestamppb.Timestamp) {
	x.xxx_hidden_DateOfDay = v
}

func (x *Activities) SetOdometerMidnightKm(v int32) {
	x.xxx_hidden_OdometerMidnightKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 13)
}

func (x *Activities) SetCardIwData(v []*Activities_CardIWRecord) {
	x.xxx_hidden_CardIwData = &v
}

func (x *Activities) SetActivityChanges(v []*v1.ActivityChangeInfo) {
	x.xxx_hidden_ActivityChanges = &v
}

func (x *Activities) SetPlaces(v []*Activities_PlaceRecord) {
	x.xxx_hidden_Places = &v
}

func (x *Activities) SetSpecificConditions(v []*Activities_SpecificConditionRecord) {
	x.xxx_hidden_SpecificConditions = &v
}

func (x *Activities) SetGnssAccumulatedDriving(v []*Activities_GnssRecord) {
	x.xxx_hidden_GnssAccumulatedDriving = &v
}

func (x *Activities) SetBorderCrossings(v []*Activities_BorderCrossingRecord) {
	x.xxx_hidden_BorderCrossings = &v
}

func (x *Activities) SetLoadUnloadOperations(v []*Activities_LoadUnloadRecord) {
	x.xxx_hidden_LoadUnloadOperations = &v
}

func (x *Activities) SetSignatureGen1(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_SignatureGen1 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 13)
}

func (x *Activities) SetSignatureGen2(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_SignatureGen2 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 13)
}

func (x *Activities) HasGeneration() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Activities) HasVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Activities) HasDateOfDay() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DateOfDay != nil
}

func (x *Activities) HasOdometerMidnightKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Activities) HasSignatureGen1() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *Activities) HasSignatureGen2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *Activities) ClearGeneration() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Generation = v1.Generation_GENERATION_UNSPECIFIED
}

func (x *Activities) ClearVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Version = Version_VERSION_UNSPECIFIED
}

func (x *Activities) ClearDateOfDay() {
	x.xxx_hidden_DateOfDay = nil
}

func (x *Activities) ClearOdometerMidnightKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_OdometerMidnightKm = 0
}

func (x *Activities) ClearSignatureGen1() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_SignatureGen1 = nil
}

func (x *Activities) ClearSignatureGen2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_SignatureGen2 = nil
}

type Activities_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The generation of the vehicle unit, parsed from the raw transfer data.
	// This is a discriminator field used for parsing.
	Generation *v1.Generation
	// The version of the interface, parsed from the raw transfer data.
	// This is a discriminator field used for parsing.
	Version *Version
	// Date of the downloaded day.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	DateOfDay *timestamppb.Timestamp
	// Odometer value at midnight in kilometers.
	//
	// See Data Dictionary, Section 2.114, `OdometerValueMidnight`.
	// ASN.1 Definition:
	//
	//	OdometerValueMidnight ::= OdometerShort ::= INTEGER(0..999999)
	OdometerMidnightKm *int32
	// Card insertion and withdrawal data.
	// Corresponds to `VuCardIWData` (DD 2.176) or `VuCardIWRecordArray` (DD 2.178).
	CardIwData []*Activities_CardIWRecord
	// Driver activity changes.
	// Corresponds to `VuActivityDailyData` (DD 2.170) or `VuActivityDailyRecordArray` (DD 2.171).
	ActivityChanges []*v1.ActivityChangeInfo
	// Daily work period place entries.
	// Corresponds to `VuPlaceDailyWorkPeriodData` (DD 2.218) or `VuPlaceDailyWorkPeriodRecordArray` (DD 2.220).
	Places []*Activities_PlaceRecord
	// Specific conditions data.
	// Corresponds to `VuSpecificConditionData` (DD 2.227) or `VuSpecificConditionRecordArray` (DD 2.228).
	SpecificConditions []*Activities_SpecificConditionRecord
	// Gen2+ Fields: GNSS positions recorded at 3-hour accumulated driving time intervals.
	// Corresponds to `VuGNSSADRecordArray` (DD 2.204).
	GnssAccumulatedDriving []*Activities_GnssRecord
	// Gen2v2+ Fields: Border crossing records.
	// Corresponds to `VuBorderCrossingRecordArray` (DD 2.203b).
	BorderCrossings []*Activities_BorderCrossingRecord
	// Gen2v2+ Fields: Load/unload operation records.
	// Corresponds to `VuLoadUnloadRecordArray` (DD 2.208b).
	LoadUnloadOperations []*Activities_LoadUnloadRecord
	// Signature for Gen1 data (RSA, 128 bytes).
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	SignatureGen1 []byte
	// Signature for Gen2 data (ECC).
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	SignatureGen2 []byte
}

func (b0 Activities_builder) Build() *Activities {
	m0 := &Activities{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Generation != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 13)
		x.xxx_hidden_Generation = *b.Generation
	}
	if b.Version != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 13)
		x.xxx_hidden_Version = *b.Version
	}
	x.xxx_hidden_DateOfDay = b.DateOfDay
	if b.OdometerMidnightKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 13)
		x.xxx_hidden_OdometerMidnightKm = *b.OdometerMidnightKm
	}
	x.xxx_hidden_CardIwData = &b.CardIwData
	x.xxx_hidden_ActivityChanges = &b.ActivityChanges
	x.xxx_hidden_Places = &b.Places
	x.xxx_hidden_SpecificConditions = &b.SpecificConditions
	x.xxx_hidden_GnssAccumulatedDriving = &b.GnssAccumulatedDriving
	x.xxx_hidden_BorderCrossings = &b.BorderCrossings
	x.xxx_hidden_LoadUnloadOperations = &b.LoadUnloadOperations
	if b.SignatureGen1 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 13)
		x.xxx_hidden_SignatureGen1 = b.SignatureGen1
	}
	if b.SignatureGen2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 13)
		x.xxx_hidden_SignatureGen2 = b.SignatureGen2
	}
	return m0
}

// Represents a card insertion and withdrawal record.
//
// See Data Dictionary, Section 2.177, `VuCardIWRecord`.
//
// ASN.1 Definition (Gen1):
//
//	VuCardIWRecord ::= SEQUENCE {
//	    cardHolderName HolderName,
//	    fullCardNumber FullCardNumber,
//	    cardExpiryDate Datef,
//	    cardInsertionTime TimeReal,
//	    vehicleOdometerValueAtInsertion OdometerShort,
//	    cardSlotNumber CardSlotNumber,
//	    cardWithdrawalTime TimeReal,
//	    vehicleOdometerValueAtWithdrawal OdometerShort,
//	    previousVehicleInfo PreviousVehicleInfo,
//	    manualInputFlag ManualInputFlag
//	}
//
// For Gen2, `fullCardNumber` is replaced by `fullCardNumberAndGeneration`.
type Activities_CardIWRecord struct {
	state                             protoimpl.MessageState                       `protogen:"opaque.v1"`
	xxx_hidden_CardHolderName         *v1.HolderName                               `protobuf:"bytes,1,opt,name=card_holder_name,json=cardHolderName"`
	xxx_hidden_FullCardNumber         *v1.FullCardNumber                           `protobuf:"bytes,2,opt,name=full_card_number,json=fullCardNumber"`
	xxx_hidden_CardExpiryDate         *v1.Date                                     `protobuf:"bytes,3,opt,name=card_expiry_date,json=cardExpiryDate"`
	xxx_hidden_CardInsertionTime      *timestamppb.Timestamp                       `protobuf:"bytes,4,opt,name=card_insertion_time,json=cardInsertionTime"`
	xxx_hidden_OdometerAtInsertionKm  int32                                        `protobuf:"varint,5,opt,name=odometer_at_insertion_km,json=odometerAtInsertionKm"`
	xxx_hidden_CardSlotNumber         v1.CardSlotNumber                            `protobuf:"varint,6,opt,name=card_slot_number,json=cardSlotNumber,enum=wayplatform.connect.tachograph.datadictionary.v1.CardSlotNumber"`
	xxx_hidden_CardWithdrawalTime     *timestamppb.Timestamp                       `protobuf:"bytes,8,opt,name=card_withdrawal_time,json=cardWithdrawalTime"`
	xxx_hidden_OdometerAtWithdrawalKm int32                                        `protobuf:"varint,9,opt,name=odometer_at_withdrawal_km,json=odometerAtWithdrawalKm"`
	xxx_hidden_PreviousVehicleInfo    *Activities_CardIWRecord_PreviousVehicleInfo `protobuf:"bytes,10,opt,name=previous_vehicle_info,json=previousVehicleInfo"`
	xxx_hidden_ManualInputFlag        bool                                         `protobuf:"varint,11,opt,name=manual_input_flag,json=manualInputFlag"`
	XXX_raceDetectHookData            protoimpl.RaceDetectHookData
	XXX_presence                      [1]uint32
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *Activities_CardIWRecord) Reset() {
	*x = Activities_CardIWRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activities_CardIWRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activities_CardIWRecord) ProtoMessage() {}

func (x *Activities_CardIWRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Activities_CardIWRecord) GetCardHolderName() *v1.HolderName {
	if x != nil {
		return x.xxx_hidden_CardHolderName
	}
	return nil
}

func (x *Activities_CardIWRecord) GetFullCardNumber() *v1.FullCardNumber {
	if x != nil {
		return x.xxx_hidden_FullCardNumber
	}
	return nil
}

func (x *Activities_CardIWRecord) GetCardExpiryDate() *v1.Date {
	if x != nil {
		return x.xxx_hidden_CardExpiryDate
	}
	return nil
}

func (x *Activities_CardIWRecord) GetCardInsertionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CardInsertionTime
	}
	return nil
}

func (x *Activities_CardIWRecord) GetOdometerAtInsertionKm() int32 {
	if x != nil {
		return x.xxx_hidden_OdometerAtInsertionKm
	}
	return 0
}

func (x *Activities_CardIWRecord) GetCardSlotNumber() v1.CardSlotNumber {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 5) {
			return x.xxx_hidden_CardSlotNumber
		}
	}
	return v1.CardSlotNumber(0)
}

func (x *Activities_CardIWRecord) GetCardWithdrawalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CardWithdrawalTime
	}
	return nil
}

func (x *Activities_CardIWRecord) GetOdometerAtWithdrawalKm() int32 {
	if x != nil {
		return x.xxx_hidden_OdometerAtWithdrawalKm
	}
	return 0
}

func (x *Activities_CardIWRecord) GetPreviousVehicleInfo() *Activities_CardIWRecord_PreviousVehicleInfo {
	if x != nil {
		return x.xxx_hidden_PreviousVehicleInfo
	}
	return nil
}

func (x *Activities_CardIWRecord) GetManualInputFlag() bool {
	if x != nil {
		return x.xxx_hidden_ManualInputFlag
	}
	return false
}

func (x *Activities_CardIWRecord) SetCardHolderName(v *v1.HolderName) {
	x.xxx_hidden_CardHolderName = v
}

func (x *Activities_CardIWRecord) SetFullCardNumber(v *v1.FullCardNumber) {
	x.xxx_hidden_FullCardNumber = v
}

func (x *Activities_CardIWRecord) SetCardExpiryDate(v *v1.Date) {
	x.xxx_hidden_CardExpiryDate = v
}

func (x *Activities_CardIWRecord) SetCardInsertionTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_CardInsertionTime = v
}

func (x *Activities_CardIWRecord) SetOdometerAtInsertionKm(v int32) {
	x.xxx_hidden_OdometerAtInsertionKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 10)
}

func (x *Activities_CardIWRecord) SetCardSlotNumber(v v1.CardSlotNumber) {
	x.xxx_hidden_CardSlotNumber = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 10)
}

func (x *Activities_CardIWRecord) SetCardWithdrawalTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_CardWithdrawalTime = v
}

func (x *Activities_CardIWRecord) SetOdometerAtWithdrawalKm(v int32) {
	x.xxx_hidden_OdometerAtWithdrawalKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 10)
}

func (x *Activities_CardIWRecord) SetPreviousVehicleInfo(v *Activities_CardIWRecord_PreviousVehicleInfo) {
	x.xxx_hidden_PreviousVehicleInfo = v
}

func (x *Activities_CardIWRecord) SetManualInputFlag(v bool) {
	x.xxx_hidden_ManualInputFlag = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 10)
}

func (x *Activities_CardIWRecord) HasCardHolderName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardHolderName != nil
}

func (x *Activities_CardIWRecord) HasFullCardNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FullCardNumber != nil
}

func (x *Activities_CardIWRecord) HasCardExpiryDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardExpiryDate != nil
}

func (x *Activities_CardIWRecord) HasCardInsertionTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardInsertionTime != nil
}

func (x *Activities_CardIWRecord) HasOdometerAtInsertionKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Activities_CardIWRecord) HasCardSlotNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Activities_CardIWRecord) HasCardWithdrawalTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardWithdrawalTime != nil
}

func (x *Activities_CardIWRecord) HasOdometerAtWithdrawalKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *Activities_CardIWRecord) HasPreviousVehicleInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PreviousVehicleInfo != nil
}

func (x *Activities_CardIWRecord) HasManualInputFlag() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *Activities_CardIWRecord) ClearCardHolderName() {
	x.xxx_hidden_CardHolderName = nil
}

func (x *Activities_CardIWRecord) ClearFullCardNumber() {
	x.xxx_hidden_FullCardNumber = nil
}

func (x *Activities_CardIWRecord) ClearCardExpiryDate() {
	x.xxx_hidden_CardExpiryDate = nil
}

func (x *Activities_CardIWRecord) ClearCardInsertionTime() {
	x.xxx_hidden_CardInsertionTime = nil
}

func (x *Activities_CardIWRecord) ClearOdometerAtInsertionKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_OdometerAtInsertionKm = 0
}

func (x *Activities_CardIWRecord) ClearCardSlotNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_CardSlotNumber = v1.CardSlotNumber_CARD_SLOT_NUMBER_UNSPECIFIED
}

func (x *Activities_CardIWRecord) ClearCardWithdrawalTime() {
	x.xxx_hidden_CardWithdrawalTime = nil
}

func (x *Activities_CardIWRecord) ClearOdometerAtWithdrawalKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_OdometerAtWithdrawalKm = 0
}

func (x *Activities_CardIWRecord) ClearPreviousVehicleInfo() {
	x.xxx_hidden_PreviousVehicleInfo = nil
}

func (x *Activities_CardIWRecord) ClearManualInputFlag() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_ManualInputFlag = false
}

type Activities_CardIWRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the card holder.
	//
	// See Data Dictionary, Section 2.83, `HolderName`.
	CardHolderName *v1.HolderName
	// The full card number of the inserted card.
	//
	// See Data Dictionary, Section 2.73, `FullCardNumber` and 2.74, `FullCardNumberAndGeneration`.
	FullCardNumber *v1.FullCardNumber
	// The expiry date of the card.
	//
	// See Data Dictionary, Section 2.57, `Datef`.
	// ASN.1 Definition:
	//
	//	Datef ::= OCTET STRING(SIZE(4))
	CardExpiryDate *v1.Date
	// The time the card was inserted.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	CardInsertionTime *timestamppb.Timestamp
	// The odometer value at the time of card insertion in kilometers.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	// ASN.1 Definition:
	//
	//	OdometerShort ::= INTEGER(0..999999)
	OdometerAtInsertionKm *int32
	// The slot the card was inserted into.
	//
	// See Data Dictionary, Section 2.33, `CardSlotNumber`.
	CardSlotNumber *v1.CardSlotNumber
	// The time the card was withdrawn.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	CardWithdrawalTime *timestamppb.Timestamp
	// The odometer value at the time of card withdrawal in kilometers.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	// ASN.1 Definition:
	//
	//	OdometerShort ::= INTEGER(0..999999)
	OdometerAtWithdrawalKm *int32
	// Information about the previous vehicle used.
	PreviousVehicleInfo *Activities_CardIWRecord_PreviousVehicleInfo
	// Indicates if manual entries were made.
	//
	// See Data Dictionary, Section 2.93, `ManualInputFlag`.
	ManualInputFlag *bool
}

func (b0 Activities_CardIWRecord_builder) Build() *Activities_CardIWRecord {
	m0 := &Activities_CardIWRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CardHolderName = b.CardHolderName
	x.xxx_hidden_FullCardNumber = b.FullCardNumber
	x.xxx_hidden_CardExpiryDate = b.CardExpiryDate
	x.xxx_hidden_CardInsertionTime = b.CardInsertionTime
	if b.OdometerAtInsertionKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 10)
		x.xxx_hidden_OdometerAtInsertionKm = *b.OdometerAtInsertionKm
	}
	if b.CardSlotNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 10)
		x.xxx_hidden_CardSlotNumber = *b.CardSlotNumber
	}
	x.xxx_hidden_CardWithdrawalTime = b.CardWithdrawalTime
	if b.OdometerAtWithdrawalKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 10)
		x.xxx_hidden_OdometerAtWithdrawalKm = *b.OdometerAtWithdrawalKm
	}
	x.xxx_hidden_PreviousVehicleInfo = b.PreviousVehicleInfo
	if b.ManualInputFlag != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 10)
		x.xxx_hidden_ManualInputFlag = *b.ManualInputFlag
	}
	return m0
}

// Represents a place record for the beginning or end of a daily work period.
//
// See Data Dictionary, Section 2.117, `PlaceRecord` and 2.116a, `PlaceAuthRecord`.
type Activities_PlaceRecord struct {
	state                  protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_EntryTime   *timestamppb.Timestamp      `protobuf:"bytes,1,opt,name=entry_time,json=entryTime"`
	xxx_hidden_EntryType   v1.EntryTypeDailyWorkPeriod `protobuf:"varint,2,opt,name=entry_type,json=entryType,enum=wayplatform.connect.tachograph.datadictionary.v1.EntryTypeDailyWorkPeriod"`
	xxx_hidden_Country     v1.NationNumeric            `protobuf:"varint,4,opt,name=country,enum=wayplatform.connect.tachograph.datadictionary.v1.NationNumeric"`
	xxx_hidden_Region      []byte                      `protobuf:"bytes,6,opt,name=region"`
	xxx_hidden_OdometerKm  int32                       `protobuf:"varint,7,opt,name=odometer_km,json=odometerKm"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Activities_PlaceRecord) Reset() {
	*x = Activities_PlaceRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activities_PlaceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activities_PlaceRecord) ProtoMessage() {}

func (x *Activities_PlaceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Activities_PlaceRecord) GetEntryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EntryTime
	}
	return nil
}

func (x *Activities_PlaceRecord) GetEntryType() v1.EntryTypeDailyWorkPeriod {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_EntryType
		}
	}
	return v1.EntryTypeDailyWorkPeriod(0)
}

func (x *Activities_PlaceRecord) GetCountry() v1.NationNumeric {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_Country
		}
	}
	return v1.NationNumeric(0)
}

func (x *Activities_PlaceRecord) GetRegion() []byte {
	if x != nil {
		return x.xxx_hidden_Region
	}
	return nil
}

func (x *Activities_PlaceRecord) GetOdometerKm() int32 {
	if x != nil {
		return x.xxx_hidden_OdometerKm
	}
	return 0
}

func (x *Activities_PlaceRecord) SetEntryTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EntryTime = v
}

func (x *Activities_PlaceRecord) SetEntryType(v v1.EntryTypeDailyWorkPeriod) {
	x.xxx_hidden_EntryType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *Activities_PlaceRecord) SetCountry(v v1.NationNumeric) {
	x.xxx_hidden_Country = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *Activities_PlaceRecord) SetRegion(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Region = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *Activities_PlaceRecord) SetOdometerKm(v int32) {
	x.xxx_hidden_OdometerKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *Activities_PlaceRecord) HasEntryTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EntryTime != nil
}

func (x *Activities_PlaceRecord) HasEntryType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Activities_PlaceRecord) HasCountry() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Activities_PlaceRecord) HasRegion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Activities_PlaceRecord) HasOdometerKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Activities_PlaceRecord) ClearEntryTime() {
	x.xxx_hidden_EntryTime = nil
}

func (x *Activities_PlaceRecord) ClearEntryType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_EntryType = v1.EntryTypeDailyWorkPeriod_ENTRY_TYPE_DAILY_WORK_PERIOD_UNSPECIFIED
}

func (x *Activities_PlaceRecord) ClearCountry() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Country = v1.NationNumeric_NATION_NUMERIC_UNSPECIFIED
}

func (x *Activities_PlaceRecord) ClearRegion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Region = nil
}

func (x *Activities_PlaceRecord) ClearOdometerKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_OdometerKm = 0
}

type Activities_PlaceRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Time of the entry.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	EntryTime *timestamppb.Timestamp
	// Type of entry (begin or end).
	//
	// See Data Dictionary, Section 2.66, `EntryTypeDailyWorkPeriod`.
	EntryType *v1.EntryTypeDailyWorkPeriod
	// Country code.
	//
	// See Data Dictionary, Section 2.101, `NationNumeric`.
	// ASN.1 Definition:
	//
	//	NationNumeric ::= INTEGER (0..255)
	Country *v1.NationNumeric
	// Region code. This is not a number, but a single-byte identifier.
	//
	// The name `RegionNumeric` is a misnomer; it distinguishes this type from
	// `RegionAlpha`. The value is an opaque byte whose meaning is defined by
	// an external enumeration.
	//
	// For Gen2, the list of codes for each country is maintained by the EU's
	// Joint Research Centre (JRC) and can be looked up on their website:
	// https://dtlab.jrc.ec.europa.eu/
	//
	// See Data Dictionary, Section 2.122, `RegionNumeric`.
	// ASN.1 Definition:
	//
	//	RegionNumeric ::= OCTET STRING (SIZE (1))
	Region []byte
	// Odometer value at the time of entry in kilometers.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	// ASN.1 Definition:
	//
	//	OdometerShort ::= INTEGER(0..999999)
	OdometerKm *int32
}

func (b0 Activities_PlaceRecord_builder) Build() *Activities_PlaceRecord {
	m0 := &Activities_PlaceRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_EntryTime = b.EntryTime
	if b.EntryType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_EntryType = *b.EntryType
	}
	if b.Country != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Country = *b.Country
	}
	if b.Region != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Region = b.Region
	}
	if b.OdometerKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_OdometerKm = *b.OdometerKm
	}
	return m0
}

// Represents a GNSS position record.
//
// See Data Dictionary, Section 2.80, `GNSSPlaceRecord` and 2.79c, `GNSSPlaceAuthRecord`.
type Activities_GnssRecord struct {
	state                           protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_Timestamp            *timestamppb.Timestamp          `protobuf:"bytes,1,opt,name=timestamp"`
	xxx_hidden_GnssAccuracy         int32                           `protobuf:"varint,2,opt,name=gnss_accuracy,json=gnssAccuracy"`
	xxx_hidden_GeoCoordinates       *v1.GeoCoordinates              `protobuf:"bytes,3,opt,name=geo_coordinates,json=geoCoordinates"`
	xxx_hidden_AuthenticationStatus v1.PositionAuthenticationStatus `protobuf:"varint,5,opt,name=authentication_status,json=authenticationStatus,enum=wayplatform.connect.tachograph.datadictionary.v1.PositionAuthenticationStatus"`
	XXX_raceDetectHookData          protoimpl.RaceDetectHookData
	XXX_presence                    [1]uint32
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *Activities_GnssRecord) Reset() {
	*x = Activities_GnssRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activities_GnssRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activities_GnssRecord) ProtoMessage() {}

func (x *Activities_GnssRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Activities_GnssRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *Activities_GnssRecord) GetGnssAccuracy() int32 {
	if x != nil {
		return x.xxx_hidden_GnssAccuracy
	}
	return 0
}

func (x *Activities_GnssRecord) GetGeoCoordinates() *v1.GeoCoordinates {
	if x != nil {
		return x.xxx_hidden_GeoCoordinates
	}
	return nil
}

func (x *Activities_GnssRecord) GetAuthenticationStatus() v1.PositionAuthenticationStatus {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_AuthenticationStatus
		}
	}
	return v1.PositionAuthenticationStatus(0)
}

func (x *Activities_GnssRecord) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *Activities_GnssRecord) SetGnssAccuracy(v int32) {
	x.xxx_hidden_GnssAccuracy = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *Activities_GnssRecord) SetGeoCoordinates(v *v1.GeoCoordinates) {
	x.xxx_hidden_GeoCoordinates = v
}

func (x *Activities_GnssRecord) SetAuthenticationStatus(v v1.PositionAuthenticationStatus) {
	x.xxx_hidden_AuthenticationStatus = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *Activities_GnssRecord) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *Activities_GnssRecord) HasGnssAccuracy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Activities_GnssRecord) HasGeoCoordinates() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GeoCoordinates != nil
}

func (x *Activities_GnssRecord) HasAuthenticationStatus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Activities_GnssRecord) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *Activities_GnssRecord) ClearGnssAccuracy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_GnssAccuracy = 0
}

func (x *Activities_GnssRecord) ClearGeoCoordinates() {
	x.xxx_hidden_GeoCoordinates = nil
}

func (x *Activities_GnssRecord) ClearAuthenticationStatus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_AuthenticationStatus = v1.PositionAuthenticationStatus_POSITION_AUTHENTICATION_STATUS_UNSPECIFIED
}

type Activities_GnssRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Timestamp of the position fix.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	Timestamp *timestamppb.Timestamp
	// Accuracy of the GNSS fix.
	//
	// See Data Dictionary, Section 2.77, `GNSSAccuracy`.
	// ASN.1 Definition:
	//
	//	GNSSAccuracy ::= INTEGER (1..100)
	GnssAccuracy *int32
	// Geographic coordinates of the position.
	//
	// See Data Dictionary, Section 2.76, `GeoCoordinates`.
	//
	// ASN.1 Definition:
	//
	//	GeoCoordinates ::= SEQUENCE {
	//	    latitude INTEGER(-90*3600*1000..90*3600*1000),
	//	    longitude INTEGER(-180*3600*1000+1..180*3600*1000)
	//	}
	GeoCoordinates *v1.GeoCoordinates
	// For Gen2v2+, indicates the authentication status of the position.
	//
	// See Data Dictionary, Section 2.117a, `PositionAuthenticationStatus`.
	AuthenticationStatus *v1.PositionAuthenticationStatus
}

func (b0 Activities_GnssRecord_builder) Build() *Activities_GnssRecord {
	m0 := &Activities_GnssRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.GnssAccuracy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_GnssAccuracy = *b.GnssAccuracy
	}
	x.xxx_hidden_GeoCoordinates = b.GeoCoordinates
	if b.AuthenticationStatus != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_AuthenticationStatus = *b.AuthenticationStatus
	}
	return m0
}

// Represents a specific condition record (e.g., Ferry/Train crossing).
//
// See Data Dictionary, Section 2.152, `SpecificConditionRecord`.
//
// ASN.1 Definition:
//
//	SpecificConditionRecord ::= SEQUENCE {
//	    entryTime TimeReal,
//	    specificConditionType SpecificConditionType
//	}
type Activities_SpecificConditionRecord struct {
	state                            protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_EntryTime             *timestamppb.Timestamp   `protobuf:"bytes,1,opt,name=entry_time,json=entryTime"`
	xxx_hidden_SpecificConditionType v1.SpecificConditionType `protobuf:"varint,2,opt,name=specific_condition_type,json=specificConditionType,enum=wayplatform.connect.tachograph.datadictionary.v1.SpecificConditionType"`
	XXX_raceDetectHookData           protoimpl.RaceDetectHookData
	XXX_presence                     [1]uint32
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *Activities_SpecificConditionRecord) Reset() {
	*x = Activities_SpecificConditionRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activities_SpecificConditionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activities_SpecificConditionRecord) ProtoMessage() {}

func (x *Activities_SpecificConditionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Activities_SpecificConditionRecord) GetEntryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EntryTime
	}
	return nil
}

func (x *Activities_SpecificConditionRecord) GetSpecificConditionType() v1.SpecificConditionType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_SpecificConditionType
		}
	}
	return v1.SpecificConditionType(0)
}

func (x *Activities_SpecificConditionRecord) SetEntryTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EntryTime = v
}

func (x *Activities_SpecificConditionRecord) SetSpecificConditionType(v v1.SpecificConditionType) {
	x.xxx_hidden_SpecificConditionType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Activities_SpecificConditionRecord) HasEntryTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EntryTime != nil
}

func (x *Activities_SpecificConditionRecord) HasSpecificConditionType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Activities_SpecificConditionRecord) ClearEntryTime() {
	x.xxx_hidden_EntryTime = nil
}

func (x *Activities_SpecificConditionRecord) ClearSpecificConditionType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_SpecificConditionType = v1.SpecificConditionType_SPECIFIC_CONDITION_TYPE_UNSPECIFIED
}

type Activities_SpecificConditionRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Time of the entry.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	EntryTime *timestamppb.Timestamp
	// Type of specific condition.
	//
	// See Data Dictionary, Section 2.154, `SpecificConditionType`.
	SpecificConditionType *v1.SpecificConditionType
}

func (b0 Activities_SpecificConditionRecord_builder) Build() *Activities_SpecificConditionRecord {
	m0 := &Activities_SpecificConditionRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_EntryTime = b.EntryTime
	if b.SpecificConditionType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_SpecificConditionType = *b.SpecificConditionType
	}
	return m0
}

// Represents a border crossing record (Gen2v2+).
//
// See Data Dictionary, Section 2.203a, `VuBorderCrossingRecord`.
//
// ASN.1 Definition:
//
//	VuBorderCrossingRecord ::= SEQUENCE {
//	    cardNumberAndGenDriverSlot FullCardNumberAndGeneration,
//	    cardNumberAndGenCodriverSlot FullCardNumberAndGeneration,
//	    countryLeft NationNumeric,
//	    countryEntered NationNumeric,
//	    gnssPlaceAuthRecord GNSSPlaceAuthRecord,
//	    vehicleOdometerValue OdometerShort
//	}
type Activities_BorderCrossingRecord struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FullCardNumber *v1.FullCardNumber     `protobuf:"bytes,1,opt,name=full_card_number,json=fullCardNumber"`
	xxx_hidden_CardGeneration v1.Generation          `protobuf:"varint,2,opt,name=card_generation,json=cardGeneration,enum=wayplatform.connect.tachograph.datadictionary.v1.Generation"`
	xxx_hidden_CountryLeft    v1.NationNumeric       `protobuf:"varint,3,opt,name=country_left,json=countryLeft,enum=wayplatform.connect.tachograph.datadictionary.v1.NationNumeric"`
	xxx_hidden_CountryEntered v1.NationNumeric       `protobuf:"varint,5,opt,name=country_entered,json=countryEntered,enum=wayplatform.connect.tachograph.datadictionary.v1.NationNumeric"`
	xxx_hidden_PlaceRecord    *Activities_GnssRecord `protobuf:"bytes,7,opt,name=place_record,json=placeRecord"`
	xxx_hidden_OdometerKm     int32                  `protobuf:"varint,8,opt,name=odometer_km,json=odometerKm"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Activities_BorderCrossingRecord) Reset() {
	*x = Activities_BorderCrossingRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activities_BorderCrossingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activities_BorderCrossingRecord) ProtoMessage() {}

func (x *Activities_BorderCrossingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Activities_BorderCrossingRecord) GetFullCardNumber() *v1.FullCardNumber {
	if x != nil {
		return x.xxx_hidden_FullCardNumber
	}
	return nil
}

func (x *Activities_BorderCrossingRecord) GetCardGeneration() v1.Generation {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_CardGeneration
		}
	}
	return v1.Generation(0)
}

func (x *Activities_BorderCrossingRecord) GetCountryLeft() v1.NationNumeric {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_CountryLeft
		}
	}
	return v1.NationNumeric(0)
}

func (x *Activities_BorderCrossingRecord) GetCountryEntered() v1.NationNumeric {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_CountryEntered
		}
	}
	return v1.NationNumeric(0)
}

func (x *Activities_BorderCrossingRecord) GetPlaceRecord() *Activities_GnssRecord {
	if x != nil {
		return x.xxx_hidden_PlaceRecord
	}
	return nil
}

func (x *Activities_BorderCrossingRecord) GetOdometerKm() int32 {
	if x != nil {
		return x.xxx_hidden_OdometerKm
	}
	return 0
}

func (x *Activities_BorderCrossingRecord) SetFullCardNumber(v *v1.FullCardNumber) {
	x.xxx_hidden_FullCardNumber = v
}

func (x *Activities_BorderCrossingRecord) SetCardGeneration(v v1.Generation) {
	x.xxx_hidden_CardGeneration = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *Activities_BorderCrossingRecord) SetCountryLeft(v v1.NationNumeric) {
	x.xxx_hidden_CountryLeft = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *Activities_BorderCrossingRecord) SetCountryEntered(v v1.NationNumeric) {
	x.xxx_hidden_CountryEntered = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *Activities_BorderCrossingRecord) SetPlaceRecord(v *Activities_GnssRecord) {
	x.xxx_hidden_PlaceRecord = v
}

func (x *Activities_BorderCrossingRecord) SetOdometerKm(v int32) {
	x.xxx_hidden_OdometerKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *Activities_BorderCrossingRecord) HasFullCardNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FullCardNumber != nil
}

func (x *Activities_BorderCrossingRecord) HasCardGeneration() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Activities_BorderCrossingRecord) HasCountryLeft() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Activities_BorderCrossingRecord) HasCountryEntered() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Activities_BorderCrossingRecord) HasPlaceRecord() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PlaceRecord != nil
}

func (x *Activities_BorderCrossingRecord) HasOdometerKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Activities_BorderCrossingRecord) ClearFullCardNumber() {
	x.xxx_hidden_FullCardNumber = nil
}

func (x *Activities_BorderCrossingRecord) ClearCardGeneration() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardGeneration = v1.Generation_GENERATION_UNSPECIFIED
}

func (x *Activities_BorderCrossingRecord) ClearCountryLeft() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_CountryLeft = v1.NationNumeric_NATION_NUMERIC_UNSPECIFIED
}

func (x *Activities_BorderCrossingRecord) ClearCountryEntered() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_CountryEntered = v1.NationNumeric_NATION_NUMERIC_UNSPECIFIED
}

func (x *Activities_BorderCrossingRecord) ClearPlaceRecord() {
	x.xxx_hidden_PlaceRecord = nil
}

func (x *Activities_BorderCrossingRecord) ClearOdometerKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_OdometerKm = 0
}

type Activities_BorderCrossingRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Card number of the driver.
	//
	// See Data Dictionary, Section 2.74, `FullCardNumberAndGeneration`.
	FullCardNumber *v1.FullCardNumber
	// Generation of the driver's card.
	//
	// See Data Dictionary, Section 2.75, `Generation`.
	CardGeneration *v1.Generation
	// Country the vehicle is leaving.
	//
	// See Data Dictionary, Section 2.101, `NationNumeric`.
	CountryLeft *v1.NationNumeric
	// Country the vehicle is entering.
	//
	// See Data Dictionary, Section 2.101, `NationNumeric`.
	CountryEntered *v1.NationNumeric
	// Position of the vehicle at the time of crossing.
	//
	// See Data Dictionary, Section 2.79c, `GNSSPlaceAuthRecord`.
	PlaceRecord *Activities_GnssRecord
	// Odometer value at the time of crossing in kilometers.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	// ASN.1 Definition:
	//
	//	OdometerShort ::= INTEGER(0..999999)
	OdometerKm *int32
}

func (b0 Activities_BorderCrossingRecord_builder) Build() *Activities_BorderCrossingRecord {
	m0 := &Activities_BorderCrossingRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FullCardNumber = b.FullCardNumber
	if b.CardGeneration != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_CardGeneration = *b.CardGeneration
	}
	if b.CountryLeft != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_CountryLeft = *b.CountryLeft
	}
	if b.CountryEntered != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_CountryEntered = *b.CountryEntered
	}
	x.xxx_hidden_PlaceRecord = b.PlaceRecord
	if b.OdometerKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_OdometerKm = *b.OdometerKm
	}
	return m0
}

// Represents a load/unload operation record (Gen2v2+).
//
// See Data Dictionary, Section 2.208a, `VuLoadUnloadRecord`.
//
// ASN.1 Definition:
//
//	VuLoadUnloadRecord ::= SEQUENCE {
//	    timeStamp TimeReal,
//	    operationType OperationType,
//	    cardNumberAndGenDriverSlot FullCardNumberAndGeneration,
//	    cardNumberAndGenCodriverSlot FullCardNumberAndGeneration,
//	    gnssPlaceAuthRecord GNSSPlaceAuthRecord,
//	    vehicleOdometerValue OdometerShort
//	}
type Activities_LoadUnloadRecord struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FullCardNumber *v1.FullCardNumber     `protobuf:"bytes,1,opt,name=full_card_number,json=fullCardNumber"`
	xxx_hidden_CardGeneration v1.Generation          `protobuf:"varint,2,opt,name=card_generation,json=cardGeneration,enum=wayplatform.connect.tachograph.datadictionary.v1.Generation"`
	xxx_hidden_OperationType  v1.OperationType       `protobuf:"varint,3,opt,name=operation_type,json=operationType,enum=wayplatform.connect.tachograph.datadictionary.v1.OperationType"`
	xxx_hidden_PlaceRecord    *Activities_GnssRecord `protobuf:"bytes,4,opt,name=place_record,json=placeRecord"`
	xxx_hidden_OdometerKm     int32                  `protobuf:"varint,5,opt,name=odometer_km,json=odometerKm"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Activities_LoadUnloadRecord) Reset() {
	*x = Activities_LoadUnloadRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activities_LoadUnloadRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activities_LoadUnloadRecord) ProtoMessage() {}

func (x *Activities_LoadUnloadRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Activities_LoadUnloadRecord) GetFullCardNumber() *v1.FullCardNumber {
	if x != nil {
		return x.xxx_hidden_FullCardNumber
	}
	return nil
}

func (x *Activities_LoadUnloadRecord) GetCardGeneration() v1.Generation {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_CardGeneration
		}
	}
	return v1.Generation(0)
}

func (x *Activities_LoadUnloadRecord) GetOperationType() v1.OperationType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_OperationType
		}
	}
	return v1.OperationType(0)
}

func (x *Activities_LoadUnloadRecord) GetPlaceRecord() *Activities_GnssRecord {
	if x != nil {
		return x.xxx_hidden_PlaceRecord
	}
	return nil
}

func (x *Activities_LoadUnloadRecord) GetOdometerKm() int32 {
	if x != nil {
		return x.xxx_hidden_OdometerKm
	}
	return 0
}

func (x *Activities_LoadUnloadRecord) SetFullCardNumber(v *v1.FullCardNumber) {
	x.xxx_hidden_FullCardNumber = v
}

func (x *Activities_LoadUnloadRecord) SetCardGeneration(v v1.Generation) {
	x.xxx_hidden_CardGeneration = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *Activities_LoadUnloadRecord) SetOperationType(v v1.OperationType) {
	x.xxx_hidden_OperationType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *Activities_LoadUnloadRecord) SetPlaceRecord(v *Activities_GnssRecord) {
	x.xxx_hidden_PlaceRecord = v
}

func (x *Activities_LoadUnloadRecord) SetOdometerKm(v int32) {
	x.xxx_hidden_OdometerKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *Activities_LoadUnloadRecord) HasFullCardNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FullCardNumber != nil
}

func (x *Activities_LoadUnloadRecord) HasCardGeneration() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Activities_LoadUnloadRecord) HasOperationType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Activities_LoadUnloadRecord) HasPlaceRecord() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PlaceRecord != nil
}

func (x *Activities_LoadUnloadRecord) HasOdometerKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Activities_LoadUnloadRecord) ClearFullCardNumber() {
	x.xxx_hidden_FullCardNumber = nil
}

func (x *Activities_LoadUnloadRecord) ClearCardGeneration() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardGeneration = v1.Generation_GENERATION_UNSPECIFIED
}

func (x *Activities_LoadUnloadRecord) ClearOperationType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_OperationType = v1.OperationType_OPERATION_TYPE_UNSPECIFIED
}

func (x *Activities_LoadUnloadRecord) ClearPlaceRecord() {
	x.xxx_hidden_PlaceRecord = nil
}

func (x *Activities_LoadUnloadRecord) ClearOdometerKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_OdometerKm = 0
}

type Activities_LoadUnloadRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Card number of the driver.
	//
	// See Data Dictionary, Section 2.74, `FullCardNumberAndGeneration`.
	FullCardNumber *v1.FullCardNumber
	// Generation of the driver's card.
	//
	// See Data Dictionary, Section 2.75, `Generation`.
	CardGeneration *v1.Generation
	// Type of operation (load, unload, or both).
	OperationType *v1.OperationType
	// Position of the vehicle at the time of the operation.
	//
	// See Data Dictionary, Section 2.79c, `GNSSPlaceAuthRecord`.
	PlaceRecord *Activities_GnssRecord
	// Odometer value at the time of the operation in kilometers.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	// ASN.1 Definition:
	//
	//	OdometerShort ::= INTEGER(0..999999)
	OdometerKm *int32
}

func (b0 Activities_LoadUnloadRecord_builder) Build() *Activities_LoadUnloadRecord {
	m0 := &Activities_LoadUnloadRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FullCardNumber = b.FullCardNumber
	if b.CardGeneration != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_CardGeneration = *b.CardGeneration
	}
	if b.OperationType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_OperationType = *b.OperationType
	}
	x.xxx_hidden_PlaceRecord = b.PlaceRecord
	if b.OdometerKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_OdometerKm = *b.OdometerKm
	}
	return m0
}

// Represents information about the previous vehicle used by the driver.
//
// See Data Dictionary, Section 2.118, `PreviousVehicleInfo`.
//
// ASN.1 Definition (Gen1):
//
//	PreviousVehicleInfo ::= SEQUENCE {
//	    vehicleRegistrationIdentification VehicleRegistrationIdentification,
//	    cardWithdrawalTime TimeReal
//	}
//
// For Gen2, `vuGeneration Generation` is added.
type Activities_CardIWRecord_PreviousVehicleInfo struct {
	state                          protoimpl.MessageState                `protogen:"opaque.v1"`
	xxx_hidden_VehicleRegistration *v1.VehicleRegistrationIdentification `protobuf:"bytes,1,opt,name=vehicle_registration,json=vehicleRegistration"`
	xxx_hidden_CardWithdrawalTime  *timestamppb.Timestamp                `protobuf:"bytes,2,opt,name=card_withdrawal_time,json=cardWithdrawalTime"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) Reset() {
	*x = Activities_CardIWRecord_PreviousVehicleInfo{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activities_CardIWRecord_PreviousVehicleInfo) ProtoMessage() {}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) GetVehicleRegistration() *v1.VehicleRegistrationIdentification {
	if x != nil {
		return x.xxx_hidden_VehicleRegistration
	}
	return nil
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) GetCardWithdrawalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CardWithdrawalTime
	}
	return nil
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) SetVehicleRegistration(v *v1.VehicleRegistrationIdentification) {
	x.xxx_hidden_VehicleRegistration = v
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) SetCardWithdrawalTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_CardWithdrawalTime = v
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) HasVehicleRegistration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VehicleRegistration != nil
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) HasCardWithdrawalTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardWithdrawalTime != nil
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) ClearVehicleRegistration() {
	x.xxx_hidden_VehicleRegistration = nil
}

func (x *Activities_CardIWRecord_PreviousVehicleInfo) ClearCardWithdrawalTime() {
	x.xxx_hidden_CardWithdrawalTime = nil
}

type Activities_CardIWRecord_PreviousVehicleInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The registration of the previous vehicle.
	//
	// See Data Dictionary, Section 2.166, `VehicleRegistrationIdentification`.
	VehicleRegistration *v1.VehicleRegistrationIdentification
	// The time the card was withdrawn from the previous vehicle.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	// ASN.1 Definition:
	//
	//	TimeReal ::= INTEGER (0..2^32-1)
	CardWithdrawalTime *timestamppb.Timestamp
}

func (b0 Activities_CardIWRecord_PreviousVehicleInfo_builder) Build() *Activities_CardIWRecord_PreviousVehicleInfo {
	m0 := &Activities_CardIWRecord_PreviousVehicleInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_VehicleRegistration = b.VehicleRegistration
	x.xxx_hidden_CardWithdrawalTime = b.CardWithdrawalTime
	return m0
}

var File_wayplatform_connect_tachograph_vu_v1_activities_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_vu_v1_activities_proto_rawDesc = "" +
	"\n" +
	"5wayplatform/connect/tachograph/vu/v1/activities.proto\x12$wayplatform.connect.tachograph.vu.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1aKwayplatform/connect/tachograph/datadictionary/v1/activity_change_info.proto\x1aGwayplatform/connect/tachograph/datadictionary/v1/card_slot_number.proto\x1a;wayplatform/connect/tachograph/datadictionary/v1/date.proto\x1aSwayplatform/connect/tachograph/datadictionary/v1/entry_type_daily_work_period.proto\x1aGwayplatform/connect/tachograph/datadictionary/v1/full_card_number.proto\x1aAwayplatform/connect/tachograph/datadictionary/v1/generation.proto\x1aFwayplatform/connect/tachograph/datadictionary/v1/geo_coordinates.proto\x1aBwayplatform/connect/tachograph/datadictionary/v1/holder_name.proto\x1aEwayplatform/connect/tachograph/datadictionary/v1/nation_numeric.proto\x1aEwayplatform/connect/tachograph/datadictionary/v1/operation_type.proto\x1aUwayplatform/connect/tachograph/datadictionary/v1/position_authentication_status.proto\x1aNwayplatform/connect/tachograph/datadictionary/v1/specific_condition_type.proto\x1aZwayplatform/connect/tachograph/datadictionary/v1/vehicle_registration_identification.proto\x1a5wayplatform/connect/tachograph/vu/v1/versioning.proto\"\xe5 \n" +
	"\n" +
	"Activities\x12\\\n" +
	"\n" +
	"generation\x18\x01 \x01(\x0e2<.wayplatform.connect.tachograph.datadictionary.v1.GenerationR\n" +
	"generation\x12G\n" +
	"\aversion\x18\x02 \x01(\x0e2-.wayplatform.connect.tachograph.vu.v1.VersionR\aversion\x12:\n" +
	"\vdate_of_day\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tdateOfDay\x120\n" +
	"\x14odometer_midnight_km\x18\x04 \x01(\x05R\x12odometerMidnightKm\x12_\n" +
	"\fcard_iw_data\x18\x05 \x03(\v2=.wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecordR\n" +
	"cardIwData\x12o\n" +
	"\x10activity_changes\x18\x06 \x03(\v2D.wayplatform.connect.tachograph.datadictionary.v1.ActivityChangeInfoR\x0factivityChanges\x12T\n" +
	"\x06places\x18\a \x03(\v2<.wayplatform.connect.tachograph.vu.v1.Activities.PlaceRecordR\x06places\x12y\n" +
	"\x13specific_conditions\x18\b \x03(\v2H.wayplatform.connect.tachograph.vu.v1.Activities.SpecificConditionRecordR\x12specificConditions\x12u\n" +
	"\x18gnss_accumulated_driving\x18\t \x03(\v2;.wayplatform.connect.tachograph.vu.v1.Activities.GnssRecordR\x16gnssAccumulatedDriving\x12p\n" +
	"\x10border_crossings\x18\n" +
	" \x03(\v2E.wayplatform.connect.tachograph.vu.v1.Activities.BorderCrossingRecordR\x0fborderCrossings\x12w\n" +
	"\x16load_unload_operations\x18\v \x03(\v2A.wayplatform.connect.tachograph.vu.v1.Activities.LoadUnloadRecordR\x14loadUnloadOperations\x12%\n" +
	"\x0esignature_gen1\x18\f \x01(\fR\rsignatureGen1\x12%\n" +
	"\x0esignature_gen2\x18\r \x01(\fR\rsignatureGen2\x1a\xe1\b\n" +
	"\fCardIWRecord\x12f\n" +
	"\x10card_holder_name\x18\x01 \x01(\v2<.wayplatform.connect.tachograph.datadictionary.v1.HolderNameR\x0ecardHolderName\x12j\n" +
	"\x10full_card_number\x18\x02 \x01(\v2@.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberR\x0efullCardNumber\x12`\n" +
	"\x10card_expiry_date\x18\x03 \x01(\v26.wayplatform.connect.tachograph.datadictionary.v1.DateR\x0ecardExpiryDate\x12J\n" +
	"\x13card_insertion_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x11cardInsertionTime\x127\n" +
	"\x18odometer_at_insertion_km\x18\x05 \x01(\x05R\x15odometerAtInsertionKm\x12j\n" +
	"\x10card_slot_number\x18\x06 \x01(\x0e2@.wayplatform.connect.tachograph.datadictionary.v1.CardSlotNumberR\x0ecardSlotNumber\x12L\n" +
	"\x14card_withdrawal_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x12cardWithdrawalTime\x129\n" +
	"\x19odometer_at_withdrawal_km\x18\t \x01(\x05R\x16odometerAtWithdrawalKm\x12\x85\x01\n" +
	"\x15previous_vehicle_info\x18\n" +
	" \x01(\v2Q.wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.PreviousVehicleInfoR\x13previousVehicleInfo\x12*\n" +
	"\x11manual_input_flag\x18\v \x01(\bR\x0fmanualInputFlag\x1a\xec\x01\n" +
	"\x13PreviousVehicleInfo\x12\x86\x01\n" +
	"\x14vehicle_registration\x18\x01 \x01(\v2S.wayplatform.connect.tachograph.datadictionary.v1.VehicleRegistrationIdentificationR\x13vehicleRegistration\x12L\n" +
	"\x14card_withdrawal_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x12cardWithdrawalTime\x1a\xc7\x02\n" +
	"\vPlaceRecord\x129\n" +
	"\n" +
	"entry_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tentryTime\x12i\n" +
	"\n" +
	"entry_type\x18\x02 \x01(\x0e2J.wayplatform.connect.tachograph.datadictionary.v1.EntryTypeDailyWorkPeriodR\tentryType\x12Y\n" +
	"\acountry\x18\x04 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.NationNumericR\acountry\x12\x16\n" +
	"\x06region\x18\x06 \x01(\fR\x06region\x12\x1f\n" +
	"\vodometer_km\x18\a \x01(\x05R\n" +
	"odometerKm\x1a\xdc\x02\n" +
	"\n" +
	"GnssRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12#\n" +
	"\rgnss_accuracy\x18\x02 \x01(\x05R\fgnssAccuracy\x12i\n" +
	"\x0fgeo_coordinates\x18\x03 \x01(\v2@.wayplatform.connect.tachograph.datadictionary.v1.GeoCoordinatesR\x0egeoCoordinates\x12\x83\x01\n" +
	"\x15authentication_status\x18\x05 \x01(\x0e2N.wayplatform.connect.tachograph.datadictionary.v1.PositionAuthenticationStatusR\x14authenticationStatus\x1a\xd5\x01\n" +
	"\x17SpecificConditionRecord\x129\n" +
	"\n" +
	"entry_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tentryTime\x12\x7f\n" +
	"\x17specific_condition_type\x18\x02 \x01(\x0e2G.wayplatform.connect.tachograph.datadictionary.v1.SpecificConditionTypeR\x15specificConditionType\x1a\xb8\x04\n" +
	"\x14BorderCrossingRecord\x12j\n" +
	"\x10full_card_number\x18\x01 \x01(\v2@.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberR\x0efullCardNumber\x12e\n" +
	"\x0fcard_generation\x18\x02 \x01(\x0e2<.wayplatform.connect.tachograph.datadictionary.v1.GenerationR\x0ecardGeneration\x12b\n" +
	"\fcountry_left\x18\x03 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.NationNumericR\vcountryLeft\x12h\n" +
	"\x0fcountry_entered\x18\x05 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.NationNumericR\x0ecountryEntered\x12^\n" +
	"\fplace_record\x18\a \x01(\v2;.wayplatform.connect.tachograph.vu.v1.Activities.GnssRecordR\vplaceRecord\x12\x1f\n" +
	"\vodometer_km\x18\b \x01(\x05R\n" +
	"odometerKm\x1a\xce\x03\n" +
	"\x10LoadUnloadRecord\x12j\n" +
	"\x10full_card_number\x18\x01 \x01(\v2@.wayplatform.connect.tachograph.datadictionary.v1.FullCardNumberR\x0efullCardNumber\x12e\n" +
	"\x0fcard_generation\x18\x02 \x01(\x0e2<.wayplatform.connect.tachograph.datadictionary.v1.GenerationR\x0ecardGeneration\x12f\n" +
	"\x0eoperation_type\x18\x03 \x01(\x0e2?.wayplatform.connect.tachograph.datadictionary.v1.OperationTypeR\roperationType\x12^\n" +
	"\fplace_record\x18\x04 \x01(\v2;.wayplatform.connect.tachograph.vu.v1.Activities.GnssRecordR\vplaceRecord\x12\x1f\n" +
	"\vodometer_km\x18\x05 \x01(\x05R\n" +
	"odometerKmB\xce\x02\n" +
	"(com.wayplatform.connect.tachograph.vu.v1B\x0fActivitiesProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/vu/v1;vuv1\xa2\x02\x04WCTV\xaa\x02$Wayplatform.Connect.Tachograph.Vu.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Vu\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Vu\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Vu::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_wayplatform_connect_tachograph_vu_v1_activities_proto_goTypes = []any{
	(*Activities)(nil),                                  // 0: wayplatform.connect.tachograph.vu.v1.Activities
	(*Activities_CardIWRecord)(nil),                     // 1: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord
	(*Activities_PlaceRecord)(nil),                      // 2: wayplatform.connect.tachograph.vu.v1.Activities.PlaceRecord
	(*Activities_GnssRecord)(nil),                       // 3: wayplatform.connect.tachograph.vu.v1.Activities.GnssRecord
	(*Activities_SpecificConditionRecord)(nil),          // 4: wayplatform.connect.tachograph.vu.v1.Activities.SpecificConditionRecord
	(*Activities_BorderCrossingRecord)(nil),             // 5: wayplatform.connect.tachograph.vu.v1.Activities.BorderCrossingRecord
	(*Activities_LoadUnloadRecord)(nil),                 // 6: wayplatform.connect.tachograph.vu.v1.Activities.LoadUnloadRecord
	(*Activities_CardIWRecord_PreviousVehicleInfo)(nil), // 7: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.PreviousVehicleInfo
	(v1.Generation)(0),                                  // 8: wayplatform.connect.tachograph.datadictionary.v1.Generation
	(Version)(0),                                        // 9: wayplatform.connect.tachograph.vu.v1.Version
	(*timestamppb.Timestamp)(nil),                       // 10: google.protobuf.Timestamp
	(*v1.ActivityChangeInfo)(nil),                       // 11: wayplatform.connect.tachograph.datadictionary.v1.ActivityChangeInfo
	(*v1.HolderName)(nil),                               // 12: wayplatform.connect.tachograph.datadictionary.v1.HolderName
	(*v1.FullCardNumber)(nil),                           // 13: wayplatform.connect.tachograph.datadictionary.v1.FullCardNumber
	(*v1.Date)(nil),                                     // 14: wayplatform.connect.tachograph.datadictionary.v1.Date
	(v1.CardSlotNumber)(0),                              // 15: wayplatform.connect.tachograph.datadictionary.v1.CardSlotNumber
	(v1.EntryTypeDailyWorkPeriod)(0),                    // 16: wayplatform.connect.tachograph.datadictionary.v1.EntryTypeDailyWorkPeriod
	(v1.NationNumeric)(0),                               // 17: wayplatform.connect.tachograph.datadictionary.v1.NationNumeric
	(*v1.GeoCoordinates)(nil),                           // 18: wayplatform.connect.tachograph.datadictionary.v1.GeoCoordinates
	(v1.PositionAuthenticationStatus)(0),                // 19: wayplatform.connect.tachograph.datadictionary.v1.PositionAuthenticationStatus
	(v1.SpecificConditionType)(0),                       // 20: wayplatform.connect.tachograph.datadictionary.v1.SpecificConditionType
	(v1.OperationType)(0),                               // 21: wayplatform.connect.tachograph.datadictionary.v1.OperationType
	(*v1.VehicleRegistrationIdentification)(nil),        // 22: wayplatform.connect.tachograph.datadictionary.v1.VehicleRegistrationIdentification
}
var file_wayplatform_connect_tachograph_vu_v1_activities_proto_depIdxs = []int32{
	8,  // 0: wayplatform.connect.tachograph.vu.v1.Activities.generation:type_name -> wayplatform.connect.tachograph.datadictionary.v1.Generation
	9,  // 1: wayplatform.connect.tachograph.vu.v1.Activities.version:type_name -> wayplatform.connect.tachograph.vu.v1.Version
	10, // 2: wayplatform.connect.tachograph.vu.v1.Activities.date_of_day:type_name -> google.protobuf.Timestamp
	1,  // 3: wayplatform.connect.tachograph.vu.v1.Activities.card_iw_data:type_name -> wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord
	11, // 4: wayplatform.connect.tachograph.vu.v1.Activities.activity_changes:type_name -> wayplatform.connect.tachograph.datadictionary.v1.ActivityChangeInfo
	2,  // 5: wayplatform.connect.tachograph.vu.v1.Activities.places:type_name -> wayplatform.connect.tachograph.vu.v1.Activities.PlaceRecord
	4,  // 6: wayplatform.connect.tachograph.vu.v1.Activities.specific_conditions:type_name -> wayplatform.connect.tachograph.vu.v1.Activities.SpecificConditionRecord
	3,  // 7: wayplatform.connect.tachograph.vu.v1.Activities.gnss_accumulated_driving:type_name -> wayplatform.connect.tachograph.vu.v1.Activities.GnssRecord
	5,  // 8: wayplatform.connect.tachograph.vu.v1.Activities.border_crossings:type_name -> wayplatform.connect.tachograph.vu.v1.Activities.BorderCrossingRecord
	6,  // 9: wayplatform.connect.tachograph.vu.v1.Activities.load_unload_operations:type_name -> wayplatform.connect.tachograph.vu.v1.Activities.LoadUnloadRecord
	12, // 10: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.card_holder_name:type_name -> wayplatform.connect.tachograph.datadictionary.v1.HolderName
	13, // 11: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.full_card_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumber
	14, // 12: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.card_expiry_date:type_name -> wayplatform.connect.tachograph.datadictionary.v1.Date
	10, // 13: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.card_insertion_time:type_name -> google.protobuf.Timestamp
	15, // 14: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.card_slot_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.CardSlotNumber
	10, // 15: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.card_withdrawal_time:type_name -> google.protobuf.Timestamp
	7,  // 16: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.previous_vehicle_info:type_name -> wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.PreviousVehicleInfo
	10, // 17: wayplatform.connect.tachograph.vu.v1.Activities.PlaceRecord.entry_time:type_name -> google.protobuf.Timestamp
	16, // 18: wayplatform.connect.tachograph.vu.v1.Activities.PlaceRecord.entry_type:type_name -> wayplatform.connect.tachograph.datadictionary.v1.EntryTypeDailyWorkPeriod
	17, // 19: wayplatform.connect.tachograph.vu.v1.Activities.PlaceRecord.country:type_name -> wayplatform.connect.tachograph.datadictionary.v1.NationNumeric
	10, // 20: wayplatform.connect.tachograph.vu.v1.Activities.GnssRecord.timestamp:type_name -> google.protobuf.Timestamp
	18, // 21: wayplatform.connect.tachograph.vu.v1.Activities.GnssRecord.geo_coordinates:type_name -> wayplatform.connect.tachograph.datadictionary.v1.GeoCoordinates
	19, // 22: wayplatform.connect.tachograph.vu.v1.Activities.GnssRecord.authentication_status:type_name -> wayplatform.connect.tachograph.datadictionary.v1.PositionAuthenticationStatus
	10, // 23: wayplatform.connect.tachograph.vu.v1.Activities.SpecificConditionRecord.entry_time:type_name -> google.protobuf.Timestamp
	20, // 24: wayplatform.connect.tachograph.vu.v1.Activities.SpecificConditionRecord.specific_condition_type:type_name -> wayplatform.connect.tachograph.datadictionary.v1.SpecificConditionType
	13, // 25: wayplatform.connect.tachograph.vu.v1.Activities.BorderCrossingRecord.full_card_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumber
	8,  // 26: wayplatform.connect.tachograph.vu.v1.Activities.BorderCrossingRecord.card_generation:type_name -> wayplatform.connect.tachograph.datadictionary.v1.Generation
	17, // 27: wayplatform.connect.tachograph.vu.v1.Activities.BorderCrossingRecord.country_left:type_name -> wayplatform.connect.tachograph.datadictionary.v1.NationNumeric
	17, // 28: wayplatform.connect.tachograph.vu.v1.Activities.BorderCrossingRecord.country_entered:type_name -> wayplatform.connect.tachograph.datadictionary.v1.NationNumeric
	3,  // 29: wayplatform.connect.tachograph.vu.v1.Activities.BorderCrossingRecord.place_record:type_name -> wayplatform.connect.tachograph.vu.v1.Activities.GnssRecord
	13, // 30: wayplatform.connect.tachograph.vu.v1.Activities.LoadUnloadRecord.full_card_number:type_name -> wayplatform.connect.tachograph.datadictionary.v1.FullCardNumber
	8,  // 31: wayplatform.connect.tachograph.vu.v1.Activities.LoadUnloadRecord.card_generation:type_name -> wayplatform.connect.tachograph.datadictionary.v1.Generation
	21, // 32: wayplatform.connect.tachograph.vu.v1.Activities.LoadUnloadRecord.operation_type:type_name -> wayplatform.connect.tachograph.datadictionary.v1.OperationType
	3,  // 33: wayplatform.connect.tachograph.vu.v1.Activities.LoadUnloadRecord.place_record:type_name -> wayplatform.connect.tachograph.vu.v1.Activities.GnssRecord
	22, // 34: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.PreviousVehicleInfo.vehicle_registration:type_name -> wayplatform.connect.tachograph.datadictionary.v1.VehicleRegistrationIdentification
	10, // 35: wayplatform.connect.tachograph.vu.v1.Activities.CardIWRecord.PreviousVehicleInfo.card_withdrawal_time:type_name -> google.protobuf.Timestamp
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_vu_v1_activities_proto_init() }
func file_wayplatform_connect_tachograph_vu_v1_activities_proto_init() {
	if File_wayplatform_connect_tachograph_vu_v1_activities_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_vu_v1_versioning_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_vu_v1_activities_proto_rawDesc), len(file_wayplatform_connect_tachograph_vu_v1_activities_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_vu_v1_activities_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_vu_v1_activities_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_vu_v1_activities_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_vu_v1_activities_proto = out.File
	file_wayplatform_connect_tachograph_vu_v1_activities_proto_goTypes = nil
	file_wayplatform_connect_tachograph_vu_v1_activities_proto_depIdxs = nil
}
