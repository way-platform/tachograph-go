// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/vu/v1/technical_data_gen2_v2.proto

package vuv1

import (
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Technical Data for Generation 2, Version 2 VU downloads.
//
// See Appendix 7, Section 2.2.6.6 (TREP 35 Hex).
//
// Gen2 V2 extends Gen2 V1 with power supply interruption records.
//
// ASN.1 Definition:
//
//	VuTechnicalDataSecondGenV2 ::= SEQUENCE {
//	    vuIdentification VuIdentification,
//	    vuCalibrationRecordArray VuCalibrationRecordArray,
//	    vuSensorPairedRecordArray VuSensorPairedRecordArray,
//	    vuSensorExternalGNSSCoupledRecordArray VuSensorExternalGNSSCoupledRecordArray,
//	    vuCardRecordArray VuCardRecordArray,
//	    vuITSConsentRecordArray VuITSConsentRecordArray,
//	    vuPowerSupplyInterruptionRecordArray VuPowerSupplyInterruptionRecordArray,
//	    signatureRecordArray SignatureRecordArray
//	}
type TechnicalDataGen2V2 struct {
	state                               protoimpl.MessageState                                `protogen:"opaque.v1"`
	xxx_hidden_VuIdentification         *TechnicalDataGen2V2_VuIdentification                 `protobuf:"bytes,1,opt,name=vu_identification,json=vuIdentification"`
	xxx_hidden_CalibrationRecords       *[]*TechnicalDataGen2V2_CalibrationRecord             `protobuf:"bytes,2,rep,name=calibration_records,json=calibrationRecords"`
	xxx_hidden_PairedSensors            *[]*TechnicalDataGen2V2_PairedSensor                  `protobuf:"bytes,3,rep,name=paired_sensors,json=pairedSensors"`
	xxx_hidden_CoupledGnssFacilities    *[]*TechnicalDataGen2V2_CoupledGnss                   `protobuf:"bytes,4,rep,name=coupled_gnss_facilities,json=coupledGnssFacilities"`
	xxx_hidden_CardRecords              *[]*TechnicalDataGen2V2_CardRecord                    `protobuf:"bytes,5,rep,name=card_records,json=cardRecords"`
	xxx_hidden_ItsConsentRecords        *[]*TechnicalDataGen2V2_ItsConsentRecord              `protobuf:"bytes,6,rep,name=its_consent_records,json=itsConsentRecords"`
	xxx_hidden_PowerSupplyInterruptions *[]*TechnicalDataGen2V2_PowerSupplyInterruptionRecord `protobuf:"bytes,7,rep,name=power_supply_interruptions,json=powerSupplyInterruptions"`
	xxx_hidden_Signature                []byte                                                `protobuf:"bytes,8,opt,name=signature"`
	xxx_hidden_RawData                  []byte                                                `protobuf:"bytes,9,opt,name=raw_data,json=rawData"`
	XXX_raceDetectHookData              protoimpl.RaceDetectHookData
	XXX_presence                        [1]uint32
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *TechnicalDataGen2V2) Reset() {
	*x = TechnicalDataGen2V2{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalDataGen2V2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalDataGen2V2) ProtoMessage() {}

func (x *TechnicalDataGen2V2) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalDataGen2V2) GetVuIdentification() *TechnicalDataGen2V2_VuIdentification {
	if x != nil {
		return x.xxx_hidden_VuIdentification
	}
	return nil
}

func (x *TechnicalDataGen2V2) GetCalibrationRecords() []*TechnicalDataGen2V2_CalibrationRecord {
	if x != nil {
		if x.xxx_hidden_CalibrationRecords != nil {
			return *x.xxx_hidden_CalibrationRecords
		}
	}
	return nil
}

func (x *TechnicalDataGen2V2) GetPairedSensors() []*TechnicalDataGen2V2_PairedSensor {
	if x != nil {
		if x.xxx_hidden_PairedSensors != nil {
			return *x.xxx_hidden_PairedSensors
		}
	}
	return nil
}

func (x *TechnicalDataGen2V2) GetCoupledGnssFacilities() []*TechnicalDataGen2V2_CoupledGnss {
	if x != nil {
		if x.xxx_hidden_CoupledGnssFacilities != nil {
			return *x.xxx_hidden_CoupledGnssFacilities
		}
	}
	return nil
}

func (x *TechnicalDataGen2V2) GetCardRecords() []*TechnicalDataGen2V2_CardRecord {
	if x != nil {
		if x.xxx_hidden_CardRecords != nil {
			return *x.xxx_hidden_CardRecords
		}
	}
	return nil
}

func (x *TechnicalDataGen2V2) GetItsConsentRecords() []*TechnicalDataGen2V2_ItsConsentRecord {
	if x != nil {
		if x.xxx_hidden_ItsConsentRecords != nil {
			return *x.xxx_hidden_ItsConsentRecords
		}
	}
	return nil
}

func (x *TechnicalDataGen2V2) GetPowerSupplyInterruptions() []*TechnicalDataGen2V2_PowerSupplyInterruptionRecord {
	if x != nil {
		if x.xxx_hidden_PowerSupplyInterruptions != nil {
			return *x.xxx_hidden_PowerSupplyInterruptions
		}
	}
	return nil
}

func (x *TechnicalDataGen2V2) GetSignature() []byte {
	if x != nil {
		return x.xxx_hidden_Signature
	}
	return nil
}

func (x *TechnicalDataGen2V2) GetRawData() []byte {
	if x != nil {
		return x.xxx_hidden_RawData
	}
	return nil
}

func (x *TechnicalDataGen2V2) SetVuIdentification(v *TechnicalDataGen2V2_VuIdentification) {
	x.xxx_hidden_VuIdentification = v
}

func (x *TechnicalDataGen2V2) SetCalibrationRecords(v []*TechnicalDataGen2V2_CalibrationRecord) {
	x.xxx_hidden_CalibrationRecords = &v
}

func (x *TechnicalDataGen2V2) SetPairedSensors(v []*TechnicalDataGen2V2_PairedSensor) {
	x.xxx_hidden_PairedSensors = &v
}

func (x *TechnicalDataGen2V2) SetCoupledGnssFacilities(v []*TechnicalDataGen2V2_CoupledGnss) {
	x.xxx_hidden_CoupledGnssFacilities = &v
}

func (x *TechnicalDataGen2V2) SetCardRecords(v []*TechnicalDataGen2V2_CardRecord) {
	x.xxx_hidden_CardRecords = &v
}

func (x *TechnicalDataGen2V2) SetItsConsentRecords(v []*TechnicalDataGen2V2_ItsConsentRecord) {
	x.xxx_hidden_ItsConsentRecords = &v
}

func (x *TechnicalDataGen2V2) SetPowerSupplyInterruptions(v []*TechnicalDataGen2V2_PowerSupplyInterruptionRecord) {
	x.xxx_hidden_PowerSupplyInterruptions = &v
}

func (x *TechnicalDataGen2V2) SetSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Signature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 9)
}

func (x *TechnicalDataGen2V2) SetRawData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RawData = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 9)
}

func (x *TechnicalDataGen2V2) HasVuIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VuIdentification != nil
}

func (x *TechnicalDataGen2V2) HasSignature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *TechnicalDataGen2V2) HasRawData() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *TechnicalDataGen2V2) ClearVuIdentification() {
	x.xxx_hidden_VuIdentification = nil
}

func (x *TechnicalDataGen2V2) ClearSignature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Signature = nil
}

func (x *TechnicalDataGen2V2) ClearRawData() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_RawData = nil
}

type TechnicalDataGen2V2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Vehicle unit identification data.
	//
	// See Data Dictionary, Section 2.205, `VuIdentification`.
	VuIdentification *TechnicalDataGen2V2_VuIdentification
	// All calibration records stored in the VU.
	//
	// See Data Dictionary, Section 2.175, `VuCalibrationRecordArray`.
	CalibrationRecords []*TechnicalDataGen2V2_CalibrationRecord
	// List of paired sensors (Gen2).
	//
	// See Data Dictionary, Section 2.243, `VuSensorPairedRecordArray`.
	PairedSensors []*TechnicalDataGen2V2_PairedSensor
	// List of coupled external GNSS facilities (Gen2).
	//
	// See Data Dictionary, Section 2.242, `VuSensorExternalGNSSCoupledRecordArray`.
	CoupledGnssFacilities []*TechnicalDataGen2V2_CoupledGnss
	// List of cards that have been used in the VU (Gen2).
	//
	// See Data Dictionary, Section 2.180, `VuCardRecordArray`.
	CardRecords []*TechnicalDataGen2V2_CardRecord
	// List of ITS consent records (Gen2).
	//
	// See Data Dictionary, Section 2.208, `VuITSConsentRecordArray`.
	ItsConsentRecords []*TechnicalDataGen2V2_ItsConsentRecord
	// List of power supply interruptions (Gen2 V2 addition).
	//
	// See Data Dictionary, Section 2.241, `VuPowerSupplyInterruptionRecordArray`.
	PowerSupplyInterruptions []*TechnicalDataGen2V2_PowerSupplyInterruptionRecord
	// Signature for Gen2 data (ECC, variable length in SignatureRecordArray).
	//
	// See Data Dictionary, Section 2.149, `Signature`.
	Signature []byte
	// The raw, unparsed binary data of the complete Technical Data transfer value.
	// This field is preserved for data fidelity and lossless round-trips.
	// It includes all data structures and the embedded signature.
	RawData []byte
}

func (b0 TechnicalDataGen2V2_builder) Build() *TechnicalDataGen2V2 {
	m0 := &TechnicalDataGen2V2{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_VuIdentification = b.VuIdentification
	x.xxx_hidden_CalibrationRecords = &b.CalibrationRecords
	x.xxx_hidden_PairedSensors = &b.PairedSensors
	x.xxx_hidden_CoupledGnssFacilities = &b.CoupledGnssFacilities
	x.xxx_hidden_CardRecords = &b.CardRecords
	x.xxx_hidden_ItsConsentRecords = &b.ItsConsentRecords
	x.xxx_hidden_PowerSupplyInterruptions = &b.PowerSupplyInterruptions
	if b.Signature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 9)
		x.xxx_hidden_Signature = b.Signature
	}
	if b.RawData != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 9)
		x.xxx_hidden_RawData = b.RawData
	}
	return m0
}

// Represents the identification data of the vehicle unit.
//
// See Data Dictionary, Section 2.205, `VuIdentification`.
type TechnicalDataGen2V2_VuIdentification struct {
	state                             protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_ManufacturerName       *v1.StringValue            `protobuf:"bytes,1,opt,name=manufacturer_name,json=manufacturerName"`
	xxx_hidden_ManufacturerAddress    *v1.StringValue            `protobuf:"bytes,2,opt,name=manufacturer_address,json=manufacturerAddress"`
	xxx_hidden_PartNumber             *v1.StringValue            `protobuf:"bytes,3,opt,name=part_number,json=partNumber"`
	xxx_hidden_SerialNumber           *v1.ExtendedSerialNumber   `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber"`
	xxx_hidden_SoftwareIdentification *v1.SoftwareIdentification `protobuf:"bytes,5,opt,name=software_identification,json=softwareIdentification"`
	xxx_hidden_ManufacturingDate      *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=manufacturing_date,json=manufacturingDate"`
	xxx_hidden_ApprovalNumber         *v1.StringValue            `protobuf:"bytes,7,opt,name=approval_number,json=approvalNumber"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *TechnicalDataGen2V2_VuIdentification) Reset() {
	*x = TechnicalDataGen2V2_VuIdentification{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalDataGen2V2_VuIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalDataGen2V2_VuIdentification) ProtoMessage() {}

func (x *TechnicalDataGen2V2_VuIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalDataGen2V2_VuIdentification) GetManufacturerName() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_ManufacturerName
	}
	return nil
}

func (x *TechnicalDataGen2V2_VuIdentification) GetManufacturerAddress() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_ManufacturerAddress
	}
	return nil
}

func (x *TechnicalDataGen2V2_VuIdentification) GetPartNumber() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_PartNumber
	}
	return nil
}

func (x *TechnicalDataGen2V2_VuIdentification) GetSerialNumber() *v1.ExtendedSerialNumber {
	if x != nil {
		return x.xxx_hidden_SerialNumber
	}
	return nil
}

func (x *TechnicalDataGen2V2_VuIdentification) GetSoftwareIdentification() *v1.SoftwareIdentification {
	if x != nil {
		return x.xxx_hidden_SoftwareIdentification
	}
	return nil
}

func (x *TechnicalDataGen2V2_VuIdentification) GetManufacturingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ManufacturingDate
	}
	return nil
}

func (x *TechnicalDataGen2V2_VuIdentification) GetApprovalNumber() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_ApprovalNumber
	}
	return nil
}

func (x *TechnicalDataGen2V2_VuIdentification) SetManufacturerName(v *v1.StringValue) {
	x.xxx_hidden_ManufacturerName = v
}

func (x *TechnicalDataGen2V2_VuIdentification) SetManufacturerAddress(v *v1.StringValue) {
	x.xxx_hidden_ManufacturerAddress = v
}

func (x *TechnicalDataGen2V2_VuIdentification) SetPartNumber(v *v1.StringValue) {
	x.xxx_hidden_PartNumber = v
}

func (x *TechnicalDataGen2V2_VuIdentification) SetSerialNumber(v *v1.ExtendedSerialNumber) {
	x.xxx_hidden_SerialNumber = v
}

func (x *TechnicalDataGen2V2_VuIdentification) SetSoftwareIdentification(v *v1.SoftwareIdentification) {
	x.xxx_hidden_SoftwareIdentification = v
}

func (x *TechnicalDataGen2V2_VuIdentification) SetManufacturingDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_ManufacturingDate = v
}

func (x *TechnicalDataGen2V2_VuIdentification) SetApprovalNumber(v *v1.StringValue) {
	x.xxx_hidden_ApprovalNumber = v
}

func (x *TechnicalDataGen2V2_VuIdentification) HasManufacturerName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ManufacturerName != nil
}

func (x *TechnicalDataGen2V2_VuIdentification) HasManufacturerAddress() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ManufacturerAddress != nil
}

func (x *TechnicalDataGen2V2_VuIdentification) HasPartNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PartNumber != nil
}

func (x *TechnicalDataGen2V2_VuIdentification) HasSerialNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SerialNumber != nil
}

func (x *TechnicalDataGen2V2_VuIdentification) HasSoftwareIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SoftwareIdentification != nil
}

func (x *TechnicalDataGen2V2_VuIdentification) HasManufacturingDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ManufacturingDate != nil
}

func (x *TechnicalDataGen2V2_VuIdentification) HasApprovalNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ApprovalNumber != nil
}

func (x *TechnicalDataGen2V2_VuIdentification) ClearManufacturerName() {
	x.xxx_hidden_ManufacturerName = nil
}

func (x *TechnicalDataGen2V2_VuIdentification) ClearManufacturerAddress() {
	x.xxx_hidden_ManufacturerAddress = nil
}

func (x *TechnicalDataGen2V2_VuIdentification) ClearPartNumber() {
	x.xxx_hidden_PartNumber = nil
}

func (x *TechnicalDataGen2V2_VuIdentification) ClearSerialNumber() {
	x.xxx_hidden_SerialNumber = nil
}

func (x *TechnicalDataGen2V2_VuIdentification) ClearSoftwareIdentification() {
	x.xxx_hidden_SoftwareIdentification = nil
}

func (x *TechnicalDataGen2V2_VuIdentification) ClearManufacturingDate() {
	x.xxx_hidden_ManufacturingDate = nil
}

func (x *TechnicalDataGen2V2_VuIdentification) ClearApprovalNumber() {
	x.xxx_hidden_ApprovalNumber = nil
}

type TechnicalDataGen2V2_VuIdentification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the VU manufacturer.
	//
	// See Data Dictionary, Section 2.210, `VuManufacturerName`.
	ManufacturerName *v1.StringValue
	// The address of the VU manufacturer.
	//
	// See Data Dictionary, Section 2.209, `VuManufacturerAddress`.
	ManufacturerAddress *v1.StringValue
	// The part number of the VU.
	//
	// See Data Dictionary, Section 2.217, `VuPartNumber`.
	PartNumber *v1.StringValue
	// The serial number of the VU.
	//
	// See Data Dictionary, Section 2.223, `VuSerialNumber`.
	SerialNumber *v1.ExtendedSerialNumber
	// The software identification of the VU.
	SoftwareIdentification *v1.SoftwareIdentification
	// The manufacturing date of the VU.
	//
	// See Data Dictionary, Section 2.211, `VuManufacturingDate`.
	ManufacturingDate *timestamppb.Timestamp
	// The approval number of the VU (Gen2: 16 bytes).
	//
	// See Data Dictionary, Section 2.172, `VuApprovalNumber`.
	ApprovalNumber *v1.StringValue
}

func (b0 TechnicalDataGen2V2_VuIdentification_builder) Build() *TechnicalDataGen2V2_VuIdentification {
	m0 := &TechnicalDataGen2V2_VuIdentification{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ManufacturerName = b.ManufacturerName
	x.xxx_hidden_ManufacturerAddress = b.ManufacturerAddress
	x.xxx_hidden_PartNumber = b.PartNumber
	x.xxx_hidden_SerialNumber = b.SerialNumber
	x.xxx_hidden_SoftwareIdentification = b.SoftwareIdentification
	x.xxx_hidden_ManufacturingDate = b.ManufacturingDate
	x.xxx_hidden_ApprovalNumber = b.ApprovalNumber
	return m0
}

// Represents a paired motion sensor record.
//
// See Data Dictionary, Section 2.145, `SensorPairedRecord`.
type TechnicalDataGen2V2_PairedSensor struct {
	state                     protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_SerialNumber   *v1.ExtendedSerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber"`
	xxx_hidden_ApprovalNumber *v1.StringValue          `protobuf:"bytes,2,opt,name=approval_number,json=approvalNumber"`
	xxx_hidden_PairingDate    *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=pairing_date,json=pairingDate"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TechnicalDataGen2V2_PairedSensor) Reset() {
	*x = TechnicalDataGen2V2_PairedSensor{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalDataGen2V2_PairedSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalDataGen2V2_PairedSensor) ProtoMessage() {}

func (x *TechnicalDataGen2V2_PairedSensor) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalDataGen2V2_PairedSensor) GetSerialNumber() *v1.ExtendedSerialNumber {
	if x != nil {
		return x.xxx_hidden_SerialNumber
	}
	return nil
}

func (x *TechnicalDataGen2V2_PairedSensor) GetApprovalNumber() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_ApprovalNumber
	}
	return nil
}

func (x *TechnicalDataGen2V2_PairedSensor) GetPairingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_PairingDate
	}
	return nil
}

func (x *TechnicalDataGen2V2_PairedSensor) SetSerialNumber(v *v1.ExtendedSerialNumber) {
	x.xxx_hidden_SerialNumber = v
}

func (x *TechnicalDataGen2V2_PairedSensor) SetApprovalNumber(v *v1.StringValue) {
	x.xxx_hidden_ApprovalNumber = v
}

func (x *TechnicalDataGen2V2_PairedSensor) SetPairingDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_PairingDate = v
}

func (x *TechnicalDataGen2V2_PairedSensor) HasSerialNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SerialNumber != nil
}

func (x *TechnicalDataGen2V2_PairedSensor) HasApprovalNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ApprovalNumber != nil
}

func (x *TechnicalDataGen2V2_PairedSensor) HasPairingDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PairingDate != nil
}

func (x *TechnicalDataGen2V2_PairedSensor) ClearSerialNumber() {
	x.xxx_hidden_SerialNumber = nil
}

func (x *TechnicalDataGen2V2_PairedSensor) ClearApprovalNumber() {
	x.xxx_hidden_ApprovalNumber = nil
}

func (x *TechnicalDataGen2V2_PairedSensor) ClearPairingDate() {
	x.xxx_hidden_PairingDate = nil
}

type TechnicalDataGen2V2_PairedSensor_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The serial number of the motion sensor.
	//
	// See Data Dictionary, Section 2.148, `SensorSerialNumber`.
	SerialNumber *v1.ExtendedSerialNumber
	// The approval number of the motion sensor (Gen2: 16 bytes).
	//
	// See Data Dictionary, Section 2.131, `SensorApprovalNumber`.
	ApprovalNumber *v1.StringValue
	// The date the sensor was paired.
	//
	// See Data Dictionary, Section 2.146, `SensorPairingDate`.
	PairingDate *timestamppb.Timestamp
}

func (b0 TechnicalDataGen2V2_PairedSensor_builder) Build() *TechnicalDataGen2V2_PairedSensor {
	m0 := &TechnicalDataGen2V2_PairedSensor{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_SerialNumber = b.SerialNumber
	x.xxx_hidden_ApprovalNumber = b.ApprovalNumber
	x.xxx_hidden_PairingDate = b.PairingDate
	return m0
}

// Represents a coupled external GNSS facility record.
//
// See Data Dictionary, Section 2.133, `SensorExternalGNSSCoupledRecord`.
type TechnicalDataGen2V2_CoupledGnss struct {
	state                     protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_SerialNumber   *v1.ExtendedSerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber"`
	xxx_hidden_ApprovalNumber *v1.StringValue          `protobuf:"bytes,2,opt,name=approval_number,json=approvalNumber"`
	xxx_hidden_CouplingDate   *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=coupling_date,json=couplingDate"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TechnicalDataGen2V2_CoupledGnss) Reset() {
	*x = TechnicalDataGen2V2_CoupledGnss{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalDataGen2V2_CoupledGnss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalDataGen2V2_CoupledGnss) ProtoMessage() {}

func (x *TechnicalDataGen2V2_CoupledGnss) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalDataGen2V2_CoupledGnss) GetSerialNumber() *v1.ExtendedSerialNumber {
	if x != nil {
		return x.xxx_hidden_SerialNumber
	}
	return nil
}

func (x *TechnicalDataGen2V2_CoupledGnss) GetApprovalNumber() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_ApprovalNumber
	}
	return nil
}

func (x *TechnicalDataGen2V2_CoupledGnss) GetCouplingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CouplingDate
	}
	return nil
}

func (x *TechnicalDataGen2V2_CoupledGnss) SetSerialNumber(v *v1.ExtendedSerialNumber) {
	x.xxx_hidden_SerialNumber = v
}

func (x *TechnicalDataGen2V2_CoupledGnss) SetApprovalNumber(v *v1.StringValue) {
	x.xxx_hidden_ApprovalNumber = v
}

func (x *TechnicalDataGen2V2_CoupledGnss) SetCouplingDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_CouplingDate = v
}

func (x *TechnicalDataGen2V2_CoupledGnss) HasSerialNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SerialNumber != nil
}

func (x *TechnicalDataGen2V2_CoupledGnss) HasApprovalNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ApprovalNumber != nil
}

func (x *TechnicalDataGen2V2_CoupledGnss) HasCouplingDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CouplingDate != nil
}

func (x *TechnicalDataGen2V2_CoupledGnss) ClearSerialNumber() {
	x.xxx_hidden_SerialNumber = nil
}

func (x *TechnicalDataGen2V2_CoupledGnss) ClearApprovalNumber() {
	x.xxx_hidden_ApprovalNumber = nil
}

func (x *TechnicalDataGen2V2_CoupledGnss) ClearCouplingDate() {
	x.xxx_hidden_CouplingDate = nil
}

type TechnicalDataGen2V2_CoupledGnss_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The serial number of the external GNSS.
	//
	// See Data Dictionary, Section 2.139, `SensorGNSSSerialNumber`.
	SerialNumber *v1.ExtendedSerialNumber
	// The approval number of the external GNSS.
	//
	// See Data Dictionary, Section 2.132, `SensorExternalGNSSApprovalNumber`.
	ApprovalNumber *v1.StringValue
	// The date the GNSS was coupled.
	//
	// See Data Dictionary, Section 2.138, `SensorGNSSCouplingDate`.
	CouplingDate *timestamppb.Timestamp
}

func (b0 TechnicalDataGen2V2_CoupledGnss_builder) Build() *TechnicalDataGen2V2_CoupledGnss {
	m0 := &TechnicalDataGen2V2_CoupledGnss{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_SerialNumber = b.SerialNumber
	x.xxx_hidden_ApprovalNumber = b.ApprovalNumber
	x.xxx_hidden_CouplingDate = b.CouplingDate
	return m0
}

// Represents a calibration record.
//
// See Data Dictionary, Section 2.174, `VuCalibrationRecord`.
type TechnicalDataGen2V2_CalibrationRecord struct {
	state                                      protoimpl.MessageState                `protogen:"opaque.v1"`
	xxx_hidden_Purpose                         v1.CalibrationPurpose                 `protobuf:"varint,1,opt,name=purpose,enum=wayplatform.connect.tachograph.dd.v1.CalibrationPurpose"`
	xxx_hidden_UnrecognizedPurpose             int32                                 `protobuf:"varint,2,opt,name=unrecognized_purpose,json=unrecognizedPurpose"`
	xxx_hidden_WorkshopName                    *v1.StringValue                       `protobuf:"bytes,3,opt,name=workshop_name,json=workshopName"`
	xxx_hidden_WorkshopAddress                 *v1.StringValue                       `protobuf:"bytes,4,opt,name=workshop_address,json=workshopAddress"`
	xxx_hidden_WorkshopCardNumberAndGeneration *v1.FullCardNumberAndGeneration       `protobuf:"bytes,5,opt,name=workshop_card_number_and_generation,json=workshopCardNumberAndGeneration"`
	xxx_hidden_WorkshopCardExpiryDate          *v1.Date                              `protobuf:"bytes,6,opt,name=workshop_card_expiry_date,json=workshopCardExpiryDate"`
	xxx_hidden_Vin                             *v1.StringValue                       `protobuf:"bytes,7,opt,name=vin"`
	xxx_hidden_VehicleRegistration             *v1.VehicleRegistrationIdentification `protobuf:"bytes,8,opt,name=vehicle_registration,json=vehicleRegistration"`
	xxx_hidden_WVehicleCharacteristicConstant  int32                                 `protobuf:"varint,9,opt,name=w_vehicle_characteristic_constant,json=wVehicleCharacteristicConstant"`
	xxx_hidden_KConstantOfRecordingEquipment   int32                                 `protobuf:"varint,10,opt,name=k_constant_of_recording_equipment,json=kConstantOfRecordingEquipment"`
	xxx_hidden_LTyreCircumferenceEighthsMm     int32                                 `protobuf:"varint,11,opt,name=l_tyre_circumference_eighths_mm,json=lTyreCircumferenceEighthsMm"`
	xxx_hidden_TyreSize                        *v1.StringValue                       `protobuf:"bytes,12,opt,name=tyre_size,json=tyreSize"`
	xxx_hidden_AuthorisedSpeedKmh              int32                                 `protobuf:"varint,13,opt,name=authorised_speed_kmh,json=authorisedSpeedKmh"`
	xxx_hidden_OldOdometerValueKm              int32                                 `protobuf:"varint,14,opt,name=old_odometer_value_km,json=oldOdometerValueKm"`
	xxx_hidden_NewOdometerValueKm              int32                                 `protobuf:"varint,15,opt,name=new_odometer_value_km,json=newOdometerValueKm"`
	xxx_hidden_OldTimeValue                    *timestamppb.Timestamp                `protobuf:"bytes,16,opt,name=old_time_value,json=oldTimeValue"`
	xxx_hidden_NewTimeValue                    *timestamppb.Timestamp                `protobuf:"bytes,17,opt,name=new_time_value,json=newTimeValue"`
	xxx_hidden_NextCalibrationDate             *timestamppb.Timestamp                `protobuf:"bytes,18,opt,name=next_calibration_date,json=nextCalibrationDate"`
	XXX_raceDetectHookData                     protoimpl.RaceDetectHookData
	XXX_presence                               [1]uint32
	unknownFields                              protoimpl.UnknownFields
	sizeCache                                  protoimpl.SizeCache
}

func (x *TechnicalDataGen2V2_CalibrationRecord) Reset() {
	*x = TechnicalDataGen2V2_CalibrationRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalDataGen2V2_CalibrationRecord) ProtoMessage() {}

func (x *TechnicalDataGen2V2_CalibrationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetPurpose() v1.CalibrationPurpose {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Purpose
		}
	}
	return v1.CalibrationPurpose(0)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetUnrecognizedPurpose() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedPurpose
	}
	return 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetWorkshopName() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_WorkshopName
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetWorkshopAddress() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_WorkshopAddress
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetWorkshopCardNumberAndGeneration() *v1.FullCardNumberAndGeneration {
	if x != nil {
		return x.xxx_hidden_WorkshopCardNumberAndGeneration
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetWorkshopCardExpiryDate() *v1.Date {
	if x != nil {
		return x.xxx_hidden_WorkshopCardExpiryDate
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetVin() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_Vin
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetVehicleRegistration() *v1.VehicleRegistrationIdentification {
	if x != nil {
		return x.xxx_hidden_VehicleRegistration
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetWVehicleCharacteristicConstant() int32 {
	if x != nil {
		return x.xxx_hidden_WVehicleCharacteristicConstant
	}
	return 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetKConstantOfRecordingEquipment() int32 {
	if x != nil {
		return x.xxx_hidden_KConstantOfRecordingEquipment
	}
	return 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetLTyreCircumferenceEighthsMm() int32 {
	if x != nil {
		return x.xxx_hidden_LTyreCircumferenceEighthsMm
	}
	return 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetTyreSize() *v1.StringValue {
	if x != nil {
		return x.xxx_hidden_TyreSize
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetAuthorisedSpeedKmh() int32 {
	if x != nil {
		return x.xxx_hidden_AuthorisedSpeedKmh
	}
	return 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetOldOdometerValueKm() int32 {
	if x != nil {
		return x.xxx_hidden_OldOdometerValueKm
	}
	return 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetNewOdometerValueKm() int32 {
	if x != nil {
		return x.xxx_hidden_NewOdometerValueKm
	}
	return 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetOldTimeValue() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_OldTimeValue
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetNewTimeValue() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_NewTimeValue
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) GetNextCalibrationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_NextCalibrationDate
	}
	return nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetPurpose(v v1.CalibrationPurpose) {
	x.xxx_hidden_Purpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 18)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetUnrecognizedPurpose(v int32) {
	x.xxx_hidden_UnrecognizedPurpose = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 18)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetWorkshopName(v *v1.StringValue) {
	x.xxx_hidden_WorkshopName = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetWorkshopAddress(v *v1.StringValue) {
	x.xxx_hidden_WorkshopAddress = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetWorkshopCardNumberAndGeneration(v *v1.FullCardNumberAndGeneration) {
	x.xxx_hidden_WorkshopCardNumberAndGeneration = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetWorkshopCardExpiryDate(v *v1.Date) {
	x.xxx_hidden_WorkshopCardExpiryDate = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetVin(v *v1.StringValue) {
	x.xxx_hidden_Vin = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetVehicleRegistration(v *v1.VehicleRegistrationIdentification) {
	x.xxx_hidden_VehicleRegistration = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetWVehicleCharacteristicConstant(v int32) {
	x.xxx_hidden_WVehicleCharacteristicConstant = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 18)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetKConstantOfRecordingEquipment(v int32) {
	x.xxx_hidden_KConstantOfRecordingEquipment = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 18)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetLTyreCircumferenceEighthsMm(v int32) {
	x.xxx_hidden_LTyreCircumferenceEighthsMm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 18)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetTyreSize(v *v1.StringValue) {
	x.xxx_hidden_TyreSize = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetAuthorisedSpeedKmh(v int32) {
	x.xxx_hidden_AuthorisedSpeedKmh = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 18)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetOldOdometerValueKm(v int32) {
	x.xxx_hidden_OldOdometerValueKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 13, 18)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetNewOdometerValueKm(v int32) {
	x.xxx_hidden_NewOdometerValueKm = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 18)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetOldTimeValue(v *timestamppb.Timestamp) {
	x.xxx_hidden_OldTimeValue = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetNewTimeValue(v *timestamppb.Timestamp) {
	x.xxx_hidden_NewTimeValue = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) SetNextCalibrationDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_NextCalibrationDate = v
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasUnrecognizedPurpose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasWorkshopName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopName != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasWorkshopAddress() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopAddress != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasWorkshopCardNumberAndGeneration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopCardNumberAndGeneration != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasWorkshopCardExpiryDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WorkshopCardExpiryDate != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasVin() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Vin != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasVehicleRegistration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VehicleRegistration != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasWVehicleCharacteristicConstant() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasKConstantOfRecordingEquipment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasLTyreCircumferenceEighthsMm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasTyreSize() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TyreSize != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasAuthorisedSpeedKmh() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasOldOdometerValueKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 13)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasNewOdometerValueKm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasOldTimeValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OldTimeValue != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasNewTimeValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NewTimeValue != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) HasNextCalibrationDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NextCalibrationDate != nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Purpose = v1.CalibrationPurpose_CALIBRATION_PURPOSE_UNSPECIFIED
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearUnrecognizedPurpose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UnrecognizedPurpose = 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearWorkshopName() {
	x.xxx_hidden_WorkshopName = nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearWorkshopAddress() {
	x.xxx_hidden_WorkshopAddress = nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearWorkshopCardNumberAndGeneration() {
	x.xxx_hidden_WorkshopCardNumberAndGeneration = nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearWorkshopCardExpiryDate() {
	x.xxx_hidden_WorkshopCardExpiryDate = nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearVin() {
	x.xxx_hidden_Vin = nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearVehicleRegistration() {
	x.xxx_hidden_VehicleRegistration = nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearWVehicleCharacteristicConstant() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_WVehicleCharacteristicConstant = 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearKConstantOfRecordingEquipment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_KConstantOfRecordingEquipment = 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearLTyreCircumferenceEighthsMm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_LTyreCircumferenceEighthsMm = 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearTyreSize() {
	x.xxx_hidden_TyreSize = nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearAuthorisedSpeedKmh() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_AuthorisedSpeedKmh = 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearOldOdometerValueKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 13)
	x.xxx_hidden_OldOdometerValueKm = 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearNewOdometerValueKm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_NewOdometerValueKm = 0
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearOldTimeValue() {
	x.xxx_hidden_OldTimeValue = nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearNewTimeValue() {
	x.xxx_hidden_NewTimeValue = nil
}

func (x *TechnicalDataGen2V2_CalibrationRecord) ClearNextCalibrationDate() {
	x.xxx_hidden_NextCalibrationDate = nil
}

type TechnicalDataGen2V2_CalibrationRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The purpose of the calibration.
	//
	// See Data Dictionary, Section 2.8, `CalibrationPurpose`.
	Purpose             *v1.CalibrationPurpose
	UnrecognizedPurpose *int32
	// The name of the workshop.
	//
	// See Data Dictionary, Section 2.99, `Name`.
	WorkshopName *v1.StringValue
	// The address of the workshop.
	//
	// See Data Dictionary, Section 2.2, `Address`.
	WorkshopAddress *v1.StringValue
	// The card number and generation of the workshop.
	//
	// See Data Dictionary, Section 2.74, `FullCardNumberAndGeneration`.
	WorkshopCardNumberAndGeneration *v1.FullCardNumberAndGeneration
	// The expiry date of the workshop card.
	//
	// See Data Dictionary, Section 2.57, `Datef`.
	WorkshopCardExpiryDate *v1.Date
	// The Vehicle Identification Number.
	//
	// See Data Dictionary, Section 2.164, `VehicleIdentificationNumber`.
	Vin *v1.StringValue
	// The vehicle registration identifier.
	//
	// See Data Dictionary, Section 2.166, `VehicleRegistrationIdentification`.
	VehicleRegistration *v1.VehicleRegistrationIdentification
	// The vehicle characteristic constant.
	//
	// See Data Dictionary, Section 2.239, `W-VehicleCharacteristicConstant`.
	WVehicleCharacteristicConstant *int32
	// The constant of the recording equipment.
	//
	// See Data Dictionary, Section 2.85, `K-ConstantOfRecordingEquipment`.
	KConstantOfRecordingEquipment *int32
	// The tyre circumference in 1/8ths of a mm.
	//
	// See Data Dictionary, Section 2.91, `L-TyreCircumference`.
	LTyreCircumferenceEighthsMm *int32
	// The tyre size designation.
	//
	// See Data Dictionary, Section 2.163, `TyreSize`.
	TyreSize *v1.StringValue
	// The authorised speed in km/h.
	//
	// See Data Dictionary, Section 2.156, `SpeedAuthorised`.
	AuthorisedSpeedKmh *int32
	// The odometer value before calibration in km.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	OldOdometerValueKm *int32
	// The odometer value after calibration in km.
	//
	// See Data Dictionary, Section 2.113, `OdometerShort`.
	NewOdometerValueKm *int32
	// The time value before calibration.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	OldTimeValue *timestamppb.Timestamp
	// The time value after calibration.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	NewTimeValue *timestamppb.Timestamp
	// The date of the next calibration.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	NextCalibrationDate *timestamppb.Timestamp
}

func (b0 TechnicalDataGen2V2_CalibrationRecord_builder) Build() *TechnicalDataGen2V2_CalibrationRecord {
	m0 := &TechnicalDataGen2V2_CalibrationRecord{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Purpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 18)
		x.xxx_hidden_Purpose = *b.Purpose
	}
	if b.UnrecognizedPurpose != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 18)
		x.xxx_hidden_UnrecognizedPurpose = *b.UnrecognizedPurpose
	}
	x.xxx_hidden_WorkshopName = b.WorkshopName
	x.xxx_hidden_WorkshopAddress = b.WorkshopAddress
	x.xxx_hidden_WorkshopCardNumberAndGeneration = b.WorkshopCardNumberAndGeneration
	x.xxx_hidden_WorkshopCardExpiryDate = b.WorkshopCardExpiryDate
	x.xxx_hidden_Vin = b.Vin
	x.xxx_hidden_VehicleRegistration = b.VehicleRegistration
	if b.WVehicleCharacteristicConstant != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 18)
		x.xxx_hidden_WVehicleCharacteristicConstant = *b.WVehicleCharacteristicConstant
	}
	if b.KConstantOfRecordingEquipment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 18)
		x.xxx_hidden_KConstantOfRecordingEquipment = *b.KConstantOfRecordingEquipment
	}
	if b.LTyreCircumferenceEighthsMm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 18)
		x.xxx_hidden_LTyreCircumferenceEighthsMm = *b.LTyreCircumferenceEighthsMm
	}
	x.xxx_hidden_TyreSize = b.TyreSize
	if b.AuthorisedSpeedKmh != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 18)
		x.xxx_hidden_AuthorisedSpeedKmh = *b.AuthorisedSpeedKmh
	}
	if b.OldOdometerValueKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 13, 18)
		x.xxx_hidden_OldOdometerValueKm = *b.OldOdometerValueKm
	}
	if b.NewOdometerValueKm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 18)
		x.xxx_hidden_NewOdometerValueKm = *b.NewOdometerValueKm
	}
	x.xxx_hidden_OldTimeValue = b.OldTimeValue
	x.xxx_hidden_NewTimeValue = b.NewTimeValue
	x.xxx_hidden_NextCalibrationDate = b.NextCalibrationDate
	return m0
}

// Represents a record of a card used in the VU.
//
// See Data Dictionary, Section 2.179, `VuCardRecord`.
type TechnicalDataGen2V2_CardRecord struct {
	state                               protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_CardNumberAndGeneration  *v1.FullCardNumberAndGeneration `protobuf:"bytes,1,opt,name=card_number_and_generation,json=cardNumberAndGeneration"`
	xxx_hidden_CardExtendedSerialNumber *v1.ExtendedSerialNumber        `protobuf:"bytes,2,opt,name=card_extended_serial_number,json=cardExtendedSerialNumber"`
	xxx_hidden_CardStructureVersion     *v1.CardStructureVersion        `protobuf:"bytes,3,opt,name=card_structure_version,json=cardStructureVersion"`
	xxx_hidden_DriverIdentification     *v1.DriverIdentification        `protobuf:"bytes,4,opt,name=driver_identification,json=driverIdentification"`
	xxx_hidden_OwnerIdentification      *v1.OwnerIdentification         `protobuf:"bytes,5,opt,name=owner_identification,json=ownerIdentification"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *TechnicalDataGen2V2_CardRecord) Reset() {
	*x = TechnicalDataGen2V2_CardRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalDataGen2V2_CardRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalDataGen2V2_CardRecord) ProtoMessage() {}

func (x *TechnicalDataGen2V2_CardRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalDataGen2V2_CardRecord) GetCardNumberAndGeneration() *v1.FullCardNumberAndGeneration {
	if x != nil {
		return x.xxx_hidden_CardNumberAndGeneration
	}
	return nil
}

func (x *TechnicalDataGen2V2_CardRecord) GetCardExtendedSerialNumber() *v1.ExtendedSerialNumber {
	if x != nil {
		return x.xxx_hidden_CardExtendedSerialNumber
	}
	return nil
}

func (x *TechnicalDataGen2V2_CardRecord) GetCardStructureVersion() *v1.CardStructureVersion {
	if x != nil {
		return x.xxx_hidden_CardStructureVersion
	}
	return nil
}

func (x *TechnicalDataGen2V2_CardRecord) GetDriverIdentification() *v1.DriverIdentification {
	if x != nil {
		return x.xxx_hidden_DriverIdentification
	}
	return nil
}

func (x *TechnicalDataGen2V2_CardRecord) GetOwnerIdentification() *v1.OwnerIdentification {
	if x != nil {
		return x.xxx_hidden_OwnerIdentification
	}
	return nil
}

func (x *TechnicalDataGen2V2_CardRecord) SetCardNumberAndGeneration(v *v1.FullCardNumberAndGeneration) {
	x.xxx_hidden_CardNumberAndGeneration = v
}

func (x *TechnicalDataGen2V2_CardRecord) SetCardExtendedSerialNumber(v *v1.ExtendedSerialNumber) {
	x.xxx_hidden_CardExtendedSerialNumber = v
}

func (x *TechnicalDataGen2V2_CardRecord) SetCardStructureVersion(v *v1.CardStructureVersion) {
	x.xxx_hidden_CardStructureVersion = v
}

func (x *TechnicalDataGen2V2_CardRecord) SetDriverIdentification(v *v1.DriverIdentification) {
	x.xxx_hidden_DriverIdentification = v
}

func (x *TechnicalDataGen2V2_CardRecord) SetOwnerIdentification(v *v1.OwnerIdentification) {
	x.xxx_hidden_OwnerIdentification = v
}

func (x *TechnicalDataGen2V2_CardRecord) HasCardNumberAndGeneration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardNumberAndGeneration != nil
}

func (x *TechnicalDataGen2V2_CardRecord) HasCardExtendedSerialNumber() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardExtendedSerialNumber != nil
}

func (x *TechnicalDataGen2V2_CardRecord) HasCardStructureVersion() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CardStructureVersion != nil
}

func (x *TechnicalDataGen2V2_CardRecord) HasDriverIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DriverIdentification != nil
}

func (x *TechnicalDataGen2V2_CardRecord) HasOwnerIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OwnerIdentification != nil
}

func (x *TechnicalDataGen2V2_CardRecord) ClearCardNumberAndGeneration() {
	x.xxx_hidden_CardNumberAndGeneration = nil
}

func (x *TechnicalDataGen2V2_CardRecord) ClearCardExtendedSerialNumber() {
	x.xxx_hidden_CardExtendedSerialNumber = nil
}

func (x *TechnicalDataGen2V2_CardRecord) ClearCardStructureVersion() {
	x.xxx_hidden_CardStructureVersion = nil
}

func (x *TechnicalDataGen2V2_CardRecord) ClearDriverIdentification() {
	x.xxx_hidden_DriverIdentification = nil
}

func (x *TechnicalDataGen2V2_CardRecord) ClearOwnerIdentification() {
	x.xxx_hidden_OwnerIdentification = nil
}

type TechnicalDataGen2V2_CardRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The full card number and generation of the card used.
	//
	// See Data Dictionary, Section 2.74.
	CardNumberAndGeneration *v1.FullCardNumberAndGeneration
	// The extended serial number of the card.
	//
	// See Data Dictionary, Section 2.72.
	CardExtendedSerialNumber *v1.ExtendedSerialNumber
	// The structure version of the card.
	//
	// See Data Dictionary, Section 2.36.
	CardStructureVersion *v1.CardStructureVersion
	// The card number identifier (CHOICE between driver and owner).
	//
	// See Data Dictionary, Section 2.26.
	DriverIdentification *v1.DriverIdentification
	OwnerIdentification  *v1.OwnerIdentification
}

func (b0 TechnicalDataGen2V2_CardRecord_builder) Build() *TechnicalDataGen2V2_CardRecord {
	m0 := &TechnicalDataGen2V2_CardRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CardNumberAndGeneration = b.CardNumberAndGeneration
	x.xxx_hidden_CardExtendedSerialNumber = b.CardExtendedSerialNumber
	x.xxx_hidden_CardStructureVersion = b.CardStructureVersion
	x.xxx_hidden_DriverIdentification = b.DriverIdentification
	x.xxx_hidden_OwnerIdentification = b.OwnerIdentification
	return m0
}

// Represents a record of ITS consent status for a card (Gen2 only).
//
// See Data Dictionary, Section 2.207, `VuITSConsentRecord`.
type TechnicalDataGen2V2_ItsConsentRecord struct {
	state                                  protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_FullCardNumberAndGeneration *v1.FullCardNumberAndGeneration `protobuf:"bytes,1,opt,name=full_card_number_and_generation,json=fullCardNumberAndGeneration"`
	xxx_hidden_ConsentStatus               bool                            `protobuf:"varint,2,opt,name=consent_status,json=consentStatus"`
	XXX_raceDetectHookData                 protoimpl.RaceDetectHookData
	XXX_presence                           [1]uint32
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) Reset() {
	*x = TechnicalDataGen2V2_ItsConsentRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalDataGen2V2_ItsConsentRecord) ProtoMessage() {}

func (x *TechnicalDataGen2V2_ItsConsentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) GetFullCardNumberAndGeneration() *v1.FullCardNumberAndGeneration {
	if x != nil {
		return x.xxx_hidden_FullCardNumberAndGeneration
	}
	return nil
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) GetConsentStatus() bool {
	if x != nil {
		return x.xxx_hidden_ConsentStatus
	}
	return false
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) SetFullCardNumberAndGeneration(v *v1.FullCardNumberAndGeneration) {
	x.xxx_hidden_FullCardNumberAndGeneration = v
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) SetConsentStatus(v bool) {
	x.xxx_hidden_ConsentStatus = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) HasFullCardNumberAndGeneration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FullCardNumberAndGeneration != nil
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) HasConsentStatus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) ClearFullCardNumberAndGeneration() {
	x.xxx_hidden_FullCardNumberAndGeneration = nil
}

func (x *TechnicalDataGen2V2_ItsConsentRecord) ClearConsentStatus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ConsentStatus = false
}

type TechnicalDataGen2V2_ItsConsentRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The full card number and generation of the card holder.
	FullCardNumberAndGeneration *v1.FullCardNumberAndGeneration
	// The consent status for ITS data provision.
	ConsentStatus *bool
}

func (b0 TechnicalDataGen2V2_ItsConsentRecord_builder) Build() *TechnicalDataGen2V2_ItsConsentRecord {
	m0 := &TechnicalDataGen2V2_ItsConsentRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FullCardNumberAndGeneration = b.FullCardNumberAndGeneration
	if b.ConsentStatus != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_ConsentStatus = *b.ConsentStatus
	}
	return m0
}

// Represents a record of a power supply interruption (Gen2 V2 only).
//
// See Data Dictionary, Section 2.240, `VuPowerSupplyInterruptionRecord`.
type TechnicalDataGen2V2_PowerSupplyInterruptionRecord struct {
	state                                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Timestamp                  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp"`
	xxx_hidden_CardSlotNumber             v1.CardSlotNumber      `protobuf:"varint,2,opt,name=card_slot_number,json=cardSlotNumber,enum=wayplatform.connect.tachograph.dd.v1.CardSlotNumber"`
	xxx_hidden_UnrecognizedCardSlotNumber int32                  `protobuf:"varint,3,opt,name=unrecognized_card_slot_number,json=unrecognizedCardSlotNumber"`
	XXX_raceDetectHookData                protoimpl.RaceDetectHookData
	XXX_presence                          [1]uint32
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) Reset() {
	*x = TechnicalDataGen2V2_PowerSupplyInterruptionRecord{}
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalDataGen2V2_PowerSupplyInterruptionRecord) ProtoMessage() {}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) GetCardSlotNumber() v1.CardSlotNumber {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_CardSlotNumber
		}
	}
	return v1.CardSlotNumber(0)
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) GetUnrecognizedCardSlotNumber() int32 {
	if x != nil {
		return x.xxx_hidden_UnrecognizedCardSlotNumber
	}
	return 0
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) SetCardSlotNumber(v v1.CardSlotNumber) {
	x.xxx_hidden_CardSlotNumber = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) SetUnrecognizedCardSlotNumber(v int32) {
	x.xxx_hidden_UnrecognizedCardSlotNumber = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) HasCardSlotNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) HasUnrecognizedCardSlotNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) ClearCardSlotNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardSlotNumber = v1.CardSlotNumber_CARD_SLOT_NUMBER_UNSPECIFIED
}

func (x *TechnicalDataGen2V2_PowerSupplyInterruptionRecord) ClearUnrecognizedCardSlotNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_UnrecognizedCardSlotNumber = 0
}

type TechnicalDataGen2V2_PowerSupplyInterruptionRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The timestamp of the interruption.
	//
	// See Data Dictionary, Section 2.162, `TimeReal`.
	Timestamp *timestamppb.Timestamp
	// The slot number of the card affected.
	//
	// See Data Dictionary, Section 2.33, `CardSlotNumber`.
	CardSlotNumber             *v1.CardSlotNumber
	UnrecognizedCardSlotNumber *int32
}

func (b0 TechnicalDataGen2V2_PowerSupplyInterruptionRecord_builder) Build() *TechnicalDataGen2V2_PowerSupplyInterruptionRecord {
	m0 := &TechnicalDataGen2V2_PowerSupplyInterruptionRecord{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.CardSlotNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_CardSlotNumber = *b.CardSlotNumber
	}
	if b.UnrecognizedCardSlotNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_UnrecognizedCardSlotNumber = *b.UnrecognizedCardSlotNumber
	}
	return m0
}

var File_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_rawDesc = "" +
	"\n" +
	"Awayplatform/connect/tachograph/vu/v1/technical_data_gen2_v2.proto\x12$wayplatform.connect.tachograph.vu.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a>wayplatform/connect/tachograph/dd/v1/calibration_purpose.proto\x1a;wayplatform/connect/tachograph/dd/v1/card_slot_number.proto\x1aAwayplatform/connect/tachograph/dd/v1/card_structure_version.proto\x1a/wayplatform/connect/tachograph/dd/v1/date.proto\x1a@wayplatform/connect/tachograph/dd/v1/driver_identification.proto\x1aAwayplatform/connect/tachograph/dd/v1/extended_serial_number.proto\x1aJwayplatform/connect/tachograph/dd/v1/full_card_number_and_generation.proto\x1a?wayplatform/connect/tachograph/dd/v1/owner_identification.proto\x1aBwayplatform/connect/tachograph/dd/v1/software_identification.proto\x1a7wayplatform/connect/tachograph/dd/v1/string_value.proto\x1aNwayplatform/connect/tachograph/dd/v1/vehicle_registration_identification.proto\"\xbd$\n" +
	"\x13TechnicalDataGen2V2\x12w\n" +
	"\x11vu_identification\x18\x01 \x01(\v2J.wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentificationR\x10vuIdentification\x12|\n" +
	"\x13calibration_records\x18\x02 \x03(\v2K.wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecordR\x12calibrationRecords\x12m\n" +
	"\x0epaired_sensors\x18\x03 \x03(\v2F.wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PairedSensorR\rpairedSensors\x12}\n" +
	"\x17coupled_gnss_facilities\x18\x04 \x03(\v2E.wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CoupledGnssR\x15coupledGnssFacilities\x12g\n" +
	"\fcard_records\x18\x05 \x03(\v2D.wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CardRecordR\vcardRecords\x12z\n" +
	"\x13its_consent_records\x18\x06 \x03(\v2J.wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.ItsConsentRecordR\x11itsConsentRecords\x12\x95\x01\n" +
	"\x1apower_supply_interruptions\x18\a \x03(\v2W.wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PowerSupplyInterruptionRecordR\x18powerSupplyInterruptions\x12\x1c\n" +
	"\tsignature\x18\b \x01(\fR\tsignature\x12\x19\n" +
	"\braw_data\x18\t \x01(\fR\arawData\x1a\xab\x05\n" +
	"\x10VuIdentification\x12^\n" +
	"\x11manufacturer_name\x18\x01 \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\x10manufacturerName\x12d\n" +
	"\x14manufacturer_address\x18\x02 \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\x13manufacturerAddress\x12R\n" +
	"\vpart_number\x18\x03 \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\n" +
	"partNumber\x12_\n" +
	"\rserial_number\x18\x04 \x01(\v2:.wayplatform.connect.tachograph.dd.v1.ExtendedSerialNumberR\fserialNumber\x12u\n" +
	"\x17software_identification\x18\x05 \x01(\v2<.wayplatform.connect.tachograph.dd.v1.SoftwareIdentificationR\x16softwareIdentification\x12I\n" +
	"\x12manufacturing_date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x11manufacturingDate\x12Z\n" +
	"\x0fapproval_number\x18\a \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\x0eapprovalNumber\x1a\x8a\x02\n" +
	"\fPairedSensor\x12_\n" +
	"\rserial_number\x18\x01 \x01(\v2:.wayplatform.connect.tachograph.dd.v1.ExtendedSerialNumberR\fserialNumber\x12Z\n" +
	"\x0fapproval_number\x18\x02 \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\x0eapprovalNumber\x12=\n" +
	"\fpairing_date\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\vpairingDate\x1a\x8b\x02\n" +
	"\vCoupledGnss\x12_\n" +
	"\rserial_number\x18\x01 \x01(\v2:.wayplatform.connect.tachograph.dd.v1.ExtendedSerialNumberR\fserialNumber\x12Z\n" +
	"\x0fapproval_number\x18\x02 \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\x0eapprovalNumber\x12?\n" +
	"\rcoupling_date\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fcouplingDate\x1a\xa1\v\n" +
	"\x11CalibrationRecord\x12R\n" +
	"\apurpose\x18\x01 \x01(\x0e28.wayplatform.connect.tachograph.dd.v1.CalibrationPurposeR\apurpose\x121\n" +
	"\x14unrecognized_purpose\x18\x02 \x01(\x05R\x13unrecognizedPurpose\x12V\n" +
	"\rworkshop_name\x18\x03 \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\fworkshopName\x12\\\n" +
	"\x10workshop_address\x18\x04 \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\x0fworkshopAddress\x12\x8f\x01\n" +
	"#workshop_card_number_and_generation\x18\x05 \x01(\v2A.wayplatform.connect.tachograph.dd.v1.FullCardNumberAndGenerationR\x1fworkshopCardNumberAndGeneration\x12e\n" +
	"\x19workshop_card_expiry_date\x18\x06 \x01(\v2*.wayplatform.connect.tachograph.dd.v1.DateR\x16workshopCardExpiryDate\x12C\n" +
	"\x03vin\x18\a \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\x03vin\x12z\n" +
	"\x14vehicle_registration\x18\b \x01(\v2G.wayplatform.connect.tachograph.dd.v1.VehicleRegistrationIdentificationR\x13vehicleRegistration\x12I\n" +
	"!w_vehicle_characteristic_constant\x18\t \x01(\x05R\x1ewVehicleCharacteristicConstant\x12H\n" +
	"!k_constant_of_recording_equipment\x18\n" +
	" \x01(\x05R\x1dkConstantOfRecordingEquipment\x12D\n" +
	"\x1fl_tyre_circumference_eighths_mm\x18\v \x01(\x05R\x1blTyreCircumferenceEighthsMm\x12N\n" +
	"\ttyre_size\x18\f \x01(\v21.wayplatform.connect.tachograph.dd.v1.StringValueR\btyreSize\x120\n" +
	"\x14authorised_speed_kmh\x18\r \x01(\x05R\x12authorisedSpeedKmh\x121\n" +
	"\x15old_odometer_value_km\x18\x0e \x01(\x05R\x12oldOdometerValueKm\x121\n" +
	"\x15new_odometer_value_km\x18\x0f \x01(\x05R\x12newOdometerValueKm\x12@\n" +
	"\x0eold_time_value\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\foldTimeValue\x12@\n" +
	"\x0enew_time_value\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\fnewTimeValue\x12N\n" +
	"\x15next_calibration_date\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampR\x13nextCalibrationDate\x1a\xd8\x04\n" +
	"\n" +
	"CardRecord\x12~\n" +
	"\x1acard_number_and_generation\x18\x01 \x01(\v2A.wayplatform.connect.tachograph.dd.v1.FullCardNumberAndGenerationR\x17cardNumberAndGeneration\x12y\n" +
	"\x1bcard_extended_serial_number\x18\x02 \x01(\v2:.wayplatform.connect.tachograph.dd.v1.ExtendedSerialNumberR\x18cardExtendedSerialNumber\x12p\n" +
	"\x16card_structure_version\x18\x03 \x01(\v2:.wayplatform.connect.tachograph.dd.v1.CardStructureVersionR\x14cardStructureVersion\x12o\n" +
	"\x15driver_identification\x18\x04 \x01(\v2:.wayplatform.connect.tachograph.dd.v1.DriverIdentificationR\x14driverIdentification\x12l\n" +
	"\x14owner_identification\x18\x05 \x01(\v29.wayplatform.connect.tachograph.dd.v1.OwnerIdentificationR\x13ownerIdentification\x1a\xc3\x01\n" +
	"\x10ItsConsentRecord\x12\x87\x01\n" +
	"\x1ffull_card_number_and_generation\x18\x01 \x01(\v2A.wayplatform.connect.tachograph.dd.v1.FullCardNumberAndGenerationR\x1bfullCardNumberAndGeneration\x12%\n" +
	"\x0econsent_status\x18\x02 \x01(\bR\rconsentStatus\x1a\xfc\x01\n" +
	"\x1dPowerSupplyInterruptionRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12^\n" +
	"\x10card_slot_number\x18\x02 \x01(\x0e24.wayplatform.connect.tachograph.dd.v1.CardSlotNumberR\x0ecardSlotNumber\x12A\n" +
	"\x1dunrecognized_card_slot_number\x18\x03 \x01(\x05R\x1aunrecognizedCardSlotNumberB\xd7\x02\n" +
	"(com.wayplatform.connect.tachograph.vu.v1B\x18TechnicalDataGen2V2ProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/vu/v1;vuv1\xa2\x02\x04WCTV\xaa\x02$Wayplatform.Connect.Tachograph.Vu.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Vu\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Vu\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Vu::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_goTypes = []any{
	(*TechnicalDataGen2V2)(nil),                               // 0: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2
	(*TechnicalDataGen2V2_VuIdentification)(nil),              // 1: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentification
	(*TechnicalDataGen2V2_PairedSensor)(nil),                  // 2: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PairedSensor
	(*TechnicalDataGen2V2_CoupledGnss)(nil),                   // 3: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CoupledGnss
	(*TechnicalDataGen2V2_CalibrationRecord)(nil),             // 4: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord
	(*TechnicalDataGen2V2_CardRecord)(nil),                    // 5: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CardRecord
	(*TechnicalDataGen2V2_ItsConsentRecord)(nil),              // 6: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.ItsConsentRecord
	(*TechnicalDataGen2V2_PowerSupplyInterruptionRecord)(nil), // 7: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PowerSupplyInterruptionRecord
	(*v1.StringValue)(nil),                                    // 8: wayplatform.connect.tachograph.dd.v1.StringValue
	(*v1.ExtendedSerialNumber)(nil),                           // 9: wayplatform.connect.tachograph.dd.v1.ExtendedSerialNumber
	(*v1.SoftwareIdentification)(nil),                         // 10: wayplatform.connect.tachograph.dd.v1.SoftwareIdentification
	(*timestamppb.Timestamp)(nil),                             // 11: google.protobuf.Timestamp
	(v1.CalibrationPurpose)(0),                                // 12: wayplatform.connect.tachograph.dd.v1.CalibrationPurpose
	(*v1.FullCardNumberAndGeneration)(nil),                    // 13: wayplatform.connect.tachograph.dd.v1.FullCardNumberAndGeneration
	(*v1.Date)(nil),                                           // 14: wayplatform.connect.tachograph.dd.v1.Date
	(*v1.VehicleRegistrationIdentification)(nil),              // 15: wayplatform.connect.tachograph.dd.v1.VehicleRegistrationIdentification
	(*v1.CardStructureVersion)(nil),                           // 16: wayplatform.connect.tachograph.dd.v1.CardStructureVersion
	(*v1.DriverIdentification)(nil),                           // 17: wayplatform.connect.tachograph.dd.v1.DriverIdentification
	(*v1.OwnerIdentification)(nil),                            // 18: wayplatform.connect.tachograph.dd.v1.OwnerIdentification
	(v1.CardSlotNumber)(0),                                    // 19: wayplatform.connect.tachograph.dd.v1.CardSlotNumber
}
var file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_depIdxs = []int32{
	1,  // 0: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.vu_identification:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentification
	4,  // 1: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.calibration_records:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord
	2,  // 2: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.paired_sensors:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PairedSensor
	3,  // 3: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.coupled_gnss_facilities:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CoupledGnss
	5,  // 4: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.card_records:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CardRecord
	6,  // 5: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.its_consent_records:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.ItsConsentRecord
	7,  // 6: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.power_supply_interruptions:type_name -> wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PowerSupplyInterruptionRecord
	8,  // 7: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentification.manufacturer_name:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	8,  // 8: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentification.manufacturer_address:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	8,  // 9: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentification.part_number:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	9,  // 10: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentification.serial_number:type_name -> wayplatform.connect.tachograph.dd.v1.ExtendedSerialNumber
	10, // 11: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentification.software_identification:type_name -> wayplatform.connect.tachograph.dd.v1.SoftwareIdentification
	11, // 12: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentification.manufacturing_date:type_name -> google.protobuf.Timestamp
	8,  // 13: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.VuIdentification.approval_number:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	9,  // 14: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PairedSensor.serial_number:type_name -> wayplatform.connect.tachograph.dd.v1.ExtendedSerialNumber
	8,  // 15: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PairedSensor.approval_number:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	11, // 16: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PairedSensor.pairing_date:type_name -> google.protobuf.Timestamp
	9,  // 17: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CoupledGnss.serial_number:type_name -> wayplatform.connect.tachograph.dd.v1.ExtendedSerialNumber
	8,  // 18: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CoupledGnss.approval_number:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	11, // 19: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CoupledGnss.coupling_date:type_name -> google.protobuf.Timestamp
	12, // 20: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.purpose:type_name -> wayplatform.connect.tachograph.dd.v1.CalibrationPurpose
	8,  // 21: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.workshop_name:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	8,  // 22: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.workshop_address:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	13, // 23: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.workshop_card_number_and_generation:type_name -> wayplatform.connect.tachograph.dd.v1.FullCardNumberAndGeneration
	14, // 24: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.workshop_card_expiry_date:type_name -> wayplatform.connect.tachograph.dd.v1.Date
	8,  // 25: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.vin:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	15, // 26: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.vehicle_registration:type_name -> wayplatform.connect.tachograph.dd.v1.VehicleRegistrationIdentification
	8,  // 27: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.tyre_size:type_name -> wayplatform.connect.tachograph.dd.v1.StringValue
	11, // 28: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.old_time_value:type_name -> google.protobuf.Timestamp
	11, // 29: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.new_time_value:type_name -> google.protobuf.Timestamp
	11, // 30: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CalibrationRecord.next_calibration_date:type_name -> google.protobuf.Timestamp
	13, // 31: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CardRecord.card_number_and_generation:type_name -> wayplatform.connect.tachograph.dd.v1.FullCardNumberAndGeneration
	9,  // 32: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CardRecord.card_extended_serial_number:type_name -> wayplatform.connect.tachograph.dd.v1.ExtendedSerialNumber
	16, // 33: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CardRecord.card_structure_version:type_name -> wayplatform.connect.tachograph.dd.v1.CardStructureVersion
	17, // 34: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CardRecord.driver_identification:type_name -> wayplatform.connect.tachograph.dd.v1.DriverIdentification
	18, // 35: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.CardRecord.owner_identification:type_name -> wayplatform.connect.tachograph.dd.v1.OwnerIdentification
	13, // 36: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.ItsConsentRecord.full_card_number_and_generation:type_name -> wayplatform.connect.tachograph.dd.v1.FullCardNumberAndGeneration
	11, // 37: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PowerSupplyInterruptionRecord.timestamp:type_name -> google.protobuf.Timestamp
	19, // 38: wayplatform.connect.tachograph.vu.v1.TechnicalDataGen2V2.PowerSupplyInterruptionRecord.card_slot_number:type_name -> wayplatform.connect.tachograph.dd.v1.CardSlotNumber
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_init() }
func file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_init() {
	if File_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_rawDesc), len(file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto = out.File
	file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_goTypes = nil
	file_wayplatform_connect_tachograph_vu_v1_technical_data_gen2_v2_proto_depIdxs = nil
}
