// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/dd/v1/control_type.proto

package ddv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the activities carried out during a control, decoded from a bitmask.
//
// This message preserves the original raw byte for round-trip data fidelity
// while also providing convenient boolean fields for ease of use by consumers.
//
// See Data Dictionary, Section 2.53.
//
// ASN.1 Definition:
//
//	ControlType ::= OCTET STRING (SIZE(1))
//
// The byte is a bitmask with the following structure: 'cvpdexxx'B
// - 'c': card downloading
// - 'v': VU downloading
// - 'p': printing
// - 'd': display
// - 'e': roadside calibration checking (Gen2+)
// - 'xxx': RFU
type ControlType struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_RawValue            []byte                 `protobuf:"bytes,6,opt,name=raw_value,json=rawValue"`
	xxx_hidden_CardDownloading     bool                   `protobuf:"varint,1,opt,name=card_downloading,json=cardDownloading"`
	xxx_hidden_VuDownloading       bool                   `protobuf:"varint,2,opt,name=vu_downloading,json=vuDownloading"`
	xxx_hidden_Printing            bool                   `protobuf:"varint,3,opt,name=printing"`
	xxx_hidden_Display             bool                   `protobuf:"varint,4,opt,name=display"`
	xxx_hidden_CalibrationChecking bool                   `protobuf:"varint,5,opt,name=calibration_checking,json=calibrationChecking"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *ControlType) Reset() {
	*x = ControlType{}
	mi := &file_wayplatform_connect_tachograph_dd_v1_control_type_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlType) ProtoMessage() {}

func (x *ControlType) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_dd_v1_control_type_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ControlType) GetRawValue() []byte {
	if x != nil {
		return x.xxx_hidden_RawValue
	}
	return nil
}

func (x *ControlType) GetCardDownloading() bool {
	if x != nil {
		return x.xxx_hidden_CardDownloading
	}
	return false
}

func (x *ControlType) GetVuDownloading() bool {
	if x != nil {
		return x.xxx_hidden_VuDownloading
	}
	return false
}

func (x *ControlType) GetPrinting() bool {
	if x != nil {
		return x.xxx_hidden_Printing
	}
	return false
}

func (x *ControlType) GetDisplay() bool {
	if x != nil {
		return x.xxx_hidden_Display
	}
	return false
}

func (x *ControlType) GetCalibrationChecking() bool {
	if x != nil {
		return x.xxx_hidden_CalibrationChecking
	}
	return false
}

func (x *ControlType) SetRawValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RawValue = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *ControlType) SetCardDownloading(v bool) {
	x.xxx_hidden_CardDownloading = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *ControlType) SetVuDownloading(v bool) {
	x.xxx_hidden_VuDownloading = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *ControlType) SetPrinting(v bool) {
	x.xxx_hidden_Printing = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *ControlType) SetDisplay(v bool) {
	x.xxx_hidden_Display = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *ControlType) SetCalibrationChecking(v bool) {
	x.xxx_hidden_CalibrationChecking = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *ControlType) HasRawValue() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ControlType) HasCardDownloading() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ControlType) HasVuDownloading() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ControlType) HasPrinting() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ControlType) HasDisplay() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ControlType) HasCalibrationChecking() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ControlType) ClearRawValue() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_RawValue = nil
}

func (x *ControlType) ClearCardDownloading() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardDownloading = false
}

func (x *ControlType) ClearVuDownloading() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_VuDownloading = false
}

func (x *ControlType) ClearPrinting() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Printing = false
}

func (x *ControlType) ClearDisplay() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Display = false
}

func (x *ControlType) ClearCalibrationChecking() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_CalibrationChecking = false
}

type ControlType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The raw, original byte representing the bitmask. This field is the source
	// of truth and should be used for any serialization operations to ensure
	// perfect data fidelity, including the preservation of reserved bits.
	RawValue []byte
	// Indicates if the card was downloaded during the control (bit 'c').
	// This is a convenience field derived from `raw_value`.
	CardDownloading *bool
	// Indicates if the VU was downloaded during the control (bit 'v').
	// This is a convenience field derived from `raw_value`.
	VuDownloading *bool
	// Indicates if a printout was made during the control (bit 'p').
	// This is a convenience field derived from `raw_value`.
	Printing *bool
	// Indicates if the display was used during the control (bit 'd').
	// This is a convenience field derived from `raw_value`.
	Display *bool
	// Indicates if calibration parameters were checked (Gen2+ only) (bit 'e').
	// This is a convenience field derived from `raw_value`.
	CalibrationChecking *bool
}

func (b0 ControlType_builder) Build() *ControlType {
	m0 := &ControlType{}
	b, x := &b0, m0
	_, _ = b, x
	if b.RawValue != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_RawValue = b.RawValue
	}
	if b.CardDownloading != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_CardDownloading = *b.CardDownloading
	}
	if b.VuDownloading != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_VuDownloading = *b.VuDownloading
	}
	if b.Printing != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_Printing = *b.Printing
	}
	if b.Display != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_Display = *b.Display
	}
	if b.CalibrationChecking != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_CalibrationChecking = *b.CalibrationChecking
	}
	return m0
}

var File_wayplatform_connect_tachograph_dd_v1_control_type_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_dd_v1_control_type_proto_rawDesc = "" +
	"\n" +
	"7wayplatform/connect/tachograph/dd/v1/control_type.proto\x12$wayplatform.connect.tachograph.dd.v1\"\xe5\x01\n" +
	"\vControlType\x12\x1b\n" +
	"\traw_value\x18\x06 \x01(\fR\brawValue\x12)\n" +
	"\x10card_downloading\x18\x01 \x01(\bR\x0fcardDownloading\x12%\n" +
	"\x0evu_downloading\x18\x02 \x01(\bR\rvuDownloading\x12\x1a\n" +
	"\bprinting\x18\x03 \x01(\bR\bprinting\x12\x18\n" +
	"\adisplay\x18\x04 \x01(\bR\adisplay\x121\n" +
	"\x14calibration_checking\x18\x05 \x01(\bR\x13calibrationCheckingB\xcf\x02\n" +
	"(com.wayplatform.connect.tachograph.dd.v1B\x10ControlTypeProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1;ddv1\xa2\x02\x04WCTD\xaa\x02$Wayplatform.Connect.Tachograph.Dd.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Dd\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Dd\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Dd::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_dd_v1_control_type_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_dd_v1_control_type_proto_goTypes = []any{
	(*ControlType)(nil), // 0: wayplatform.connect.tachograph.dd.v1.ControlType
}
var file_wayplatform_connect_tachograph_dd_v1_control_type_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_dd_v1_control_type_proto_init() }
func file_wayplatform_connect_tachograph_dd_v1_control_type_proto_init() {
	if File_wayplatform_connect_tachograph_dd_v1_control_type_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_dd_v1_control_type_proto_rawDesc), len(file_wayplatform_connect_tachograph_dd_v1_control_type_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_dd_v1_control_type_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_dd_v1_control_type_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_dd_v1_control_type_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_dd_v1_control_type_proto = out.File
	file_wayplatform_connect_tachograph_dd_v1_control_type_proto_goTypes = nil
	file_wayplatform_connect_tachograph_dd_v1_control_type_proto_depIdxs = nil
}
