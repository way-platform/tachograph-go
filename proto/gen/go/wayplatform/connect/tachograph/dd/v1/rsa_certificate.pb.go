// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/dd/v1/rsa_certificate.proto

package ddv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RsaCertificate represents an RSA-based certificate used in first-generation
// tachograph cards.
//
// This certificate type is defined in Appendix 11, Section 3.3 (PART A -
// FIRST-GENERATION TACHOGRAPH SYSTEM) of the EU regulation.
//
// The certificate is 194 bytes in length and uses a digital signature with
// partial recovery in accordance with ISO/IEC 9796-2.
//
// Structure (from Section 3.3.2):
//
//	X.C = X.CA.SK['6A' || Cr || Hash(Cc) || 'BC'] || Cn || X.CAR
//	- 128 bytes: Signature (Sign)
//	- 58 bytes:  Certificate remainder (Cn)
//	- 8 bytes:   Certificate Authority Reference (CAR)
//
// Certificate content (Cr || Cn = 164 bytes total):
//   - 1 byte:    Certificate Profile Identifier (CPI)
//   - 8 bytes:   Certificate Authority Reference (CAR)
//   - 7 bytes:   Certificate Holder Authorisation (CHA)
//   - 4 bytes:   End of Validity (EOV) as TimeReal, or 0xFFFFFFFF
//   - 8 bytes:   Certificate Holder Reference (CHR)
//   - 128 bytes: RSA modulus (n)
//   - 8 bytes:   RSA public exponent (e)
type RsaCertificate struct {
	state                                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CertificateHolderReference    uint64                 `protobuf:"varint,1,opt,name=certificate_holder_reference,json=certificateHolderReference"`
	xxx_hidden_CertificateAuthorityReference uint64                 `protobuf:"varint,2,opt,name=certificate_authority_reference,json=certificateAuthorityReference"`
	xxx_hidden_EndOfValidity                 *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_of_validity,json=endOfValidity"`
	xxx_hidden_RsaModulus                    []byte                 `protobuf:"bytes,4,opt,name=rsa_modulus,json=rsaModulus"`
	xxx_hidden_RsaExponent                   []byte                 `protobuf:"bytes,5,opt,name=rsa_exponent,json=rsaExponent"`
	xxx_hidden_RawData                       []byte                 `protobuf:"bytes,6,opt,name=raw_data,json=rawData"`
	XXX_raceDetectHookData                   protoimpl.RaceDetectHookData
	XXX_presence                             [1]uint32
	unknownFields                            protoimpl.UnknownFields
	sizeCache                                protoimpl.SizeCache
}

func (x *RsaCertificate) Reset() {
	*x = RsaCertificate{}
	mi := &file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RsaCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsaCertificate) ProtoMessage() {}

func (x *RsaCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RsaCertificate) GetCertificateHolderReference() uint64 {
	if x != nil {
		return x.xxx_hidden_CertificateHolderReference
	}
	return 0
}

func (x *RsaCertificate) GetCertificateAuthorityReference() uint64 {
	if x != nil {
		return x.xxx_hidden_CertificateAuthorityReference
	}
	return 0
}

func (x *RsaCertificate) GetEndOfValidity() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EndOfValidity
	}
	return nil
}

func (x *RsaCertificate) GetRsaModulus() []byte {
	if x != nil {
		return x.xxx_hidden_RsaModulus
	}
	return nil
}

func (x *RsaCertificate) GetRsaExponent() []byte {
	if x != nil {
		return x.xxx_hidden_RsaExponent
	}
	return nil
}

func (x *RsaCertificate) GetRawData() []byte {
	if x != nil {
		return x.xxx_hidden_RawData
	}
	return nil
}

func (x *RsaCertificate) SetCertificateHolderReference(v uint64) {
	x.xxx_hidden_CertificateHolderReference = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *RsaCertificate) SetCertificateAuthorityReference(v uint64) {
	x.xxx_hidden_CertificateAuthorityReference = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *RsaCertificate) SetEndOfValidity(v *timestamppb.Timestamp) {
	x.xxx_hidden_EndOfValidity = v
}

func (x *RsaCertificate) SetRsaModulus(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RsaModulus = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *RsaCertificate) SetRsaExponent(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RsaExponent = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *RsaCertificate) SetRawData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RawData = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *RsaCertificate) HasCertificateHolderReference() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *RsaCertificate) HasCertificateAuthorityReference() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *RsaCertificate) HasEndOfValidity() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EndOfValidity != nil
}

func (x *RsaCertificate) HasRsaModulus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *RsaCertificate) HasRsaExponent() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *RsaCertificate) HasRawData() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *RsaCertificate) ClearCertificateHolderReference() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CertificateHolderReference = 0
}

func (x *RsaCertificate) ClearCertificateAuthorityReference() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CertificateAuthorityReference = 0
}

func (x *RsaCertificate) ClearEndOfValidity() {
	x.xxx_hidden_EndOfValidity = nil
}

func (x *RsaCertificate) ClearRsaModulus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_RsaModulus = nil
}

func (x *RsaCertificate) ClearRsaExponent() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_RsaExponent = nil
}

func (x *RsaCertificate) ClearRawData() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_RawData = nil
}

type RsaCertificate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Certificate Holder Reference (CHR) - uniquely identifies the certificate
	// holder and serves as a Subject Key Identifier to reference the public key.
	CertificateHolderReference *uint64
	// Certificate Authority Reference (CAR) - identifies the certification
	// authority that issued this certificate.
	CertificateAuthorityReference *uint64
	// End of validity timestamp for this certificate.
	// May be set to 0xFFFFFFFF (2106-02-07 06:28:15 UTC) if no expiry.
	EndOfValidity *timestamppb.Timestamp
	// RSA public key modulus (n) - 128 bytes.
	RsaModulus []byte
	// RSA public key exponent (e) - 8 bytes.
	RsaExponent []byte
	// Raw certificate data as stored in the file - always 194 bytes.
	// This includes the signature, remainder, and CAR appended to the signature.
	RawData []byte
}

func (b0 RsaCertificate_builder) Build() *RsaCertificate {
	m0 := &RsaCertificate{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CertificateHolderReference != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_CertificateHolderReference = *b.CertificateHolderReference
	}
	if b.CertificateAuthorityReference != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_CertificateAuthorityReference = *b.CertificateAuthorityReference
	}
	x.xxx_hidden_EndOfValidity = b.EndOfValidity
	if b.RsaModulus != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_RsaModulus = b.RsaModulus
	}
	if b.RsaExponent != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_RsaExponent = b.RsaExponent
	}
	if b.RawData != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_RawData = b.RawData
	}
	return m0
}

var File_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_rawDesc = "" +
	"\n" +
	":wayplatform/connect/tachograph/dd/v1/rsa_certificate.proto\x12$wayplatform.connect.tachograph.dd.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbd\x02\n" +
	"\x0eRsaCertificate\x12@\n" +
	"\x1ccertificate_holder_reference\x18\x01 \x01(\x04R\x1acertificateHolderReference\x12F\n" +
	"\x1fcertificate_authority_reference\x18\x02 \x01(\x04R\x1dcertificateAuthorityReference\x12B\n" +
	"\x0fend_of_validity\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\rendOfValidity\x12\x1f\n" +
	"\vrsa_modulus\x18\x04 \x01(\fR\n" +
	"rsaModulus\x12!\n" +
	"\frsa_exponent\x18\x05 \x01(\fR\vrsaExponent\x12\x19\n" +
	"\braw_data\x18\x06 \x01(\fR\arawDataB\xd2\x02\n" +
	"(com.wayplatform.connect.tachograph.dd.v1B\x13RsaCertificateProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1;ddv1\xa2\x02\x04WCTD\xaa\x02$Wayplatform.Connect.Tachograph.Dd.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Dd\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Dd\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Dd::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_goTypes = []any{
	(*RsaCertificate)(nil),        // 0: wayplatform.connect.tachograph.dd.v1.RsaCertificate
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.dd.v1.RsaCertificate.end_of_validity:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_init() }
func file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_init() {
	if File_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_rawDesc), len(file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto = out.File
	file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_goTypes = nil
	file_wayplatform_connect_tachograph_dd_v1_rsa_certificate_proto_depIdxs = nil
}
