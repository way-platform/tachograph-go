// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/dd/v1/card_structure_version.proto

package ddv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the BCD-encoded card structure version.
//
// This message preserves the original raw byte representation for round-trip
// data fidelity while also providing convenient decoded integer fields for ease
// of use by consumers.
//
// See Data Dictionary, Section 2.36, `CardStructureVersion`.
//
// ASN.1 Definition:
//
//	CardStructureVersion ::= OCTET STRING (SIZE (2))
//
// The two bytes are BCD-encoded, representing major and minor versions,
// e.g., version '01.02' is coded as '0102'H.
type CardStructureVersion struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_RawVersion  []byte                 `protobuf:"bytes,3,opt,name=raw_version,json=rawVersion"`
	xxx_hidden_Major       int32                  `protobuf:"varint,1,opt,name=major"`
	xxx_hidden_Minor       int32                  `protobuf:"varint,2,opt,name=minor"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CardStructureVersion) Reset() {
	*x = CardStructureVersion{}
	mi := &file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardStructureVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardStructureVersion) ProtoMessage() {}

func (x *CardStructureVersion) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CardStructureVersion) GetRawVersion() []byte {
	if x != nil {
		return x.xxx_hidden_RawVersion
	}
	return nil
}

func (x *CardStructureVersion) GetMajor() int32 {
	if x != nil {
		return x.xxx_hidden_Major
	}
	return 0
}

func (x *CardStructureVersion) GetMinor() int32 {
	if x != nil {
		return x.xxx_hidden_Minor
	}
	return 0
}

func (x *CardStructureVersion) SetRawVersion(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RawVersion = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *CardStructureVersion) SetMajor(v int32) {
	x.xxx_hidden_Major = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *CardStructureVersion) SetMinor(v int32) {
	x.xxx_hidden_Minor = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *CardStructureVersion) HasRawVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CardStructureVersion) HasMajor() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CardStructureVersion) HasMinor() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CardStructureVersion) ClearRawVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_RawVersion = nil
}

func (x *CardStructureVersion) ClearMajor() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Major = 0
}

func (x *CardStructureVersion) ClearMinor() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Minor = 0
}

type CardStructureVersion_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The raw, original BCD-encoded bytes for the version. This field is the
	// source of truth and should be used for any serialization operations to ensure
	// perfect data fidelity.
	RawVersion []byte
	// The decoded major version number.
	// This is a convenience field derived from `raw_version`.
	Major *int32
	// The decoded minor version number.
	// This is a convenience field derived from `raw_version`.
	Minor *int32
}

func (b0 CardStructureVersion_builder) Build() *CardStructureVersion {
	m0 := &CardStructureVersion{}
	b, x := &b0, m0
	_, _ = b, x
	if b.RawVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_RawVersion = b.RawVersion
	}
	if b.Major != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Major = *b.Major
	}
	if b.Minor != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Minor = *b.Minor
	}
	return m0
}

var File_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_rawDesc = "" +
	"\n" +
	"Awayplatform/connect/tachograph/dd/v1/card_structure_version.proto\x12$wayplatform.connect.tachograph.dd.v1\"c\n" +
	"\x14CardStructureVersion\x12\x1f\n" +
	"\vraw_version\x18\x03 \x01(\fR\n" +
	"rawVersion\x12\x14\n" +
	"\x05major\x18\x01 \x01(\x05R\x05major\x12\x14\n" +
	"\x05minor\x18\x02 \x01(\x05R\x05minorB\xd8\x02\n" +
	"(com.wayplatform.connect.tachograph.dd.v1B\x19CardStructureVersionProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1;ddv1\xa2\x02\x04WCTD\xaa\x02$Wayplatform.Connect.Tachograph.Dd.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Dd\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Dd\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Dd::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_goTypes = []any{
	(*CardStructureVersion)(nil), // 0: wayplatform.connect.tachograph.dd.v1.CardStructureVersion
}
var file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_init() }
func file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_init() {
	if File_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_rawDesc), len(file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto = out.File
	file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_goTypes = nil
	file_wayplatform_connect_tachograph_dd_v1_card_structure_version_proto_depIdxs = nil
}
