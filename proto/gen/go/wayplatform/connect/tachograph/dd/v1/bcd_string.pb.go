// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/dd/v1/bcd_string.proto

package ddv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BcdString provides a canonical representation for Binary Coded Decimal (BCD)
// strings found in the tachograph regulations.
//
// The BCD format represents decimal digits in 4-bit nibbles, with each byte
// containing two decimal digits. The regulation specifies canonical encoding,
// making BCD strings fully deterministic from their numeric value and length.
//
// From Data Dictionary, Section 2.7:
//
//	"BCDString is applied for Binary Code Decimal (BCD) representation. This
//	 data type is used to represent one decimal digit in one semi octet (4
//	 bits). BCDString is based on the ISO/IEC 8824-1 'CharacterStringType'.
//
//	 BCDString uses an 'hstring' notation. The leftmost hexadecimal digit
//	 shall be the most significant semi octet of the first octet. To produce a
//	 multiple of octets, zero trailing semi octets shall be inserted, as
//	 needed, from the leftmost semi octet position in the first octet.
//
//	 Permitted digits are: 0, 1, .. 9."
//
// This specification makes encoding deterministic:
//   - Only digits 0-9 are permitted (no vendor-specific values)
//   - Padding uses zero nibbles (canonical, not 0xF or other values)
//   - All BCDString usages have explicit SIZE constraints (e.g.,
//     DailyPresenceCounter ::= BCDString(SIZE(2)))
//
// Therefore, perfect round-trip fidelity is achieved by storing only the
// numeric value and length, without needing to preserve raw bytes.
//
// See Data Dictionary, Section 2.7.
//
// ASN.1 Definition:
//
//	BCDString ::= CharacterStringType
type BcdString struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Value       int32                  `protobuf:"varint,1,opt,name=value"`
	xxx_hidden_Length      int32                  `protobuf:"varint,2,opt,name=length"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BcdString) Reset() {
	*x = BcdString{}
	mi := &file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BcdString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcdString) ProtoMessage() {}

func (x *BcdString) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BcdString) GetValue() int32 {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return 0
}

func (x *BcdString) GetLength() int32 {
	if x != nil {
		return x.xxx_hidden_Length
	}
	return 0
}

func (x *BcdString) SetValue(v int32) {
	x.xxx_hidden_Value = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *BcdString) SetLength(v int32) {
	x.xxx_hidden_Length = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *BcdString) HasValue() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BcdString) HasLength() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BcdString) ClearValue() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Value = 0
}

func (x *BcdString) ClearLength() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Length = 0
}

type BcdString_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The numeric value of the BCD string.
	Value *int32
	// The length in bytes as specified in the ASN.1 SIZE constraint.
	// For example, DailyPresenceCounter ::= BCDString(SIZE(2)) has length 2.
	Length *int32
}

func (b0 BcdString_builder) Build() *BcdString {
	m0 := &BcdString{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Value != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Value = *b.Value
	}
	if b.Length != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Length = *b.Length
	}
	return m0
}

var File_wayplatform_connect_tachograph_dd_v1_bcd_string_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_rawDesc = "" +
	"\n" +
	"5wayplatform/connect/tachograph/dd/v1/bcd_string.proto\x12$wayplatform.connect.tachograph.dd.v1\"9\n" +
	"\tBcdString\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\x12\x16\n" +
	"\x06length\x18\x02 \x01(\x05R\x06lengthB\xcd\x02\n" +
	"(com.wayplatform.connect.tachograph.dd.v1B\x0eBcdStringProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1;ddv1\xa2\x02\x04WCTD\xaa\x02$Wayplatform.Connect.Tachograph.Dd.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Dd\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Dd\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Dd::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_goTypes = []any{
	(*BcdString)(nil), // 0: wayplatform.connect.tachograph.dd.v1.BcdString
}
var file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_init() }
func file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_init() {
	if File_wayplatform_connect_tachograph_dd_v1_bcd_string_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_rawDesc), len(file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_dd_v1_bcd_string_proto = out.File
	file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_goTypes = nil
	file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_depIdxs = nil
}
