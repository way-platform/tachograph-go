// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/dd/v1/bcd_string.proto

package ddv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BcdString provides a canonical representation for Binary Coded Decimal (BCD)
// strings found in the tachograph regulations.
//
// The BCD format represents decimal digits in 4-bit nibbles. This type is
// necessary because a direct conversion to a standard integer type (like int32)
// can be lossy. While the numeric value might be preserved, the exact
// byte representation may not be, especially in cases involving non-canonical
// padding or other vendor-specific quirks.
//
// For example, the number 123 could be represented as `[0x01, 0x23]` by one
// system, but as `[0xF1, 0x23]` by another that uses 'F' as a padding nibble.
// Both decode to 123, but only storing the integer loses the original byte
// pattern.
//
// This message solves the problem by storing both the original raw bytes for
// perfect fidelity (essential for round-tripping and signature validation) and
// the decoded numeric value for ease of use.
//
// See Data Dictionary, Section 2.7.
//
// ASN.1 Definition:
//
//	BCDString ::= CharacterStringType
type BcdString struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_RawData     []byte                 `protobuf:"bytes,1,opt,name=raw_data,json=rawData"`
	xxx_hidden_Decoded     int32                  `protobuf:"varint,2,opt,name=decoded"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BcdString) Reset() {
	*x = BcdString{}
	mi := &file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BcdString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcdString) ProtoMessage() {}

func (x *BcdString) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BcdString) GetRawData() []byte {
	if x != nil {
		return x.xxx_hidden_RawData
	}
	return nil
}

func (x *BcdString) GetDecoded() int32 {
	if x != nil {
		return x.xxx_hidden_Decoded
	}
	return 0
}

func (x *BcdString) SetRawData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RawData = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *BcdString) SetDecoded(v int32) {
	x.xxx_hidden_Decoded = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *BcdString) HasRawData() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BcdString) HasDecoded() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BcdString) ClearRawData() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_RawData = nil
}

func (x *BcdString) ClearDecoded() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Decoded = 0
}

type BcdString_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The raw, original BCD-encoded bytes. This field is the source of truth
	// and should always be used when marshalling the data back to its binary
	// format.
	RawData []byte
	// The decoded numeric value of the BCD string. This field is provided for
	// consumer convenience and should be treated as a read-only, derived value.
	Decoded *int32
}

func (b0 BcdString_builder) Build() *BcdString {
	m0 := &BcdString{}
	b, x := &b0, m0
	_, _ = b, x
	if b.RawData != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_RawData = b.RawData
	}
	if b.Decoded != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Decoded = *b.Decoded
	}
	return m0
}

var File_wayplatform_connect_tachograph_dd_v1_bcd_string_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_rawDesc = "" +
	"\n" +
	"5wayplatform/connect/tachograph/dd/v1/bcd_string.proto\x12$wayplatform.connect.tachograph.dd.v1\"@\n" +
	"\tBcdString\x12\x19\n" +
	"\braw_data\x18\x01 \x01(\fR\arawData\x12\x18\n" +
	"\adecoded\x18\x02 \x01(\x05R\adecodedB\xcd\x02\n" +
	"(com.wayplatform.connect.tachograph.dd.v1B\x0eBcdStringProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1;ddv1\xa2\x02\x04WCTD\xaa\x02$Wayplatform.Connect.Tachograph.Dd.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Dd\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Dd\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Dd::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_goTypes = []any{
	(*BcdString)(nil), // 0: wayplatform.connect.tachograph.dd.v1.BcdString
}
var file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_init() }
func file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_init() {
	if File_wayplatform_connect_tachograph_dd_v1_bcd_string_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_rawDesc), len(file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_dd_v1_bcd_string_proto = out.File
	file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_goTypes = nil
	file_wayplatform_connect_tachograph_dd_v1_bcd_string_proto_depIdxs = nil
}
