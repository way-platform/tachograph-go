// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/dd/v1/full_card_number.proto

package ddv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Corresponds to the `FullCardNumber` data type in the Data Dictionary, Section 2.73.
//
// ASN.1 Specification:
//
//	FullCardNumber ::= SEQUENCE {
//	    cardType EquipmentType,
//	    cardIssuingMemberState NationNumeric,
//	    cardNumber CardNumber
//	}
//
//	CardNumber ::= CHOICE {
//	    driverIdentification SEQUENCE {
//	        driverIdentification IA5String(SIZE(14)),
//	        cardReplacementIndex CardReplacementIndex,
//	        cardRenewalIndex CardRenewalIndex
//	    },
//	    ownerIdentification SEQUENCE {
//	        ownerIdentification IA5String(SIZE(13)),
//	        cardConsecutiveIndex CardConsecutiveIndex,
//	        cardReplacementIndex CardReplacementIndex,
//	        cardRenewalIndex CardRenewalIndex
//	    }
//	}
type FullCardNumber struct {
	state                             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CardType               EquipmentType          `protobuf:"varint,1,opt,name=card_type,json=cardType,enum=wayplatform.connect.tachograph.dd.v1.EquipmentType"`
	xxx_hidden_CardIssuingMemberState NationNumeric          `protobuf:"varint,2,opt,name=card_issuing_member_state,json=cardIssuingMemberState,enum=wayplatform.connect.tachograph.dd.v1.NationNumeric"`
	xxx_hidden_DriverIdentification   *DriverIdentification  `protobuf:"bytes,3,opt,name=driver_identification,json=driverIdentification"`
	xxx_hidden_OwnerIdentification    *OwnerIdentification   `protobuf:"bytes,4,opt,name=owner_identification,json=ownerIdentification"`
	XXX_raceDetectHookData            protoimpl.RaceDetectHookData
	XXX_presence                      [1]uint32
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *FullCardNumber) Reset() {
	*x = FullCardNumber{}
	mi := &file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullCardNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullCardNumber) ProtoMessage() {}

func (x *FullCardNumber) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FullCardNumber) GetCardType() EquipmentType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_CardType
		}
	}
	return EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED
}

func (x *FullCardNumber) GetCardIssuingMemberState() NationNumeric {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_CardIssuingMemberState
		}
	}
	return NationNumeric_NATION_NUMERIC_UNSPECIFIED
}

func (x *FullCardNumber) GetDriverIdentification() *DriverIdentification {
	if x != nil {
		return x.xxx_hidden_DriverIdentification
	}
	return nil
}

func (x *FullCardNumber) GetOwnerIdentification() *OwnerIdentification {
	if x != nil {
		return x.xxx_hidden_OwnerIdentification
	}
	return nil
}

func (x *FullCardNumber) SetCardType(v EquipmentType) {
	x.xxx_hidden_CardType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *FullCardNumber) SetCardIssuingMemberState(v NationNumeric) {
	x.xxx_hidden_CardIssuingMemberState = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *FullCardNumber) SetDriverIdentification(v *DriverIdentification) {
	x.xxx_hidden_DriverIdentification = v
}

func (x *FullCardNumber) SetOwnerIdentification(v *OwnerIdentification) {
	x.xxx_hidden_OwnerIdentification = v
}

func (x *FullCardNumber) HasCardType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *FullCardNumber) HasCardIssuingMemberState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FullCardNumber) HasDriverIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DriverIdentification != nil
}

func (x *FullCardNumber) HasOwnerIdentification() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OwnerIdentification != nil
}

func (x *FullCardNumber) ClearCardType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CardType = EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED
}

func (x *FullCardNumber) ClearCardIssuingMemberState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CardIssuingMemberState = NationNumeric_NATION_NUMERIC_UNSPECIFIED
}

func (x *FullCardNumber) ClearDriverIdentification() {
	x.xxx_hidden_DriverIdentification = nil
}

func (x *FullCardNumber) ClearOwnerIdentification() {
	x.xxx_hidden_OwnerIdentification = nil
}

type FullCardNumber_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The type of the tachograph card. This field acts as the discriminant for the
	// `CardNumber` CHOICE, determining which of the fields below is populated.
	//
	// ASN.1 Specification:
	//
	//	EquipmentType ::= INTEGER (0..255)
	CardType *EquipmentType
	// The code of the Member State issuing the card.
	//
	// ASN.1 Specification:
	//
	//	NationNumeric ::= INTEGER(0..255)
	CardIssuingMemberState *NationNumeric
	// This field is part of the `CardNumber` CHOICE.
	// It is populated when `card_type` is `DRIVER_CARD`.
	DriverIdentification *DriverIdentification
	// This field is part of the `CardNumber` CHOICE.
	// It is populated when card_type is WORKSHOP_CARD, COMPANY_CARD, or CONTROL_CARD.
	OwnerIdentification *OwnerIdentification
}

func (b0 FullCardNumber_builder) Build() *FullCardNumber {
	m0 := &FullCardNumber{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CardType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_CardType = *b.CardType
	}
	if b.CardIssuingMemberState != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_CardIssuingMemberState = *b.CardIssuingMemberState
	}
	x.xxx_hidden_DriverIdentification = b.DriverIdentification
	x.xxx_hidden_OwnerIdentification = b.OwnerIdentification
	return m0
}

var File_wayplatform_connect_tachograph_dd_v1_full_card_number_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_rawDesc = "" +
	"\n" +
	";wayplatform/connect/tachograph/dd/v1/full_card_number.proto\x12$wayplatform.connect.tachograph.dd.v1\x1a@wayplatform/connect/tachograph/dd/v1/driver_identification.proto\x1a9wayplatform/connect/tachograph/dd/v1/equipment_type.proto\x1a9wayplatform/connect/tachograph/dd/v1/nation_numeric.proto\x1a?wayplatform/connect/tachograph/dd/v1/owner_identification.proto\x1a7wayplatform/connect/tachograph/dd/v1/string_value.proto\"\xb1\x03\n" +
	"\x0eFullCardNumber\x12P\n" +
	"\tcard_type\x18\x01 \x01(\x0e23.wayplatform.connect.tachograph.dd.v1.EquipmentTypeR\bcardType\x12n\n" +
	"\x19card_issuing_member_state\x18\x02 \x01(\x0e23.wayplatform.connect.tachograph.dd.v1.NationNumericR\x16cardIssuingMemberState\x12o\n" +
	"\x15driver_identification\x18\x03 \x01(\v2:.wayplatform.connect.tachograph.dd.v1.DriverIdentificationR\x14driverIdentification\x12l\n" +
	"\x14owner_identification\x18\x04 \x01(\v29.wayplatform.connect.tachograph.dd.v1.OwnerIdentificationR\x13ownerIdentificationB\xd2\x02\n" +
	"(com.wayplatform.connect.tachograph.dd.v1B\x13FullCardNumberProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1;ddv1\xa2\x02\x04WCTD\xaa\x02$Wayplatform.Connect.Tachograph.Dd.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Dd\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Dd\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Dd::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_goTypes = []any{
	(*FullCardNumber)(nil),       // 0: wayplatform.connect.tachograph.dd.v1.FullCardNumber
	(EquipmentType)(0),           // 1: wayplatform.connect.tachograph.dd.v1.EquipmentType
	(NationNumeric)(0),           // 2: wayplatform.connect.tachograph.dd.v1.NationNumeric
	(*DriverIdentification)(nil), // 3: wayplatform.connect.tachograph.dd.v1.DriverIdentification
	(*OwnerIdentification)(nil),  // 4: wayplatform.connect.tachograph.dd.v1.OwnerIdentification
}
var file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.dd.v1.FullCardNumber.card_type:type_name -> wayplatform.connect.tachograph.dd.v1.EquipmentType
	2, // 1: wayplatform.connect.tachograph.dd.v1.FullCardNumber.card_issuing_member_state:type_name -> wayplatform.connect.tachograph.dd.v1.NationNumeric
	3, // 2: wayplatform.connect.tachograph.dd.v1.FullCardNumber.driver_identification:type_name -> wayplatform.connect.tachograph.dd.v1.DriverIdentification
	4, // 3: wayplatform.connect.tachograph.dd.v1.FullCardNumber.owner_identification:type_name -> wayplatform.connect.tachograph.dd.v1.OwnerIdentification
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_init() }
func file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_init() {
	if File_wayplatform_connect_tachograph_dd_v1_full_card_number_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_dd_v1_driver_identification_proto_init()
	file_wayplatform_connect_tachograph_dd_v1_equipment_type_proto_init()
	file_wayplatform_connect_tachograph_dd_v1_nation_numeric_proto_init()
	file_wayplatform_connect_tachograph_dd_v1_owner_identification_proto_init()
	file_wayplatform_connect_tachograph_dd_v1_string_value_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_rawDesc), len(file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_dd_v1_full_card_number_proto = out.File
	file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_goTypes = nil
	file_wayplatform_connect_tachograph_dd_v1_full_card_number_proto_depIdxs = nil
}
