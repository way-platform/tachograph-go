// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/dd/v1/date.proto

package ddv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the `Datef` data type from the Data Dictionary, Section 2.57,
// renamed to `Date` for simplicity. This is a BCD-encoded date representation
// of the format `yyyymmdd`.
//
// ASN.1 Definition:
//
//	Datef ::= OCTET STRING (SIZE(4))
type Date struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Year        int32                  `protobuf:"varint,1,opt,name=year"`
	xxx_hidden_Month       int32                  `protobuf:"varint,2,opt,name=month"`
	xxx_hidden_Day         int32                  `protobuf:"varint,3,opt,name=day"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Date) Reset() {
	*x = Date{}
	mi := &file_wayplatform_connect_tachograph_dd_v1_date_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_dd_v1_date_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.xxx_hidden_Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.xxx_hidden_Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.xxx_hidden_Day
	}
	return 0
}

func (x *Date) SetYear(v int32) {
	x.xxx_hidden_Year = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *Date) SetMonth(v int32) {
	x.xxx_hidden_Month = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *Date) SetDay(v int32) {
	x.xxx_hidden_Day = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *Date) HasYear() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Date) HasMonth() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Date) HasDay() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Date) ClearYear() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Year = 0
}

func (x *Date) ClearMonth() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Month = 0
}

func (x *Date) ClearDay() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Day = 0
}

type Date_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The decoded year.
	// Decoded from the first two bytes of the BCD octet string.
	// Example: a value of 2023 is encoded as 0x20 0x23.
	Year *int32
	// The decoded month.
	// Decoded from the third byte of the BCD octet string.
	// Example: a value of 12 (December) is encoded as 0x12.
	Month *int32
	// The decoded day.
	// Decoded from the fourth byte of the BCD octet string.
	// Example: a value of 31 is encoded as 0x31.
	Day *int32
}

func (b0 Date_builder) Build() *Date {
	m0 := &Date{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Year != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Year = *b.Year
	}
	if b.Month != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Month = *b.Month
	}
	if b.Day != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Day = *b.Day
	}
	return m0
}

var File_wayplatform_connect_tachograph_dd_v1_date_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_dd_v1_date_proto_rawDesc = "" +
	"\n" +
	"/wayplatform/connect/tachograph/dd/v1/date.proto\x12$wayplatform.connect.tachograph.dd.v1\"B\n" +
	"\x04Date\x12\x12\n" +
	"\x04year\x18\x01 \x01(\x05R\x04year\x12\x14\n" +
	"\x05month\x18\x02 \x01(\x05R\x05month\x12\x10\n" +
	"\x03day\x18\x03 \x01(\x05R\x03dayB\xc8\x02\n" +
	"(com.wayplatform.connect.tachograph.dd.v1B\tDateProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1;ddv1\xa2\x02\x04WCTD\xaa\x02$Wayplatform.Connect.Tachograph.Dd.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Dd\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Dd\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Dd::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_dd_v1_date_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_dd_v1_date_proto_goTypes = []any{
	(*Date)(nil), // 0: wayplatform.connect.tachograph.dd.v1.Date
}
var file_wayplatform_connect_tachograph_dd_v1_date_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_dd_v1_date_proto_init() }
func file_wayplatform_connect_tachograph_dd_v1_date_proto_init() {
	if File_wayplatform_connect_tachograph_dd_v1_date_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_dd_v1_date_proto_rawDesc), len(file_wayplatform_connect_tachograph_dd_v1_date_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_dd_v1_date_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_dd_v1_date_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_dd_v1_date_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_dd_v1_date_proto = out.File
	file_wayplatform_connect_tachograph_dd_v1_date_proto_goTypes = nil
	file_wayplatform_connect_tachograph_dd_v1_date_proto_depIdxs = nil
}
