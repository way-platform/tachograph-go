// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/dd/v1/string_value.proto

package ddv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StringValue provides a canonical representation for various string types
// found in the tachograph regulations that have special encoding rules.
//
// Many ASN.1 types in the specification, such as `Name` (DD 2.99) and
// `Address` (DD 2.2), are defined as a `SEQUENCE` containing a numeric
// code page and an octet string. Other types, like `IA5String`, have a
// fixed encoding (ASCII) and may include padding.
//
// This message solves the problem of representing these types faithfully
// by storing both the original raw bytes and the corresponding encoding
// information. This ensures that data can be unmarshalled for use and
// then marshalled back to its exact original binary format without data loss.
type StringValue struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Encoding    Encoding               `protobuf:"varint,1,opt,name=encoding,enum=wayplatform.connect.tachograph.dd.v1.Encoding"`
	xxx_hidden_RawData     []byte                 `protobuf:"bytes,2,opt,name=raw_data,json=rawData"`
	xxx_hidden_Value       *string                `protobuf:"bytes,3,opt,name=value"`
	xxx_hidden_Length      uint32                 `protobuf:"varint,4,opt,name=length"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	mi := &file_wayplatform_connect_tachograph_dd_v1_string_value_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_dd_v1_string_value_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StringValue) GetEncoding() Encoding {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Encoding
		}
	}
	return Encoding_ENCODING_UNSPECIFIED
}

func (x *StringValue) GetRawData() []byte {
	if x != nil {
		return x.xxx_hidden_RawData
	}
	return nil
}

func (x *StringValue) GetValue() string {
	if x != nil {
		if x.xxx_hidden_Value != nil {
			return *x.xxx_hidden_Value
		}
		return ""
	}
	return ""
}

func (x *StringValue) GetLength() uint32 {
	if x != nil {
		return x.xxx_hidden_Length
	}
	return 0
}

func (x *StringValue) SetEncoding(v Encoding) {
	x.xxx_hidden_Encoding = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *StringValue) SetRawData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RawData = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *StringValue) SetValue(v string) {
	x.xxx_hidden_Value = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *StringValue) SetLength(v uint32) {
	x.xxx_hidden_Length = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *StringValue) HasEncoding() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *StringValue) HasRawData() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *StringValue) HasValue() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *StringValue) HasLength() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *StringValue) ClearEncoding() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Encoding = Encoding_ENCODING_UNSPECIFIED
}

func (x *StringValue) ClearRawData() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_RawData = nil
}

func (x *StringValue) ClearValue() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Value = nil
}

func (x *StringValue) ClearLength() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Length = 0
}

type StringValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The character encoding of the 'raw_data' bytes.
	Encoding *Encoding
	// The raw, original byte representation of the string as it appears in
	// the binary format.
	RawData []byte
	// A user-friendly, UTF-8 representation of the string, generated by
	// decoding and trimming the 'raw_data' bytes. This field is for display
	// and consumption purposes (e.g., in JSON) and SHOULD be ignored when
	// marshalling.
	Value *string
	// The serialized length of the string data (for fixed-length formats).
	//
	// For IA5String types (Encoding_IA5), this field is REQUIRED and specifies
	// the fixed length as defined in the specification (e.g.,
	// VehicleIdentificationNumber is SIZE(17)). When marshalling:
	// - If 'raw_data' is present and matches this length, it is used directly
	// - Otherwise, the 'value' string is padded with spaces to this length
	//
	// For variable-length, code-paged formats (other encodings), this field
	// is typically unset (or 0), as the length is determined by the actual
	// data in 'raw_data'.
	//
	// VALIDATION: If both 'raw_data' and 'length' are present, their lengths
	// must agree. Marshalling will fail with an error if they don't match,
	// ensuring data integrity.
	//
	// This field makes StringValue self-describing, eliminating the need to
	// pass length as a separate parameter during marshalling.
	Length *uint32
}

func (b0 StringValue_builder) Build() *StringValue {
	m0 := &StringValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Encoding != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Encoding = *b.Encoding
	}
	if b.RawData != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_RawData = b.RawData
	}
	if b.Value != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Value = b.Value
	}
	if b.Length != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Length = *b.Length
	}
	return m0
}

var File_wayplatform_connect_tachograph_dd_v1_string_value_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_dd_v1_string_value_proto_rawDesc = "" +
	"\n" +
	"7wayplatform/connect/tachograph/dd/v1/string_value.proto\x12$wayplatform.connect.tachograph.dd.v1\x1a3wayplatform/connect/tachograph/dd/v1/encoding.proto\"\xa2\x01\n" +
	"\vStringValue\x12J\n" +
	"\bencoding\x18\x01 \x01(\x0e2..wayplatform.connect.tachograph.dd.v1.EncodingR\bencoding\x12\x19\n" +
	"\braw_data\x18\x02 \x01(\fR\arawData\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x12\x16\n" +
	"\x06length\x18\x04 \x01(\rR\x06lengthB\xcf\x02\n" +
	"(com.wayplatform.connect.tachograph.dd.v1B\x10StringValueProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1;ddv1\xa2\x02\x04WCTD\xaa\x02$Wayplatform.Connect.Tachograph.Dd.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Dd\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Dd\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Dd::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_dd_v1_string_value_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_dd_v1_string_value_proto_goTypes = []any{
	(*StringValue)(nil), // 0: wayplatform.connect.tachograph.dd.v1.StringValue
	(Encoding)(0),       // 1: wayplatform.connect.tachograph.dd.v1.Encoding
}
var file_wayplatform_connect_tachograph_dd_v1_string_value_proto_depIdxs = []int32{
	1, // 0: wayplatform.connect.tachograph.dd.v1.StringValue.encoding:type_name -> wayplatform.connect.tachograph.dd.v1.Encoding
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_dd_v1_string_value_proto_init() }
func file_wayplatform_connect_tachograph_dd_v1_string_value_proto_init() {
	if File_wayplatform_connect_tachograph_dd_v1_string_value_proto != nil {
		return
	}
	file_wayplatform_connect_tachograph_dd_v1_encoding_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_dd_v1_string_value_proto_rawDesc), len(file_wayplatform_connect_tachograph_dd_v1_string_value_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_dd_v1_string_value_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_dd_v1_string_value_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_dd_v1_string_value_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_dd_v1_string_value_proto = out.File
	file_wayplatform_connect_tachograph_dd_v1_string_value_proto_goTypes = nil
	file_wayplatform_connect_tachograph_dd_v1_string_value_proto_depIdxs = nil
}
