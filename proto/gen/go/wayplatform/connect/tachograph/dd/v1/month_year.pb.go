// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/dd/v1/month_year.proto

package ddv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a BCD-encoded month and year, used in types like ExtendedSerialNumber.
//
// This message preserves the original raw byte representation for round-trip
// data fidelity while also providing convenient decoded integer fields for ease
// of use by consumers.
//
// Source ASN.1 from Data Dictionary, Section 2.72:
//
//	monthYear BCDString(SIZE(2))
type MonthYear struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Encoded     []byte                 `protobuf:"bytes,1,opt,name=encoded"`
	xxx_hidden_Month       int32                  `protobuf:"varint,2,opt,name=month"`
	xxx_hidden_Year        int32                  `protobuf:"varint,3,opt,name=year"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MonthYear) Reset() {
	*x = MonthYear{}
	mi := &file_wayplatform_connect_tachograph_dd_v1_month_year_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthYear) ProtoMessage() {}

func (x *MonthYear) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_dd_v1_month_year_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MonthYear) GetEncoded() []byte {
	if x != nil {
		return x.xxx_hidden_Encoded
	}
	return nil
}

func (x *MonthYear) GetMonth() int32 {
	if x != nil {
		return x.xxx_hidden_Month
	}
	return 0
}

func (x *MonthYear) GetYear() int32 {
	if x != nil {
		return x.xxx_hidden_Year
	}
	return 0
}

func (x *MonthYear) SetEncoded(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Encoded = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *MonthYear) SetMonth(v int32) {
	x.xxx_hidden_Month = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *MonthYear) SetYear(v int32) {
	x.xxx_hidden_Year = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *MonthYear) HasEncoded() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *MonthYear) HasMonth() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *MonthYear) HasYear() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *MonthYear) ClearEncoded() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Encoded = nil
}

func (x *MonthYear) ClearMonth() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Month = 0
}

func (x *MonthYear) ClearYear() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Year = 0
}

type MonthYear_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The raw, original BCD-encoded bytes for the month and year (e.g., `[0x09, 0x23]` for September 2023).
	// This field is the source of truth and should always be used when marshalling
	// the data back to its binary format.
	Encoded []byte
	// The decoded month (1-12). This field is provided for
	// consumer convenience and should be treated as a read-only, derived value.
	Month *int32
	// The decoded year (e.g., 2023). This field is provided for
	// consumer convenience and should be treated as a read-only, derived value.
	Year *int32
}

func (b0 MonthYear_builder) Build() *MonthYear {
	m0 := &MonthYear{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Encoded != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Encoded = b.Encoded
	}
	if b.Month != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Month = *b.Month
	}
	if b.Year != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Year = *b.Year
	}
	return m0
}

var File_wayplatform_connect_tachograph_dd_v1_month_year_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_dd_v1_month_year_proto_rawDesc = "" +
	"\n" +
	"5wayplatform/connect/tachograph/dd/v1/month_year.proto\x12$wayplatform.connect.tachograph.dd.v1\"O\n" +
	"\tMonthYear\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencoded\x12\x14\n" +
	"\x05month\x18\x02 \x01(\x05R\x05month\x12\x12\n" +
	"\x04year\x18\x03 \x01(\x05R\x04yearB\xcd\x02\n" +
	"(com.wayplatform.connect.tachograph.dd.v1B\x0eMonthYearProtoP\x01Z\\github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/dd/v1;ddv1\xa2\x02\x04WCTD\xaa\x02$Wayplatform.Connect.Tachograph.Dd.V1\xca\x02$Wayplatform\\Connect\\Tachograph\\Dd\\V1\xe2\x020Wayplatform\\Connect\\Tachograph\\Dd\\V1\\GPBMetadata\xea\x02(Wayplatform::Connect::Tachograph::Dd::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_dd_v1_month_year_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_dd_v1_month_year_proto_goTypes = []any{
	(*MonthYear)(nil), // 0: wayplatform.connect.tachograph.dd.v1.MonthYear
}
var file_wayplatform_connect_tachograph_dd_v1_month_year_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_dd_v1_month_year_proto_init() }
func file_wayplatform_connect_tachograph_dd_v1_month_year_proto_init() {
	if File_wayplatform_connect_tachograph_dd_v1_month_year_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_dd_v1_month_year_proto_rawDesc), len(file_wayplatform_connect_tachograph_dd_v1_month_year_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_dd_v1_month_year_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_dd_v1_month_year_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_tachograph_dd_v1_month_year_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_dd_v1_month_year_proto = out.File
	file_wayplatform_connect_tachograph_dd_v1_month_year_proto_goTypes = nil
	file_wayplatform_connect_tachograph_dd_v1_month_year_proto_depIdxs = nil
}
