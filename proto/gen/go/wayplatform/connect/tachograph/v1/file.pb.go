// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/tachograph/v1/file.proto

package tachographv1

import (
	v11 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/card/v1"
	v1 "github.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/vu/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines the possible types of a tachograph data file.
type File_Type int32

const (
	// The file type is unknown or not specified.
	File_TYPE_UNSPECIFIED File_Type = 0
	// A file downloaded from a Vehicle Unit (VU).
	File_VEHICLE_UNIT File_Type = 1
	// A file downloaded from a Driver Card.
	File_DRIVER_CARD File_Type = 2
	// A file downloaded from a Workshop Card.
	File_WORKSHOP_CARD File_Type = 3
	// A file downloaded from a Control Card.
	File_CONTROL_CARD File_Type = 4
	// A file downloaded from a Company Card.
	File_COMPANY_CARD File_Type = 5
	// A raw, unparsed card file.
	File_RAW_CARD File_Type = 6
)

// Enum value maps for File_Type.
var (
	File_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "VEHICLE_UNIT",
		2: "DRIVER_CARD",
		3: "WORKSHOP_CARD",
		4: "CONTROL_CARD",
		5: "COMPANY_CARD",
		6: "RAW_CARD",
	}
	File_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"VEHICLE_UNIT":     1,
		"DRIVER_CARD":      2,
		"WORKSHOP_CARD":    3,
		"CONTROL_CARD":     4,
		"COMPANY_CARD":     5,
		"RAW_CARD":         6,
	}
)

func (x File_Type) Enum() *File_Type {
	p := new(File_Type)
	*p = x
	return p
}

func (x File_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (File_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_wayplatform_connect_tachograph_v1_file_proto_enumTypes[0].Descriptor()
}

func (File_Type) Type() protoreflect.EnumType {
	return &file_wayplatform_connect_tachograph_v1_file_proto_enumTypes[0]
}

func (x File_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Represents the entire content of a single parsed tachograph data file (e.g., .DDD, .C1B, .V1B).
//
// This message acts as a top-level container, providing a single, consistent type
// for any kind of tachograph file. It uses a manually tagged union pattern, where the
// `type` field indicates which of the specific file-type fields is populated.
type File struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type        File_Type              `protobuf:"varint,1,opt,name=type,enum=wayplatform.connect.tachograph.v1.File_Type"`
	xxx_hidden_VehicleUnit *v1.VehicleUnitFile    `protobuf:"bytes,2,opt,name=vehicle_unit,json=vehicleUnit"`
	xxx_hidden_DriverCard  *v11.DriverCardFile    `protobuf:"bytes,3,opt,name=driver_card,json=driverCard"`
	xxx_hidden_RawCard     *v11.RawCardFile       `protobuf:"bytes,7,opt,name=raw_card,json=rawCard"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_wayplatform_connect_tachograph_v1_file_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_tachograph_v1_file_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *File) GetType() File_Type {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Type
		}
	}
	return File_TYPE_UNSPECIFIED
}

func (x *File) GetVehicleUnit() *v1.VehicleUnitFile {
	if x != nil {
		return x.xxx_hidden_VehicleUnit
	}
	return nil
}

func (x *File) GetDriverCard() *v11.DriverCardFile {
	if x != nil {
		return x.xxx_hidden_DriverCard
	}
	return nil
}

func (x *File) GetRawCard() *v11.RawCardFile {
	if x != nil {
		return x.xxx_hidden_RawCard
	}
	return nil
}

func (x *File) SetType(v File_Type) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *File) SetVehicleUnit(v *v1.VehicleUnitFile) {
	x.xxx_hidden_VehicleUnit = v
}

func (x *File) SetDriverCard(v *v11.DriverCardFile) {
	x.xxx_hidden_DriverCard = v
}

func (x *File) SetRawCard(v *v11.RawCardFile) {
	x.xxx_hidden_RawCard = v
}

func (x *File) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *File) HasVehicleUnit() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_VehicleUnit != nil
}

func (x *File) HasDriverCard() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DriverCard != nil
}

func (x *File) HasRawCard() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RawCard != nil
}

func (x *File) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Type = File_TYPE_UNSPECIFIED
}

func (x *File) ClearVehicleUnit() {
	x.xxx_hidden_VehicleUnit = nil
}

func (x *File) ClearDriverCard() {
	x.xxx_hidden_DriverCard = nil
}

func (x *File) ClearRawCard() {
	x.xxx_hidden_RawCard = nil
}

type File_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The type of tachograph data file contained in this message. This acts as the
	// discriminator that tells the consumer which of the payload fields is valid.
	Type *File_Type
	// The content of the file if it is from a Vehicle Unit.
	// This field is populated if and only if `type` is `VEHICLE_UNIT`.
	VehicleUnit *v1.VehicleUnitFile
	// The content of the file if it is from a Driver Card.
	// This field is populated if and only if `type` is `DRIVER_CARD`.
	DriverCard *v11.DriverCardFile
	// The raw, uninterpreted content of a card file. This can be used as a
	// fallback or for applications that need to do their own detailed parsing.
	// This field is populated if and only if `type` is `RAW_CARD`.
	RawCard *v11.RawCardFile
}

func (b0 File_builder) Build() *File {
	m0 := &File{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Type = *b.Type
	}
	x.xxx_hidden_VehicleUnit = b.VehicleUnit
	x.xxx_hidden_DriverCard = b.DriverCard
	x.xxx_hidden_RawCard = b.RawCard
	return m0
}

var File_wayplatform_connect_tachograph_v1_file_proto protoreflect.FileDescriptor

const file_wayplatform_connect_tachograph_v1_file_proto_rawDesc = "" +
	"\n" +
	",wayplatform/connect/tachograph/v1/file.proto\x12!wayplatform.connect.tachograph.v1\x1a=wayplatform/connect/tachograph/card/v1/driver_card_file.proto\x1a:wayplatform/connect/tachograph/card/v1/raw_card_file.proto\x1a<wayplatform/connect/tachograph/vu/v1/vehicle_unit_file.proto\"\xd2\x03\n" +
	"\x04File\x12@\n" +
	"\x04type\x18\x01 \x01(\x0e2,.wayplatform.connect.tachograph.v1.File.TypeR\x04type\x12X\n" +
	"\fvehicle_unit\x18\x02 \x01(\v25.wayplatform.connect.tachograph.vu.v1.VehicleUnitFileR\vvehicleUnit\x12W\n" +
	"\vdriver_card\x18\x03 \x01(\v26.wayplatform.connect.tachograph.card.v1.DriverCardFileR\n" +
	"driverCard\x12N\n" +
	"\braw_card\x18\a \x01(\v23.wayplatform.connect.tachograph.card.v1.RawCardFileR\arawCard\"\x84\x01\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fVEHICLE_UNIT\x10\x01\x12\x0f\n" +
	"\vDRIVER_CARD\x10\x02\x12\x11\n" +
	"\rWORKSHOP_CARD\x10\x03\x12\x10\n" +
	"\fCONTROL_CARD\x10\x04\x12\x10\n" +
	"\fCOMPANY_CARD\x10\x05\x12\f\n" +
	"\bRAW_CARD\x10\x06B\xbc\x02\n" +
	"%com.wayplatform.connect.tachograph.v1B\tFileProtoP\x01Zagithub.com/way-platform/tachograph-go/proto/gen/go/wayplatform/connect/tachograph/v1;tachographv1\xa2\x02\x03WCT\xaa\x02!Wayplatform.Connect.Tachograph.V1\xca\x02!Wayplatform\\Connect\\Tachograph\\V1\xe2\x02-Wayplatform\\Connect\\Tachograph\\V1\\GPBMetadata\xea\x02$Wayplatform::Connect::Tachograph::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_tachograph_v1_file_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wayplatform_connect_tachograph_v1_file_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_tachograph_v1_file_proto_goTypes = []any{
	(File_Type)(0),             // 0: wayplatform.connect.tachograph.v1.File.Type
	(*File)(nil),               // 1: wayplatform.connect.tachograph.v1.File
	(*v1.VehicleUnitFile)(nil), // 2: wayplatform.connect.tachograph.vu.v1.VehicleUnitFile
	(*v11.DriverCardFile)(nil), // 3: wayplatform.connect.tachograph.card.v1.DriverCardFile
	(*v11.RawCardFile)(nil),    // 4: wayplatform.connect.tachograph.card.v1.RawCardFile
}
var file_wayplatform_connect_tachograph_v1_file_proto_depIdxs = []int32{
	0, // 0: wayplatform.connect.tachograph.v1.File.type:type_name -> wayplatform.connect.tachograph.v1.File.Type
	2, // 1: wayplatform.connect.tachograph.v1.File.vehicle_unit:type_name -> wayplatform.connect.tachograph.vu.v1.VehicleUnitFile
	3, // 2: wayplatform.connect.tachograph.v1.File.driver_card:type_name -> wayplatform.connect.tachograph.card.v1.DriverCardFile
	4, // 3: wayplatform.connect.tachograph.v1.File.raw_card:type_name -> wayplatform.connect.tachograph.card.v1.RawCardFile
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_tachograph_v1_file_proto_init() }
func file_wayplatform_connect_tachograph_v1_file_proto_init() {
	if File_wayplatform_connect_tachograph_v1_file_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_tachograph_v1_file_proto_rawDesc), len(file_wayplatform_connect_tachograph_v1_file_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_tachograph_v1_file_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_tachograph_v1_file_proto_depIdxs,
		EnumInfos:         file_wayplatform_connect_tachograph_v1_file_proto_enumTypes,
		MessageInfos:      file_wayplatform_connect_tachograph_v1_file_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_tachograph_v1_file_proto = out.File
	file_wayplatform_connect_tachograph_v1_file_proto_goTypes = nil
	file_wayplatform_connect_tachograph_v1_file_proto_depIdxs = nil
}
