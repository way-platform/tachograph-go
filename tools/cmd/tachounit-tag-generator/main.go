package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/way-platform/tacho-go/tools/codegen"
)

// Tag represents a single parsed tag definition from the JSON IR.
type Tag struct {
	Name        string `json:"name"`
	ID          uint64 `json:"id"`
	Description string `json:"description"`
	Source      string `json:"source"`
}

// TachounitData is the root structure of the input JSON file.
type TachounitData struct {
	DownloadTypes   []Tag `json:"downloadTypes"`
	DataIdentifiers []Tag `json:"dataIdentifiers"`
}

func main() {
	var inputFile string
	var outputFile string
	flag.StringVar(&inputFile, "i", "tachounit/tags.json", "Input JSON file")
	flag.StringVar(&outputFile, "o", "tachounit/tags.go", "Output Go file")
	flag.Parse()

	// Read and parse the input JSON file
	jsonData, err := os.ReadFile(inputFile)
	if err != nil {
		log.Fatalf("Failed to read input file %s: %v", inputFile, err)
	}

	var data TachounitData
	if err := json.Unmarshal(jsonData, &data); err != nil {
		log.Fatalf("Failed to unmarshal JSON: %v", err)
	}

	// Create a new file using the codegen utility
	file := codegen.NewFile(filepath.Base(outputFile), "github.com/way-platform/tacho-go/tachounit")

	// Write the header and package declaration
	file.P("// Code generated by tachounit-tag-generator. DO NOT EDIT.")
	file.P()
	file.P("package tachounit")
	file.P()

	// --- Generate DownloadType Enum ---
	if len(data.DownloadTypes) > 0 {
		file.P("// DownloadType represents the type of data to be downloaded from a vehicle unit (TRTP).")
		file.P("type DownloadType byte")
		file.P()
		file.P("// Defines the known vehicle unit download types.")
		file.P("const (")
		for _, tag := range data.DownloadTypes {
			file.P("// ", tag.Name, " is for the ", tag.Description)
			file.P(fmt.Sprintf("%s DownloadType = 0x%02X", tag.Name, tag.ID))
		}
		file.P(")")
		file.P()
	}

	// --- Generate DataIdentifier Enum ---
	if len(data.DataIdentifiers) > 0 {
		file.P("// DataIdentifier represents a record data identifier for reading/writing VU data (RDI).")
		file.P("type DataIdentifier uint16")
		file.P()
		file.P("// Defines the known vehicle unit data identifiers.")
		file.P("const (")
		for _, tag := range data.DataIdentifiers {
			file.P("// ", tag.Name, " is the ", tag.Description)
			file.P(fmt.Sprintf("%s DataIdentifier = 0x%04X", tag.Name, tag.ID))
		}
		file.P(")")
	}

	// Get the formatted content from the codegen utility
	content, err := file.Content()
	if err != nil {
		log.Fatalf("Failed to get generated content: %v", err)
	}

	// Write the final Go file
	if err := os.WriteFile(outputFile, content, 0o644); err != nil {
		log.Fatalf("Failed to write output file %s: %v", outputFile, err)
	}

	fmt.Printf("Successfully generated %s\n", outputFile)
}
