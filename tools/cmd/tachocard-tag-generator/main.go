package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/way-platform/tacho-go/tools/codegen"
)

// Tag represents a single parsed tag definition from the JSON IR.
type Tag struct {
	Name        string `json:"name"`
	ID          uint64 `json:"id"`
	Description string `json:"description"`
	Source      string `json:"source"`
}

// TachocardData is the root structure of the input JSON file.
type TachocardData struct {
	Files []Tag `json:"files"`
}

func main() {
	var inputFile string
	var outputFile string
	flag.StringVar(&inputFile, "i", "tachocard/tags.json", "Input JSON file")
	flag.StringVar(&outputFile, "o", "tachocard/tags.go", "Output Go file")
	flag.Parse()

	// Read and parse the input JSON file
	jsonData, err := os.ReadFile(inputFile)
	if err != nil {
		log.Fatalf("Failed to read input file %s: %v", inputFile, err)
	}

	var data TachocardData
	if err := json.Unmarshal(jsonData, &data); err != nil {
		log.Fatalf("Failed to unmarshal JSON: %v", err)
	}

	// Create a new file using the codegen utility
	// The import path is the package where the file will live.
	file := codegen.NewFile(filepath.Base(outputFile), "github.com/way-platform/tacho-go/tachocard")

	// Write the header and package declaration
	file.P("// Code generated by tachocard-tag-generator. DO NOT EDIT.")
	file.P()
	file.P("package tachocard")
	file.P()

	// Write the type definition for the enum
	file.P("// Tag represents a tachograph card file identifier (FID).")
	file.P("type Tag uint16")
	file.P()

	// Write the const block
	file.P("// Defines the known tachograph card file identifiers.")
	file.P("const (")
	for _, tag := range data.Files {
		file.P("// ", tag.Name, " is the ", tag.Description)
		file.P(fmt.Sprintf("%s Tag = 0x%04X", tag.Name, tag.ID))
	}
	file.P(")")

	// Get the formatted content from the codegen utility
	content, err := file.Content()
	if err != nil {
		log.Fatalf("Failed to get generated content: %v", err)
	}

	// Write the final Go file
	if err := os.WriteFile(outputFile, content, 0o644); err != nil {
		log.Fatalf("Failed to write output file %s: %v", outputFile, err)
	}

	fmt.Printf("Successfully generated %s\n", outputFile)
}
